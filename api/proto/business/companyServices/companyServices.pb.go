// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.9.2
// source: companyServices.proto

package companyServices

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CompanyService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServiceID       int64   `protobuf:"varint,1,opt,name=companyServiceID,proto3" json:"companyServiceID,omitempty"`
	CompanyServiceName     string  `protobuf:"bytes,2,opt,name=companyServiceName,proto3" json:"companyServiceName,omitempty"`
	CompanyServiceDuration int64   `protobuf:"varint,3,opt,name=companyServiceDuration,proto3" json:"companyServiceDuration,omitempty"`
	CompanyServicePrice    float64 `protobuf:"fixed64,4,opt,name=companyServicePrice,proto3" json:"companyServicePrice,omitempty"`
	BusinessServiceID      int64   `protobuf:"varint,5,opt,name=businessServiceID,proto3" json:"businessServiceID,omitempty"`
	BusinessServiceName    string  `protobuf:"bytes,6,opt,name=businessServiceName,proto3" json:"businessServiceName,omitempty"`
	BusinessCompanyID      int64   `protobuf:"varint,7,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
	BusinessCompanyName    string  `protobuf:"bytes,8,opt,name=businessCompanyName,proto3" json:"businessCompanyName,omitempty"`
}

func (x *CompanyService) Reset() {
	*x = CompanyService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyService) ProtoMessage() {}

func (x *CompanyService) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyService.ProtoReflect.Descriptor instead.
func (*CompanyService) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{0}
}

func (x *CompanyService) GetCompanyServiceID() int64 {
	if x != nil {
		return x.CompanyServiceID
	}
	return 0
}

func (x *CompanyService) GetCompanyServiceName() string {
	if x != nil {
		return x.CompanyServiceName
	}
	return ""
}

func (x *CompanyService) GetCompanyServiceDuration() int64 {
	if x != nil {
		return x.CompanyServiceDuration
	}
	return 0
}

func (x *CompanyService) GetCompanyServicePrice() float64 {
	if x != nil {
		return x.CompanyServicePrice
	}
	return 0
}

func (x *CompanyService) GetBusinessServiceID() int64 {
	if x != nil {
		return x.BusinessServiceID
	}
	return 0
}

func (x *CompanyService) GetBusinessServiceName() string {
	if x != nil {
		return x.BusinessServiceName
	}
	return ""
}

func (x *CompanyService) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

func (x *CompanyService) GetBusinessCompanyName() string {
	if x != nil {
		return x.BusinessCompanyName
	}
	return ""
}

type GetCompanyServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServiceID int64 `protobuf:"varint,1,opt,name=companyServiceID,proto3" json:"companyServiceID,omitempty"`
}

func (x *GetCompanyServiceRequest) Reset() {
	*x = GetCompanyServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyServiceRequest) ProtoMessage() {}

func (x *GetCompanyServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyServiceRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyServiceRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{1}
}

func (x *GetCompanyServiceRequest) GetCompanyServiceID() int64 {
	if x != nil {
		return x.CompanyServiceID
	}
	return 0
}

type GetCompanyServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyService *CompanyService `protobuf:"bytes,1,opt,name=companyService,proto3" json:"companyService,omitempty"`
}

func (x *GetCompanyServiceResponse) Reset() {
	*x = GetCompanyServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyServiceResponse) ProtoMessage() {}

func (x *GetCompanyServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyServiceResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyServiceResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{2}
}

func (x *GetCompanyServiceResponse) GetCompanyService() *CompanyService {
	if x != nil {
		return x.CompanyService
	}
	return nil
}

type GetCompanyServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServices []*CompanyService `protobuf:"bytes,1,rep,name=companyServices,proto3" json:"companyServices,omitempty"`
}

func (x *GetCompanyServicesResponse) Reset() {
	*x = GetCompanyServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyServicesResponse) ProtoMessage() {}

func (x *GetCompanyServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyServicesResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyServicesResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{3}
}

func (x *GetCompanyServicesResponse) GetCompanyServices() []*CompanyService {
	if x != nil {
		return x.CompanyServices
	}
	return nil
}

type CreateCompanyServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServiceName     string  `protobuf:"bytes,1,opt,name=companyServiceName,proto3" json:"companyServiceName,omitempty"`
	CompanyServiceDuration int64   `protobuf:"varint,2,opt,name=companyServiceDuration,proto3" json:"companyServiceDuration,omitempty"`
	CompanyServicePrice    float64 `protobuf:"fixed64,3,opt,name=companyServicePrice,proto3" json:"companyServicePrice,omitempty"`
	BusinessServiceID      int64   `protobuf:"varint,4,opt,name=businessServiceID,proto3" json:"businessServiceID,omitempty"`
	BusinessCompanyID      int64   `protobuf:"varint,5,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
}

func (x *CreateCompanyServiceRequest) Reset() {
	*x = CreateCompanyServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyServiceRequest) ProtoMessage() {}

func (x *CreateCompanyServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyServiceRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCompanyServiceRequest) GetCompanyServiceName() string {
	if x != nil {
		return x.CompanyServiceName
	}
	return ""
}

func (x *CreateCompanyServiceRequest) GetCompanyServiceDuration() int64 {
	if x != nil {
		return x.CompanyServiceDuration
	}
	return 0
}

func (x *CreateCompanyServiceRequest) GetCompanyServicePrice() float64 {
	if x != nil {
		return x.CompanyServicePrice
	}
	return 0
}

func (x *CreateCompanyServiceRequest) GetBusinessServiceID() int64 {
	if x != nil {
		return x.BusinessServiceID
	}
	return 0
}

func (x *CreateCompanyServiceRequest) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

type CreateCompanyServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyService *CompanyService `protobuf:"bytes,1,opt,name=companyService,proto3" json:"companyService,omitempty"`
}

func (x *CreateCompanyServiceResponse) Reset() {
	*x = CreateCompanyServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyServiceResponse) ProtoMessage() {}

func (x *CreateCompanyServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateCompanyServiceResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCompanyServiceResponse) GetCompanyService() *CompanyService {
	if x != nil {
		return x.CompanyService
	}
	return nil
}

type UpdateCompanyServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServiceID       int64   `protobuf:"varint,1,opt,name=companyServiceID,proto3" json:"companyServiceID,omitempty"`
	CompanyServiceName     string  `protobuf:"bytes,2,opt,name=companyServiceName,proto3" json:"companyServiceName,omitempty"`
	CompanyServiceDuration int64   `protobuf:"varint,3,opt,name=companyServiceDuration,proto3" json:"companyServiceDuration,omitempty"`
	CompanyServicePrice    float64 `protobuf:"fixed64,4,opt,name=companyServicePrice,proto3" json:"companyServicePrice,omitempty"`
	BusinessServiceID      int64   `protobuf:"varint,5,opt,name=businessServiceID,proto3" json:"businessServiceID,omitempty"`
	BusinessCompanyID      int64   `protobuf:"varint,6,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
}

func (x *UpdateCompanyServiceRequest) Reset() {
	*x = UpdateCompanyServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCompanyServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyServiceRequest) ProtoMessage() {}

func (x *UpdateCompanyServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompanyServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateCompanyServiceRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCompanyServiceRequest) GetCompanyServiceID() int64 {
	if x != nil {
		return x.CompanyServiceID
	}
	return 0
}

func (x *UpdateCompanyServiceRequest) GetCompanyServiceName() string {
	if x != nil {
		return x.CompanyServiceName
	}
	return ""
}

func (x *UpdateCompanyServiceRequest) GetCompanyServiceDuration() int64 {
	if x != nil {
		return x.CompanyServiceDuration
	}
	return 0
}

func (x *UpdateCompanyServiceRequest) GetCompanyServicePrice() float64 {
	if x != nil {
		return x.CompanyServicePrice
	}
	return 0
}

func (x *UpdateCompanyServiceRequest) GetBusinessServiceID() int64 {
	if x != nil {
		return x.BusinessServiceID
	}
	return 0
}

func (x *UpdateCompanyServiceRequest) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

type UpdateCompanyServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyService *CompanyService `protobuf:"bytes,1,opt,name=companyService,proto3" json:"companyService,omitempty"`
}

func (x *UpdateCompanyServiceResponse) Reset() {
	*x = UpdateCompanyServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCompanyServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyServiceResponse) ProtoMessage() {}

func (x *UpdateCompanyServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompanyServiceResponse.ProtoReflect.Descriptor instead.
func (*UpdateCompanyServiceResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCompanyServiceResponse) GetCompanyService() *CompanyService {
	if x != nil {
		return x.CompanyService
	}
	return nil
}

type DeleteCompanyServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServiceID int64 `protobuf:"varint,1,opt,name=companyServiceID,proto3" json:"companyServiceID,omitempty"`
}

func (x *DeleteCompanyServiceRequest) Reset() {
	*x = DeleteCompanyServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompanyServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyServiceRequest) ProtoMessage() {}

func (x *DeleteCompanyServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteCompanyServiceRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCompanyServiceRequest) GetCompanyServiceID() int64 {
	if x != nil {
		return x.CompanyServiceID
	}
	return 0
}

type DeleteCompanyServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyService *CompanyService `protobuf:"bytes,1,opt,name=companyService,proto3" json:"companyService,omitempty"`
}

func (x *DeleteCompanyServiceResponse) Reset() {
	*x = DeleteCompanyServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompanyServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyServiceResponse) ProtoMessage() {}

func (x *DeleteCompanyServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyServiceResponse.ProtoReflect.Descriptor instead.
func (*DeleteCompanyServiceResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCompanyServiceResponse) GetCompanyService() *CompanyService {
	if x != nil {
		return x.CompanyService
	}
	return nil
}

type GetCompanyServicesUnderSubCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubCategoryID int64 `protobuf:"varint,1,opt,name=subCategoryID,proto3" json:"subCategoryID,omitempty"`
}

func (x *GetCompanyServicesUnderSubCategoryRequest) Reset() {
	*x = GetCompanyServicesUnderSubCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyServicesUnderSubCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyServicesUnderSubCategoryRequest) ProtoMessage() {}

func (x *GetCompanyServicesUnderSubCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyServicesUnderSubCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyServicesUnderSubCategoryRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{10}
}

func (x *GetCompanyServicesUnderSubCategoryRequest) GetSubCategoryID() int64 {
	if x != nil {
		return x.SubCategoryID
	}
	return 0
}

type GetCompanyServicesUnderSubCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServices []*CompanyService `protobuf:"bytes,1,rep,name=companyServices,proto3" json:"companyServices,omitempty"`
}

func (x *GetCompanyServicesUnderSubCategoryResponse) Reset() {
	*x = GetCompanyServicesUnderSubCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyServicesUnderSubCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyServicesUnderSubCategoryResponse) ProtoMessage() {}

func (x *GetCompanyServicesUnderSubCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyServicesUnderSubCategoryResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyServicesUnderSubCategoryResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{11}
}

func (x *GetCompanyServicesUnderSubCategoryResponse) GetCompanyServices() []*CompanyService {
	if x != nil {
		return x.CompanyServices
	}
	return nil
}

type GetCompanyServicesUnderCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryID int64 `protobuf:"varint,1,opt,name=categoryID,proto3" json:"categoryID,omitempty"`
}

func (x *GetCompanyServicesUnderCategoryRequest) Reset() {
	*x = GetCompanyServicesUnderCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyServicesUnderCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyServicesUnderCategoryRequest) ProtoMessage() {}

func (x *GetCompanyServicesUnderCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyServicesUnderCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyServicesUnderCategoryRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{12}
}

func (x *GetCompanyServicesUnderCategoryRequest) GetCategoryID() int64 {
	if x != nil {
		return x.CategoryID
	}
	return 0
}

type GetCompanyServicesUnderCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServices []*CompanyService `protobuf:"bytes,1,rep,name=companyServices,proto3" json:"companyServices,omitempty"`
}

func (x *GetCompanyServicesUnderCategoryResponse) Reset() {
	*x = GetCompanyServicesUnderCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyServicesUnderCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyServicesUnderCategoryResponse) ProtoMessage() {}

func (x *GetCompanyServicesUnderCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyServicesUnderCategoryResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyServicesUnderCategoryResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{13}
}

func (x *GetCompanyServicesUnderCategoryResponse) GetCompanyServices() []*CompanyService {
	if x != nil {
		return x.CompanyServices
	}
	return nil
}

type BusinessCompanyServiceOperationHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceOperationHourID int64  `protobuf:"varint,1,opt,name=serviceOperationHourID,proto3" json:"serviceOperationHourID,omitempty"`
	BusinessCompanyID      int64  `protobuf:"varint,2,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
	BusinessServiceID      int64  `protobuf:"varint,3,opt,name=businessServiceID,proto3" json:"businessServiceID,omitempty"`
	DayOfWeek              int64  `protobuf:"varint,4,opt,name=dayOfWeek,proto3" json:"dayOfWeek,omitempty"`
	OpenTime               string `protobuf:"bytes,5,opt,name=openTime,proto3" json:"openTime,omitempty"`
	CloseTime              string `protobuf:"bytes,6,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
}

func (x *BusinessCompanyServiceOperationHour) Reset() {
	*x = BusinessCompanyServiceOperationHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyServiceOperationHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyServiceOperationHour) ProtoMessage() {}

func (x *BusinessCompanyServiceOperationHour) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyServiceOperationHour.ProtoReflect.Descriptor instead.
func (*BusinessCompanyServiceOperationHour) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{14}
}

func (x *BusinessCompanyServiceOperationHour) GetServiceOperationHourID() int64 {
	if x != nil {
		return x.ServiceOperationHourID
	}
	return 0
}

func (x *BusinessCompanyServiceOperationHour) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

func (x *BusinessCompanyServiceOperationHour) GetBusinessServiceID() int64 {
	if x != nil {
		return x.BusinessServiceID
	}
	return 0
}

func (x *BusinessCompanyServiceOperationHour) GetDayOfWeek() int64 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *BusinessCompanyServiceOperationHour) GetOpenTime() string {
	if x != nil {
		return x.OpenTime
	}
	return ""
}

func (x *BusinessCompanyServiceOperationHour) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

type GetBusinessCompanyServiceOperationHourByDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceID int64 `protobuf:"varint,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	DayOfWeek int64 `protobuf:"varint,2,opt,name=dayOfWeek,proto3" json:"dayOfWeek,omitempty"`
}

func (x *GetBusinessCompanyServiceOperationHourByDayRequest) Reset() {
	*x = GetBusinessCompanyServiceOperationHourByDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyServiceOperationHourByDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyServiceOperationHourByDayRequest) ProtoMessage() {}

func (x *GetBusinessCompanyServiceOperationHourByDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyServiceOperationHourByDayRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyServiceOperationHourByDayRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{15}
}

func (x *GetBusinessCompanyServiceOperationHourByDayRequest) GetServiceID() int64 {
	if x != nil {
		return x.ServiceID
	}
	return 0
}

func (x *GetBusinessCompanyServiceOperationHourByDayRequest) GetDayOfWeek() int64 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

type GetBusinessCompanyServiceOperationHourByDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyServiceOperationHour *BusinessCompanyServiceOperationHour `protobuf:"bytes,1,opt,name=businessCompanyServiceOperationHour,proto3" json:"businessCompanyServiceOperationHour,omitempty"`
}

func (x *GetBusinessCompanyServiceOperationHourByDayResponse) Reset() {
	*x = GetBusinessCompanyServiceOperationHourByDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyServiceOperationHourByDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyServiceOperationHourByDayResponse) ProtoMessage() {}

func (x *GetBusinessCompanyServiceOperationHourByDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyServiceOperationHourByDayResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyServiceOperationHourByDayResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{16}
}

func (x *GetBusinessCompanyServiceOperationHourByDayResponse) GetBusinessCompanyServiceOperationHour() *BusinessCompanyServiceOperationHour {
	if x != nil {
		return x.BusinessCompanyServiceOperationHour
	}
	return nil
}

type GetBusinessCompanyServiceOperationHoursRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceID int64 `protobuf:"varint,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
}

func (x *GetBusinessCompanyServiceOperationHoursRequest) Reset() {
	*x = GetBusinessCompanyServiceOperationHoursRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyServiceOperationHoursRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyServiceOperationHoursRequest) ProtoMessage() {}

func (x *GetBusinessCompanyServiceOperationHoursRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyServiceOperationHoursRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyServiceOperationHoursRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{17}
}

func (x *GetBusinessCompanyServiceOperationHoursRequest) GetServiceID() int64 {
	if x != nil {
		return x.ServiceID
	}
	return 0
}

type GetBusinessCompanyServiceOperationHoursResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyServiceOperationHour []*BusinessCompanyServiceOperationHour `protobuf:"bytes,1,rep,name=businessCompanyServiceOperationHour,proto3" json:"businessCompanyServiceOperationHour,omitempty"`
}

func (x *GetBusinessCompanyServiceOperationHoursResponse) Reset() {
	*x = GetBusinessCompanyServiceOperationHoursResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyServiceOperationHoursResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyServiceOperationHoursResponse) ProtoMessage() {}

func (x *GetBusinessCompanyServiceOperationHoursResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyServiceOperationHoursResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyServiceOperationHoursResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{18}
}

func (x *GetBusinessCompanyServiceOperationHoursResponse) GetBusinessCompanyServiceOperationHour() []*BusinessCompanyServiceOperationHour {
	if x != nil {
		return x.BusinessCompanyServiceOperationHour
	}
	return nil
}

type CreateBusinessCompanyServiceOperationHourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyID int64  `protobuf:"varint,1,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
	BusinessServiceID int64  `protobuf:"varint,2,opt,name=businessServiceID,proto3" json:"businessServiceID,omitempty"`
	DayOfWeek         int64  `protobuf:"varint,3,opt,name=dayOfWeek,proto3" json:"dayOfWeek,omitempty"`
	OpenTime          string `protobuf:"bytes,4,opt,name=openTime,proto3" json:"openTime,omitempty"`
	CloseTime         string `protobuf:"bytes,5,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
}

func (x *CreateBusinessCompanyServiceOperationHourRequest) Reset() {
	*x = CreateBusinessCompanyServiceOperationHourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessCompanyServiceOperationHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessCompanyServiceOperationHourRequest) ProtoMessage() {}

func (x *CreateBusinessCompanyServiceOperationHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessCompanyServiceOperationHourRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessCompanyServiceOperationHourRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{19}
}

func (x *CreateBusinessCompanyServiceOperationHourRequest) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

func (x *CreateBusinessCompanyServiceOperationHourRequest) GetBusinessServiceID() int64 {
	if x != nil {
		return x.BusinessServiceID
	}
	return 0
}

func (x *CreateBusinessCompanyServiceOperationHourRequest) GetDayOfWeek() int64 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *CreateBusinessCompanyServiceOperationHourRequest) GetOpenTime() string {
	if x != nil {
		return x.OpenTime
	}
	return ""
}

func (x *CreateBusinessCompanyServiceOperationHourRequest) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

type CreateBusinessCompanyServiceOperationHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyServiceOperationHour *BusinessCompanyServiceOperationHour `protobuf:"bytes,1,opt,name=businessCompanyServiceOperationHour,proto3" json:"businessCompanyServiceOperationHour,omitempty"`
}

func (x *CreateBusinessCompanyServiceOperationHourResponse) Reset() {
	*x = CreateBusinessCompanyServiceOperationHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessCompanyServiceOperationHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessCompanyServiceOperationHourResponse) ProtoMessage() {}

func (x *CreateBusinessCompanyServiceOperationHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessCompanyServiceOperationHourResponse.ProtoReflect.Descriptor instead.
func (*CreateBusinessCompanyServiceOperationHourResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{20}
}

func (x *CreateBusinessCompanyServiceOperationHourResponse) GetBusinessCompanyServiceOperationHour() *BusinessCompanyServiceOperationHour {
	if x != nil {
		return x.BusinessCompanyServiceOperationHour
	}
	return nil
}

type UpdateBusinessCompanyServiceOperationHourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyServiceOperationHour *BusinessCompanyServiceOperationHour `protobuf:"bytes,1,opt,name=businessCompanyServiceOperationHour,proto3" json:"businessCompanyServiceOperationHour,omitempty"`
}

func (x *UpdateBusinessCompanyServiceOperationHourRequest) Reset() {
	*x = UpdateBusinessCompanyServiceOperationHourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessCompanyServiceOperationHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessCompanyServiceOperationHourRequest) ProtoMessage() {}

func (x *UpdateBusinessCompanyServiceOperationHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessCompanyServiceOperationHourRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessCompanyServiceOperationHourRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateBusinessCompanyServiceOperationHourRequest) GetBusinessCompanyServiceOperationHour() *BusinessCompanyServiceOperationHour {
	if x != nil {
		return x.BusinessCompanyServiceOperationHour
	}
	return nil
}

type UpdateBusinessCompanyServiceOperationHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyServiceOperationHour *BusinessCompanyServiceOperationHour `protobuf:"bytes,1,opt,name=businessCompanyServiceOperationHour,proto3" json:"businessCompanyServiceOperationHour,omitempty"`
}

func (x *UpdateBusinessCompanyServiceOperationHourResponse) Reset() {
	*x = UpdateBusinessCompanyServiceOperationHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessCompanyServiceOperationHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessCompanyServiceOperationHourResponse) ProtoMessage() {}

func (x *UpdateBusinessCompanyServiceOperationHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessCompanyServiceOperationHourResponse.ProtoReflect.Descriptor instead.
func (*UpdateBusinessCompanyServiceOperationHourResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateBusinessCompanyServiceOperationHourResponse) GetBusinessCompanyServiceOperationHour() *BusinessCompanyServiceOperationHour {
	if x != nil {
		return x.BusinessCompanyServiceOperationHour
	}
	return nil
}

type DeleteBusinessCompanyServiceOperationHourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationHourID int64 `protobuf:"varint,1,opt,name=OperationHourID,proto3" json:"OperationHourID,omitempty"`
}

func (x *DeleteBusinessCompanyServiceOperationHourRequest) Reset() {
	*x = DeleteBusinessCompanyServiceOperationHourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessCompanyServiceOperationHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessCompanyServiceOperationHourRequest) ProtoMessage() {}

func (x *DeleteBusinessCompanyServiceOperationHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessCompanyServiceOperationHourRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessCompanyServiceOperationHourRequest) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteBusinessCompanyServiceOperationHourRequest) GetOperationHourID() int64 {
	if x != nil {
		return x.OperationHourID
	}
	return 0
}

type DeleteBusinessCompanyServiceOperationHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyServiceOperationHour *BusinessCompanyServiceOperationHour `protobuf:"bytes,1,opt,name=businessCompanyServiceOperationHour,proto3" json:"businessCompanyServiceOperationHour,omitempty"`
}

func (x *DeleteBusinessCompanyServiceOperationHourResponse) Reset() {
	*x = DeleteBusinessCompanyServiceOperationHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companyServices_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessCompanyServiceOperationHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessCompanyServiceOperationHourResponse) ProtoMessage() {}

func (x *DeleteBusinessCompanyServiceOperationHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companyServices_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessCompanyServiceOperationHourResponse.ProtoReflect.Descriptor instead.
func (*DeleteBusinessCompanyServiceOperationHourResponse) Descriptor() ([]byte, []int) {
	return file_companyServices_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteBusinessCompanyServiceOperationHourResponse) GetBusinessCompanyServiceOperationHour() *BusinessCompanyServiceOperationHour {
	if x != nil {
		return x.BusinessCompanyServiceOperationHour
	}
	return nil
}

var File_companyServices_proto protoreflect.FileDescriptor

var file_companyServices_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x67, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x49, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x48, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x27, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x91, 0x02, 0x0a, 0x23, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x42, 0x79, 0x44,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x22, 0xbe, 0x01, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x4e, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0xba, 0x01, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x23,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x30,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x86, 0x01, 0x0a, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x52, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x31, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x5c, 0x0a, 0x30, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x49, 0x44, 0x22, 0xbc, 0x01, 0x0a, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x52, 0x23, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x32, 0x8f, 0x0e, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xba, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x42,
	0x79, 0x44, 0x61, 0x79, 0x12, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x42, 0x79, 0x44,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xae, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x75, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xb4, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb4, 0x01, 0x0a, 0x29, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xb4, 0x01, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x41,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x3b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_companyServices_proto_rawDescOnce sync.Once
	file_companyServices_proto_rawDescData = file_companyServices_proto_rawDesc
)

func file_companyServices_proto_rawDescGZIP() []byte {
	file_companyServices_proto_rawDescOnce.Do(func() {
		file_companyServices_proto_rawDescData = protoimpl.X.CompressGZIP(file_companyServices_proto_rawDescData)
	})
	return file_companyServices_proto_rawDescData
}

var file_companyServices_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_companyServices_proto_goTypes = []interface{}{
	(*CompanyService)(nil),                                      // 0: companyServices.CompanyService
	(*GetCompanyServiceRequest)(nil),                            // 1: companyServices.GetCompanyServiceRequest
	(*GetCompanyServiceResponse)(nil),                           // 2: companyServices.GetCompanyServiceResponse
	(*GetCompanyServicesResponse)(nil),                          // 3: companyServices.GetCompanyServicesResponse
	(*CreateCompanyServiceRequest)(nil),                         // 4: companyServices.CreateCompanyServiceRequest
	(*CreateCompanyServiceResponse)(nil),                        // 5: companyServices.CreateCompanyServiceResponse
	(*UpdateCompanyServiceRequest)(nil),                         // 6: companyServices.UpdateCompanyServiceRequest
	(*UpdateCompanyServiceResponse)(nil),                        // 7: companyServices.UpdateCompanyServiceResponse
	(*DeleteCompanyServiceRequest)(nil),                         // 8: companyServices.DeleteCompanyServiceRequest
	(*DeleteCompanyServiceResponse)(nil),                        // 9: companyServices.DeleteCompanyServiceResponse
	(*GetCompanyServicesUnderSubCategoryRequest)(nil),           // 10: companyServices.GetCompanyServicesUnderSubCategoryRequest
	(*GetCompanyServicesUnderSubCategoryResponse)(nil),          // 11: companyServices.GetCompanyServicesUnderSubCategoryResponse
	(*GetCompanyServicesUnderCategoryRequest)(nil),              // 12: companyServices.GetCompanyServicesUnderCategoryRequest
	(*GetCompanyServicesUnderCategoryResponse)(nil),             // 13: companyServices.GetCompanyServicesUnderCategoryResponse
	(*BusinessCompanyServiceOperationHour)(nil),                 // 14: companyServices.BusinessCompanyServiceOperationHour
	(*GetBusinessCompanyServiceOperationHourByDayRequest)(nil),  // 15: companyServices.GetBusinessCompanyServiceOperationHourByDayRequest
	(*GetBusinessCompanyServiceOperationHourByDayResponse)(nil), // 16: companyServices.GetBusinessCompanyServiceOperationHourByDayResponse
	(*GetBusinessCompanyServiceOperationHoursRequest)(nil),      // 17: companyServices.GetBusinessCompanyServiceOperationHoursRequest
	(*GetBusinessCompanyServiceOperationHoursResponse)(nil),     // 18: companyServices.GetBusinessCompanyServiceOperationHoursResponse
	(*CreateBusinessCompanyServiceOperationHourRequest)(nil),    // 19: companyServices.CreateBusinessCompanyServiceOperationHourRequest
	(*CreateBusinessCompanyServiceOperationHourResponse)(nil),   // 20: companyServices.CreateBusinessCompanyServiceOperationHourResponse
	(*UpdateBusinessCompanyServiceOperationHourRequest)(nil),    // 21: companyServices.UpdateBusinessCompanyServiceOperationHourRequest
	(*UpdateBusinessCompanyServiceOperationHourResponse)(nil),   // 22: companyServices.UpdateBusinessCompanyServiceOperationHourResponse
	(*DeleteBusinessCompanyServiceOperationHourRequest)(nil),    // 23: companyServices.DeleteBusinessCompanyServiceOperationHourRequest
	(*DeleteBusinessCompanyServiceOperationHourResponse)(nil),   // 24: companyServices.DeleteBusinessCompanyServiceOperationHourResponse
	(*empty.Empty)(nil),                                         // 25: google.protobuf.Empty
}
var file_companyServices_proto_depIdxs = []int32{
	0,  // 0: companyServices.GetCompanyServiceResponse.companyService:type_name -> companyServices.CompanyService
	0,  // 1: companyServices.GetCompanyServicesResponse.companyServices:type_name -> companyServices.CompanyService
	0,  // 2: companyServices.CreateCompanyServiceResponse.companyService:type_name -> companyServices.CompanyService
	0,  // 3: companyServices.UpdateCompanyServiceResponse.companyService:type_name -> companyServices.CompanyService
	0,  // 4: companyServices.DeleteCompanyServiceResponse.companyService:type_name -> companyServices.CompanyService
	0,  // 5: companyServices.GetCompanyServicesUnderSubCategoryResponse.companyServices:type_name -> companyServices.CompanyService
	0,  // 6: companyServices.GetCompanyServicesUnderCategoryResponse.companyServices:type_name -> companyServices.CompanyService
	14, // 7: companyServices.GetBusinessCompanyServiceOperationHourByDayResponse.businessCompanyServiceOperationHour:type_name -> companyServices.BusinessCompanyServiceOperationHour
	14, // 8: companyServices.GetBusinessCompanyServiceOperationHoursResponse.businessCompanyServiceOperationHour:type_name -> companyServices.BusinessCompanyServiceOperationHour
	14, // 9: companyServices.CreateBusinessCompanyServiceOperationHourResponse.businessCompanyServiceOperationHour:type_name -> companyServices.BusinessCompanyServiceOperationHour
	14, // 10: companyServices.UpdateBusinessCompanyServiceOperationHourRequest.businessCompanyServiceOperationHour:type_name -> companyServices.BusinessCompanyServiceOperationHour
	14, // 11: companyServices.UpdateBusinessCompanyServiceOperationHourResponse.businessCompanyServiceOperationHour:type_name -> companyServices.BusinessCompanyServiceOperationHour
	14, // 12: companyServices.DeleteBusinessCompanyServiceOperationHourResponse.businessCompanyServiceOperationHour:type_name -> companyServices.BusinessCompanyServiceOperationHour
	1,  // 13: companyServices.CompanyServices.GetCompanyService:input_type -> companyServices.GetCompanyServiceRequest
	25, // 14: companyServices.CompanyServices.GetCompanyServices:input_type -> google.protobuf.Empty
	15, // 15: companyServices.CompanyServices.GetBusinessCompanyServiceOperationHourByDay:input_type -> companyServices.GetBusinessCompanyServiceOperationHourByDayRequest
	17, // 16: companyServices.CompanyServices.GetBusinessCompanyServiceOperationHours:input_type -> companyServices.GetBusinessCompanyServiceOperationHoursRequest
	4,  // 17: companyServices.CompanyServices.CreateCompanyService:input_type -> companyServices.CreateCompanyServiceRequest
	6,  // 18: companyServices.CompanyServices.UpdateCompanyService:input_type -> companyServices.UpdateCompanyServiceRequest
	8,  // 19: companyServices.CompanyServices.DeleteCompanyService:input_type -> companyServices.DeleteCompanyServiceRequest
	10, // 20: companyServices.CompanyServices.GetCompanyServicesUnderSubCategory:input_type -> companyServices.GetCompanyServicesUnderSubCategoryRequest
	12, // 21: companyServices.CompanyServices.GetCompanyServicesUnderCategory:input_type -> companyServices.GetCompanyServicesUnderCategoryRequest
	19, // 22: companyServices.CompanyServices.CreateBusinessCompanyServiceOperationHour:input_type -> companyServices.CreateBusinessCompanyServiceOperationHourRequest
	21, // 23: companyServices.CompanyServices.UpdateBusinessCompanyServiceOperationHour:input_type -> companyServices.UpdateBusinessCompanyServiceOperationHourRequest
	23, // 24: companyServices.CompanyServices.DeleteBusinessCompanyServiceOperationHour:input_type -> companyServices.DeleteBusinessCompanyServiceOperationHourRequest
	2,  // 25: companyServices.CompanyServices.GetCompanyService:output_type -> companyServices.GetCompanyServiceResponse
	3,  // 26: companyServices.CompanyServices.GetCompanyServices:output_type -> companyServices.GetCompanyServicesResponse
	16, // 27: companyServices.CompanyServices.GetBusinessCompanyServiceOperationHourByDay:output_type -> companyServices.GetBusinessCompanyServiceOperationHourByDayResponse
	18, // 28: companyServices.CompanyServices.GetBusinessCompanyServiceOperationHours:output_type -> companyServices.GetBusinessCompanyServiceOperationHoursResponse
	5,  // 29: companyServices.CompanyServices.CreateCompanyService:output_type -> companyServices.CreateCompanyServiceResponse
	7,  // 30: companyServices.CompanyServices.UpdateCompanyService:output_type -> companyServices.UpdateCompanyServiceResponse
	9,  // 31: companyServices.CompanyServices.DeleteCompanyService:output_type -> companyServices.DeleteCompanyServiceResponse
	11, // 32: companyServices.CompanyServices.GetCompanyServicesUnderSubCategory:output_type -> companyServices.GetCompanyServicesUnderSubCategoryResponse
	13, // 33: companyServices.CompanyServices.GetCompanyServicesUnderCategory:output_type -> companyServices.GetCompanyServicesUnderCategoryResponse
	20, // 34: companyServices.CompanyServices.CreateBusinessCompanyServiceOperationHour:output_type -> companyServices.CreateBusinessCompanyServiceOperationHourResponse
	22, // 35: companyServices.CompanyServices.UpdateBusinessCompanyServiceOperationHour:output_type -> companyServices.UpdateBusinessCompanyServiceOperationHourResponse
	24, // 36: companyServices.CompanyServices.DeleteBusinessCompanyServiceOperationHour:output_type -> companyServices.DeleteBusinessCompanyServiceOperationHourResponse
	25, // [25:37] is the sub-list for method output_type
	13, // [13:25] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_companyServices_proto_init() }
func file_companyServices_proto_init() {
	if File_companyServices_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_companyServices_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCompanyServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCompanyServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompanyServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompanyServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyServicesUnderSubCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyServicesUnderSubCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyServicesUnderCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyServicesUnderCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyServiceOperationHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyServiceOperationHourByDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyServiceOperationHourByDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyServiceOperationHoursRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyServiceOperationHoursResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessCompanyServiceOperationHourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessCompanyServiceOperationHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessCompanyServiceOperationHourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessCompanyServiceOperationHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessCompanyServiceOperationHourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companyServices_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessCompanyServiceOperationHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_companyServices_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_companyServices_proto_goTypes,
		DependencyIndexes: file_companyServices_proto_depIdxs,
		MessageInfos:      file_companyServices_proto_msgTypes,
	}.Build()
	File_companyServices_proto = out.File
	file_companyServices_proto_rawDesc = nil
	file_companyServices_proto_goTypes = nil
	file_companyServices_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyServicesClient is the client API for CompanyServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyServicesClient interface {
	GetCompanyService(ctx context.Context, in *GetCompanyServiceRequest, opts ...grpc.CallOption) (*GetCompanyServiceResponse, error)
	GetCompanyServices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCompanyServicesResponse, error)
	GetBusinessCompanyServiceOperationHourByDay(ctx context.Context, in *GetBusinessCompanyServiceOperationHourByDayRequest, opts ...grpc.CallOption) (*GetBusinessCompanyServiceOperationHourByDayResponse, error)
	GetBusinessCompanyServiceOperationHours(ctx context.Context, in *GetBusinessCompanyServiceOperationHoursRequest, opts ...grpc.CallOption) (*GetBusinessCompanyServiceOperationHoursResponse, error)
	CreateCompanyService(ctx context.Context, in *CreateCompanyServiceRequest, opts ...grpc.CallOption) (*CreateCompanyServiceResponse, error)
	UpdateCompanyService(ctx context.Context, in *UpdateCompanyServiceRequest, opts ...grpc.CallOption) (*UpdateCompanyServiceResponse, error)
	DeleteCompanyService(ctx context.Context, in *DeleteCompanyServiceRequest, opts ...grpc.CallOption) (*DeleteCompanyServiceResponse, error)
	GetCompanyServicesUnderSubCategory(ctx context.Context, in *GetCompanyServicesUnderSubCategoryRequest, opts ...grpc.CallOption) (*GetCompanyServicesUnderSubCategoryResponse, error)
	GetCompanyServicesUnderCategory(ctx context.Context, in *GetCompanyServicesUnderCategoryRequest, opts ...grpc.CallOption) (*GetCompanyServicesUnderCategoryResponse, error)
	CreateBusinessCompanyServiceOperationHour(ctx context.Context, in *CreateBusinessCompanyServiceOperationHourRequest, opts ...grpc.CallOption) (*CreateBusinessCompanyServiceOperationHourResponse, error)
	UpdateBusinessCompanyServiceOperationHour(ctx context.Context, in *UpdateBusinessCompanyServiceOperationHourRequest, opts ...grpc.CallOption) (*UpdateBusinessCompanyServiceOperationHourResponse, error)
	DeleteBusinessCompanyServiceOperationHour(ctx context.Context, in *DeleteBusinessCompanyServiceOperationHourRequest, opts ...grpc.CallOption) (*DeleteBusinessCompanyServiceOperationHourResponse, error)
}

type companyServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServicesClient(cc grpc.ClientConnInterface) CompanyServicesClient {
	return &companyServicesClient{cc}
}

func (c *companyServicesClient) GetCompanyService(ctx context.Context, in *GetCompanyServiceRequest, opts ...grpc.CallOption) (*GetCompanyServiceResponse, error) {
	out := new(GetCompanyServiceResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/GetCompanyService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) GetCompanyServices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCompanyServicesResponse, error) {
	out := new(GetCompanyServicesResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/GetCompanyServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) GetBusinessCompanyServiceOperationHourByDay(ctx context.Context, in *GetBusinessCompanyServiceOperationHourByDayRequest, opts ...grpc.CallOption) (*GetBusinessCompanyServiceOperationHourByDayResponse, error) {
	out := new(GetBusinessCompanyServiceOperationHourByDayResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/GetBusinessCompanyServiceOperationHourByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) GetBusinessCompanyServiceOperationHours(ctx context.Context, in *GetBusinessCompanyServiceOperationHoursRequest, opts ...grpc.CallOption) (*GetBusinessCompanyServiceOperationHoursResponse, error) {
	out := new(GetBusinessCompanyServiceOperationHoursResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/GetBusinessCompanyServiceOperationHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) CreateCompanyService(ctx context.Context, in *CreateCompanyServiceRequest, opts ...grpc.CallOption) (*CreateCompanyServiceResponse, error) {
	out := new(CreateCompanyServiceResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/CreateCompanyService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) UpdateCompanyService(ctx context.Context, in *UpdateCompanyServiceRequest, opts ...grpc.CallOption) (*UpdateCompanyServiceResponse, error) {
	out := new(UpdateCompanyServiceResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/UpdateCompanyService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) DeleteCompanyService(ctx context.Context, in *DeleteCompanyServiceRequest, opts ...grpc.CallOption) (*DeleteCompanyServiceResponse, error) {
	out := new(DeleteCompanyServiceResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/DeleteCompanyService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) GetCompanyServicesUnderSubCategory(ctx context.Context, in *GetCompanyServicesUnderSubCategoryRequest, opts ...grpc.CallOption) (*GetCompanyServicesUnderSubCategoryResponse, error) {
	out := new(GetCompanyServicesUnderSubCategoryResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/GetCompanyServicesUnderSubCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) GetCompanyServicesUnderCategory(ctx context.Context, in *GetCompanyServicesUnderCategoryRequest, opts ...grpc.CallOption) (*GetCompanyServicesUnderCategoryResponse, error) {
	out := new(GetCompanyServicesUnderCategoryResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/GetCompanyServicesUnderCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) CreateBusinessCompanyServiceOperationHour(ctx context.Context, in *CreateBusinessCompanyServiceOperationHourRequest, opts ...grpc.CallOption) (*CreateBusinessCompanyServiceOperationHourResponse, error) {
	out := new(CreateBusinessCompanyServiceOperationHourResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/CreateBusinessCompanyServiceOperationHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) UpdateBusinessCompanyServiceOperationHour(ctx context.Context, in *UpdateBusinessCompanyServiceOperationHourRequest, opts ...grpc.CallOption) (*UpdateBusinessCompanyServiceOperationHourResponse, error) {
	out := new(UpdateBusinessCompanyServiceOperationHourResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/UpdateBusinessCompanyServiceOperationHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) DeleteBusinessCompanyServiceOperationHour(ctx context.Context, in *DeleteBusinessCompanyServiceOperationHourRequest, opts ...grpc.CallOption) (*DeleteBusinessCompanyServiceOperationHourResponse, error) {
	out := new(DeleteBusinessCompanyServiceOperationHourResponse)
	err := c.cc.Invoke(ctx, "/companyServices.CompanyServices/DeleteBusinessCompanyServiceOperationHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServicesServer is the server API for CompanyServices service.
type CompanyServicesServer interface {
	GetCompanyService(context.Context, *GetCompanyServiceRequest) (*GetCompanyServiceResponse, error)
	GetCompanyServices(context.Context, *empty.Empty) (*GetCompanyServicesResponse, error)
	GetBusinessCompanyServiceOperationHourByDay(context.Context, *GetBusinessCompanyServiceOperationHourByDayRequest) (*GetBusinessCompanyServiceOperationHourByDayResponse, error)
	GetBusinessCompanyServiceOperationHours(context.Context, *GetBusinessCompanyServiceOperationHoursRequest) (*GetBusinessCompanyServiceOperationHoursResponse, error)
	CreateCompanyService(context.Context, *CreateCompanyServiceRequest) (*CreateCompanyServiceResponse, error)
	UpdateCompanyService(context.Context, *UpdateCompanyServiceRequest) (*UpdateCompanyServiceResponse, error)
	DeleteCompanyService(context.Context, *DeleteCompanyServiceRequest) (*DeleteCompanyServiceResponse, error)
	GetCompanyServicesUnderSubCategory(context.Context, *GetCompanyServicesUnderSubCategoryRequest) (*GetCompanyServicesUnderSubCategoryResponse, error)
	GetCompanyServicesUnderCategory(context.Context, *GetCompanyServicesUnderCategoryRequest) (*GetCompanyServicesUnderCategoryResponse, error)
	CreateBusinessCompanyServiceOperationHour(context.Context, *CreateBusinessCompanyServiceOperationHourRequest) (*CreateBusinessCompanyServiceOperationHourResponse, error)
	UpdateBusinessCompanyServiceOperationHour(context.Context, *UpdateBusinessCompanyServiceOperationHourRequest) (*UpdateBusinessCompanyServiceOperationHourResponse, error)
	DeleteBusinessCompanyServiceOperationHour(context.Context, *DeleteBusinessCompanyServiceOperationHourRequest) (*DeleteBusinessCompanyServiceOperationHourResponse, error)
}

// UnimplementedCompanyServicesServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServicesServer struct {
}

func (*UnimplementedCompanyServicesServer) GetCompanyService(context.Context, *GetCompanyServiceRequest) (*GetCompanyServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyService not implemented")
}
func (*UnimplementedCompanyServicesServer) GetCompanyServices(context.Context, *empty.Empty) (*GetCompanyServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyServices not implemented")
}
func (*UnimplementedCompanyServicesServer) GetBusinessCompanyServiceOperationHourByDay(context.Context, *GetBusinessCompanyServiceOperationHourByDayRequest) (*GetBusinessCompanyServiceOperationHourByDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompanyServiceOperationHourByDay not implemented")
}
func (*UnimplementedCompanyServicesServer) GetBusinessCompanyServiceOperationHours(context.Context, *GetBusinessCompanyServiceOperationHoursRequest) (*GetBusinessCompanyServiceOperationHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompanyServiceOperationHours not implemented")
}
func (*UnimplementedCompanyServicesServer) CreateCompanyService(context.Context, *CreateCompanyServiceRequest) (*CreateCompanyServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyService not implemented")
}
func (*UnimplementedCompanyServicesServer) UpdateCompanyService(context.Context, *UpdateCompanyServiceRequest) (*UpdateCompanyServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyService not implemented")
}
func (*UnimplementedCompanyServicesServer) DeleteCompanyService(context.Context, *DeleteCompanyServiceRequest) (*DeleteCompanyServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyService not implemented")
}
func (*UnimplementedCompanyServicesServer) GetCompanyServicesUnderSubCategory(context.Context, *GetCompanyServicesUnderSubCategoryRequest) (*GetCompanyServicesUnderSubCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyServicesUnderSubCategory not implemented")
}
func (*UnimplementedCompanyServicesServer) GetCompanyServicesUnderCategory(context.Context, *GetCompanyServicesUnderCategoryRequest) (*GetCompanyServicesUnderCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyServicesUnderCategory not implemented")
}
func (*UnimplementedCompanyServicesServer) CreateBusinessCompanyServiceOperationHour(context.Context, *CreateBusinessCompanyServiceOperationHourRequest) (*CreateBusinessCompanyServiceOperationHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessCompanyServiceOperationHour not implemented")
}
func (*UnimplementedCompanyServicesServer) UpdateBusinessCompanyServiceOperationHour(context.Context, *UpdateBusinessCompanyServiceOperationHourRequest) (*UpdateBusinessCompanyServiceOperationHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessCompanyServiceOperationHour not implemented")
}
func (*UnimplementedCompanyServicesServer) DeleteBusinessCompanyServiceOperationHour(context.Context, *DeleteBusinessCompanyServiceOperationHourRequest) (*DeleteBusinessCompanyServiceOperationHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessCompanyServiceOperationHour not implemented")
}

func RegisterCompanyServicesServer(s *grpc.Server, srv CompanyServicesServer) {
	s.RegisterService(&_CompanyServices_serviceDesc, srv)
}

func _CompanyServices_GetCompanyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).GetCompanyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/GetCompanyService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).GetCompanyService(ctx, req.(*GetCompanyServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_GetCompanyServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).GetCompanyServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/GetCompanyServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).GetCompanyServices(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_GetBusinessCompanyServiceOperationHourByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessCompanyServiceOperationHourByDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).GetBusinessCompanyServiceOperationHourByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/GetBusinessCompanyServiceOperationHourByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).GetBusinessCompanyServiceOperationHourByDay(ctx, req.(*GetBusinessCompanyServiceOperationHourByDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_GetBusinessCompanyServiceOperationHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessCompanyServiceOperationHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).GetBusinessCompanyServiceOperationHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/GetBusinessCompanyServiceOperationHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).GetBusinessCompanyServiceOperationHours(ctx, req.(*GetBusinessCompanyServiceOperationHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_CreateCompanyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).CreateCompanyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/CreateCompanyService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).CreateCompanyService(ctx, req.(*CreateCompanyServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_UpdateCompanyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).UpdateCompanyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/UpdateCompanyService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).UpdateCompanyService(ctx, req.(*UpdateCompanyServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_DeleteCompanyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).DeleteCompanyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/DeleteCompanyService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).DeleteCompanyService(ctx, req.(*DeleteCompanyServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_GetCompanyServicesUnderSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyServicesUnderSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).GetCompanyServicesUnderSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/GetCompanyServicesUnderSubCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).GetCompanyServicesUnderSubCategory(ctx, req.(*GetCompanyServicesUnderSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_GetCompanyServicesUnderCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyServicesUnderCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).GetCompanyServicesUnderCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/GetCompanyServicesUnderCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).GetCompanyServicesUnderCategory(ctx, req.(*GetCompanyServicesUnderCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_CreateBusinessCompanyServiceOperationHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessCompanyServiceOperationHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).CreateBusinessCompanyServiceOperationHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/CreateBusinessCompanyServiceOperationHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).CreateBusinessCompanyServiceOperationHour(ctx, req.(*CreateBusinessCompanyServiceOperationHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_UpdateBusinessCompanyServiceOperationHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessCompanyServiceOperationHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).UpdateBusinessCompanyServiceOperationHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/UpdateBusinessCompanyServiceOperationHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).UpdateBusinessCompanyServiceOperationHour(ctx, req.(*UpdateBusinessCompanyServiceOperationHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_DeleteBusinessCompanyServiceOperationHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessCompanyServiceOperationHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).DeleteBusinessCompanyServiceOperationHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyServices.CompanyServices/DeleteBusinessCompanyServiceOperationHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).DeleteBusinessCompanyServiceOperationHour(ctx, req.(*DeleteBusinessCompanyServiceOperationHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "companyServices.CompanyServices",
	HandlerType: (*CompanyServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyService",
			Handler:    _CompanyServices_GetCompanyService_Handler,
		},
		{
			MethodName: "GetCompanyServices",
			Handler:    _CompanyServices_GetCompanyServices_Handler,
		},
		{
			MethodName: "GetBusinessCompanyServiceOperationHourByDay",
			Handler:    _CompanyServices_GetBusinessCompanyServiceOperationHourByDay_Handler,
		},
		{
			MethodName: "GetBusinessCompanyServiceOperationHours",
			Handler:    _CompanyServices_GetBusinessCompanyServiceOperationHours_Handler,
		},
		{
			MethodName: "CreateCompanyService",
			Handler:    _CompanyServices_CreateCompanyService_Handler,
		},
		{
			MethodName: "UpdateCompanyService",
			Handler:    _CompanyServices_UpdateCompanyService_Handler,
		},
		{
			MethodName: "DeleteCompanyService",
			Handler:    _CompanyServices_DeleteCompanyService_Handler,
		},
		{
			MethodName: "GetCompanyServicesUnderSubCategory",
			Handler:    _CompanyServices_GetCompanyServicesUnderSubCategory_Handler,
		},
		{
			MethodName: "GetCompanyServicesUnderCategory",
			Handler:    _CompanyServices_GetCompanyServicesUnderCategory_Handler,
		},
		{
			MethodName: "CreateBusinessCompanyServiceOperationHour",
			Handler:    _CompanyServices_CreateBusinessCompanyServiceOperationHour_Handler,
		},
		{
			MethodName: "UpdateBusinessCompanyServiceOperationHour",
			Handler:    _CompanyServices_UpdateBusinessCompanyServiceOperationHour_Handler,
		},
		{
			MethodName: "DeleteBusinessCompanyServiceOperationHour",
			Handler:    _CompanyServices_DeleteBusinessCompanyServiceOperationHour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companyServices.proto",
}
