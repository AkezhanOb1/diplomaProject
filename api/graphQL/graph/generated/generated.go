// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/AkezhanOb1/diplomaProject/api/graphQL/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	BusinessCategory struct {
		BusinessCategoryID   func(childComplexity int) int
		BusinessCategoryName func(childComplexity int) int
	}

	BusinessCompanies struct {
		BusinessCompanies func(childComplexity int) int
	}

	BusinessCompany struct {
		BusinessCompanyCategoryID func(childComplexity int) int
		BusinessCompanyID         func(childComplexity int) int
		BusinessCompanyName       func(childComplexity int) int
	}

	BusinessCompanyOperationHour struct {
		BusinessCompanyID      func(childComplexity int) int
		CloseTime              func(childComplexity int) int
		CompanyOperationHourID func(childComplexity int) int
		DayOfWeek              func(childComplexity int) int
		OpenTime               func(childComplexity int) int
	}

	BusinessCompanyOperationHours struct {
		BusinessCompanyOperationHour func(childComplexity int) int
	}

	BusinessCompanyServiceOperationHour struct {
		BusinessCompanyID      func(childComplexity int) int
		BusinessServiceID      func(childComplexity int) int
		CloseTime              func(childComplexity int) int
		DayOfWeek              func(childComplexity int) int
		OpenTime               func(childComplexity int) int
		ServiceOperationHourID func(childComplexity int) int
	}

	BusinessCompanyServiceOperationHours struct {
		BusinessCompanyServiceOperationHour func(childComplexity int) int
	}

	BusinessOwner struct {
		BusinessOwnerEmail             func(childComplexity int) int
		BusinessOwnerID                func(childComplexity int) int
		BusinessOwnerName              func(childComplexity int) int
		BusinessOwnerPhoneNumber       func(childComplexity int) int
		BusinessOwnerPhoneNumberPrefix func(childComplexity int) int
	}

	BusinessService struct {
		BusinessServiceID   func(childComplexity int) int
		BusinessServiceName func(childComplexity int) int
		SubCategories       func(childComplexity int) int
	}

	BusinessServiceOrder struct {
		BusinessCompanyName     func(childComplexity int) int
		BusinessServiceID       func(childComplexity int) int
		BusinessServiceName     func(childComplexity int) int
		BusinessServiceOrderID  func(childComplexity int) int
		ClientCommentary        func(childComplexity int) int
		ClientFirstName         func(childComplexity int) int
		ClientID                func(childComplexity int) int
		ClientPhoneNumber       func(childComplexity int) int
		ClientPhoneNumberPrefix func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		EndAt                   func(childComplexity int) int
		PrePaid                 func(childComplexity int) int
		Price                   func(childComplexity int) int
		StartAt                 func(childComplexity int) int
	}

	BusinessServices struct {
		BusinessServices func(childComplexity int) int
	}

	BusinessSubCategories struct {
		BusinessSubCategories func(childComplexity int) int
	}

	BusinessSubCategory struct {
		BusinessCategoryID      func(childComplexity int) int
		BusinessSubCategoryID   func(childComplexity int) int
		BusinessSubCategoryName func(childComplexity int) int
	}

	CompanyService struct {
		BusinessCompanyID      func(childComplexity int) int
		BusinessCompanyName    func(childComplexity int) int
		BusinessServiceID      func(childComplexity int) int
		BusinessServiceName    func(childComplexity int) int
		CompanyServiceDuration func(childComplexity int) int
		CompanyServiceID       func(childComplexity int) int
		CompanyServiceName     func(childComplexity int) int
		CompanyServicePrice    func(childComplexity int) int
	}

	CompanyServices struct {
		CompanyServices func(childComplexity int) int
	}

	CreateBusinessOwnerResponse struct {
		BusinessOwner func(childComplexity int) int
		Token         func(childComplexity int) int
	}

	CreateBusinessServiceOrderResponse struct {
		BusinessServiceOrder func(childComplexity int) int
	}

	CreateCustomerResponse struct {
		Customer func(childComplexity int) int
		Token    func(childComplexity int) int
	}

	CreateCustomerTokenResponse struct {
		Token func(childComplexity int) int
	}

	Customer struct {
		CreatedAt                 func(childComplexity int) int
		CustomerEmail             func(childComplexity int) int
		CustomerFirstName         func(childComplexity int) int
		CustomerID                func(childComplexity int) int
		CustomerPhoneNumber       func(childComplexity int) int
		CustomerPhoneNumberPrefix func(childComplexity int) int
		CustomerSecondName        func(childComplexity int) int
	}

	DeleteBusinessServiceOrderResponse struct {
		BusinessServiceOrder func(childComplexity int) int
	}

	File struct {
		Content     func(childComplexity int) int
		ContentType func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	GetBusinessServiceOrderByDateResponse struct {
		BusinessServicesOrders func(childComplexity int) int
	}

	GetBusinessServiceOrderResponse struct {
		BusinessServiceOrder func(childComplexity int) int
	}

	GetBusinessServiceOrdersByEmailResponse struct {
		BusinessServicesOrders func(childComplexity int) int
		Pagination             func(childComplexity int) int
	}

	GetBusinessServiceOrdersResponse struct {
		BusinessServicesOrders func(childComplexity int) int
	}

	GetCompanyAvailableHoursByDateResponse struct {
		AvailableHour func(childComplexity int) int
	}

	GetCustomerByEmailResponse struct {
		Customer func(childComplexity int) int
	}

	GetCustomerTokenInfoResponse struct {
		Email     func(childComplexity int) int
		ExpiresAt func(childComplexity int) int
		IssuedAt  func(childComplexity int) int
	}

	Mutation struct {
		BusinessCompanyImageUpload                 func(childComplexity int, input model.BusinessCompanyImageUploadRequest) int
		BusinessCompanyImagesUpload                func(childComplexity int, input model.BusinessCompanyImagesUploadRequest) int
		CreateBusinessCompany                      func(childComplexity int, input model.CreateBusinessCompanyRequest) int
		CreateBusinessCompanyOperationHours        func(childComplexity int, input model.CreateBusinessCompanyOperationHoursRequest) int
		CreateBusinessCompanyServiceOperationHours func(childComplexity int, input model.CreateBusinessCompanyServiceOperationHoursRequest) int
		CreateBusinessOwner                        func(childComplexity int, input model.CreateBusinessOwnerRequest) int
		CreateBusinessService                      func(childComplexity int, input model.CreateBusinessServiceRequest) int
		CreateBusinessServiceOrder                 func(childComplexity int, input model.CreateBusinessServiceOrderRequest) int
		CreateCompanyService                       func(childComplexity int, input model.CreateCompanyServiceRequest) int
		CreateCustomer                             func(childComplexity int, input model.CreateCustomerRequest) int
		CreateCustomerToken                        func(childComplexity int, input model.CreateCustomerTokenRequest) int
		DeleteBusinessCompanyOperationHours        func(childComplexity int, input model.DeleteBusinessCompanyOperationHoursRequest) int
		DeleteBusinessCompanyServiceOperationHours func(childComplexity int, input model.DeleteBusinessCompanyServiceOperationHoursRequest) int
		DeleteBusinessServiceOrder                 func(childComplexity int, input model.DeleteBusinessServiceOrderRequest) int
		DeleteCompanyService                       func(childComplexity int, input model.DeleteCompanyServiceRequest) int
		GenerateToken                              func(childComplexity int, input model.GenerateTokenRequest) int
		SingleUpload                               func(childComplexity int, file graphql.Upload) int
		UpdateBusinessCompanyOperationHours        func(childComplexity int, input model.UpdateBusinessCompanyOperationHoursRequest) int
		UpdateBusinessCompanyServiceOperationHours func(childComplexity int, input model.UpdateBusinessCompanyServiceOperationHoursRequest) int
		UpdateBusinessServiceOrder                 func(childComplexity int, input model.UpdateBusinessServiceOrderRequest) int
		UpdateCompanyService                       func(childComplexity int, input model.UpdateCompanyServiceRequest) int
	}

	Pagination struct {
		Count  func(childComplexity int) int
		Limit  func(childComplexity int) int
		Offset func(childComplexity int) int
	}

	Query struct {
		GetBusinessCategories                       func(childComplexity int) int
		GetBusinessCategory                         func(childComplexity int, input model.BusinessCategoryRequest) int
		GetBusinessCompanies                        func(childComplexity int) int
		GetBusinessCompaniesUnderCategory           func(childComplexity int, input model.GetBusinessCompaniesUnderCategoryRequest) int
		GetBusinessCompany                          func(childComplexity int, input model.GetBusinessCompanyRequest) int
		GetBusinessCompanyOperationHourByDay        func(childComplexity int, input *model.GetGetBusinessCompanyOperationHourByDayRequest) int
		GetBusinessCompanyOperationHours            func(childComplexity int, input *model.GetBusinessCompanyOperationHoursRequest) int
		GetBusinessCompanyServiceOperationHourByDay func(childComplexity int, input *model.GetGetBusinessCompanyServiceOperationHourByDayRequest) int
		GetBusinessCompanyServiceOperationHours     func(childComplexity int, input *model.GetBusinessCompanyServiceOperationHoursRequest) int
		GetBusinessCompanyServices                  func(childComplexity int, input *model.GetBusinessCompanyServicesRequest) int
		GetBusinessOwnerCompanies                   func(childComplexity int, input *model.GetBusinessOwnerCompaniesRequest) int
		GetBusinessService                          func(childComplexity int, input model.GetBusinessServiceRequest) int
		GetBusinessServiceOrder                     func(childComplexity int, input model.GetBusinessServiceOrderRequest) int
		GetBusinessServiceOrderByDate               func(childComplexity int, input model.GetBusinessServiceOrderByDateRequest) int
		GetBusinessServiceOrders                    func(childComplexity int, input model.GetBusinessServiceOrdersRequest) int
		GetBusinessServiceOrdersByEmail             func(childComplexity int, input model.GetBusinessServiceOrdersByEmailRequest) int
		GetBusinessServices                         func(childComplexity int) int
		GetBusinessServicesUnderSubCategory         func(childComplexity int, input *model.GetBusinessServicesUnderSubCategoryRequest) int
		GetBusinessSubCategories                    func(childComplexity int) int
		GetBusinessSubCategoriesUnderCategory       func(childComplexity int, input *model.BusinessSubCategoriesUnderCategoryRequest) int
		GetBusinessSubCategory                      func(childComplexity int, input model.BusinessSubCategoryRequest) int
		GetCompanyAvailableHoursByDate              func(childComplexity int, input model.GetCompanyAvailableHoursByDateRequest) int
		GetCompanyService                           func(childComplexity int, input model.GetCompanyServiceRequest) int
		GetCompanyServices                          func(childComplexity int) int
		GetCompanyServicesUnderCategory             func(childComplexity int, input *model.GetCompanyServicesUnderCategoryRequest) int
		GetCompanyServicesUnderSubCategory          func(childComplexity int, input model.GetCompanyServicesUnderSubCategoryRequest) int
		GetCustomerByEmail                          func(childComplexity int, input model.GetCustomerByEmailRequest) int
		GetCustomerTokenInfo                        func(childComplexity int, input model.GetCustomerTokenInfoRequest) int
		RetrieveTokenInfo                           func(childComplexity int, input model.RetrieveTokenInfoRequst) int
	}

	Token struct {
		AccessToken  func(childComplexity int) int
		ExpiresIn    func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		TokenType    func(childComplexity int) int
	}

	UpdateBusinessServiceOrderResponse struct {
		BusinessServiceOrder func(childComplexity int) int
	}

	BusinessCompanyOperationHourResponse struct {
		BusinessCompanyOperationHour func(childComplexity int) int
	}

	BusinessCompanyService struct {
		CompanyServiceDuration func(childComplexity int) int
		CompanyServiceID       func(childComplexity int) int
		CompanyServiceName     func(childComplexity int) int
		CompanyServicePrice    func(childComplexity int) int
	}

	BusinessCompanyServiceOperationHourResponse struct {
		BusinessCompanyServiceOperationHour func(childComplexity int) int
	}

	CreateBusinessCompanyOperationHoursResponse struct {
		BusinessCompanyOperationHour func(childComplexity int) int
	}

	CreateBusinessCompanyServiceOperationHoursResponse struct {
		BusinessCompanyServiceOperationHour func(childComplexity int) int
	}

	CreateBusinessServiceResponse struct {
		BusinessService func(childComplexity int) int
	}

	CreateCompanyServiceResponse struct {
		CompanyService func(childComplexity int) int
	}

	DeleteBusinessCompanyOperationHoursResponse struct {
		BusinessCompanyOperationHour func(childComplexity int) int
	}

	DeleteBusinessCompanyServiceOperationHoursResponse struct {
		BusinessCompanyServiceOperationHour func(childComplexity int) int
	}

	DeleteCompanyServiceResponse struct {
		CompanyService func(childComplexity int) int
	}

	GenerateTokenResponse struct {
		AccessToken  func(childComplexity int) int
		ExpiresIn    func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		TokenType    func(childComplexity int) int
	}

	GetBusinessCompanyServicesResponse struct {
		BusinessCompanyService func(childComplexity int) int
	}

	GetBusinessOwnerCompaniesResponse struct {
		Companies func(childComplexity int) int
	}

	RetrieveTokenInfoResponse struct {
		Email     func(childComplexity int) int
		ExpiresAt func(childComplexity int) int
		IssuedAt  func(childComplexity int) int
	}

	UpdateBusinessCompanyOperationHoursResponse struct {
		BusinessCompanyOperationHour func(childComplexity int) int
	}

	UpdateBusinessCompanyServiceOperationHoursResponse struct {
		BusinessCompanyServiceOperationHour func(childComplexity int) int
	}

	UpdateCompanyServiceResponse struct {
		CompanyService func(childComplexity int) int
	}
}

type MutationResolver interface {
	SingleUpload(ctx context.Context, file graphql.Upload) (bool, error)
	BusinessCompanyImageUpload(ctx context.Context, input model.BusinessCompanyImageUploadRequest) (*model.File, error)
	BusinessCompanyImagesUpload(ctx context.Context, input model.BusinessCompanyImagesUploadRequest) ([]model.File, error)
	UpdateBusinessServiceOrder(ctx context.Context, input model.UpdateBusinessServiceOrderRequest) (*model.UpdateBusinessServiceOrderResponse, error)
	DeleteBusinessServiceOrder(ctx context.Context, input model.DeleteBusinessServiceOrderRequest) (*model.DeleteBusinessServiceOrderResponse, error)
	CreateCustomer(ctx context.Context, input model.CreateCustomerRequest) (*model.CreateCustomerResponse, error)
	CreateCustomerToken(ctx context.Context, input model.CreateCustomerTokenRequest) (*model.CreateCustomerTokenResponse, error)
	CreateBusinessServiceOrder(ctx context.Context, input model.CreateBusinessServiceOrderRequest) (*model.CreateBusinessServiceOrderResponse, error)
	CreateBusinessCompany(ctx context.Context, input model.CreateBusinessCompanyRequest) (*model.BusinessCompany, error)
	CreateBusinessOwner(ctx context.Context, input model.CreateBusinessOwnerRequest) (*model.CreateBusinessOwnerResponse, error)
	CreateBusinessService(ctx context.Context, input model.CreateBusinessServiceRequest) (*model.CreateBusinessServiceResponse, error)
	CreateCompanyService(ctx context.Context, input model.CreateCompanyServiceRequest) (*model.CreateCompanyServiceResponse, error)
	UpdateCompanyService(ctx context.Context, input model.UpdateCompanyServiceRequest) (*model.UpdateCompanyServiceResponse, error)
	DeleteCompanyService(ctx context.Context, input model.DeleteCompanyServiceRequest) (*model.DeleteCompanyServiceResponse, error)
	CreateBusinessCompanyOperationHours(ctx context.Context, input model.CreateBusinessCompanyOperationHoursRequest) (*model.CreateBusinessCompanyOperationHoursResponse, error)
	UpdateBusinessCompanyOperationHours(ctx context.Context, input model.UpdateBusinessCompanyOperationHoursRequest) (*model.UpdateBusinessCompanyOperationHoursResponse, error)
	DeleteBusinessCompanyOperationHours(ctx context.Context, input model.DeleteBusinessCompanyOperationHoursRequest) (*model.DeleteBusinessCompanyOperationHoursResponse, error)
	CreateBusinessCompanyServiceOperationHours(ctx context.Context, input model.CreateBusinessCompanyServiceOperationHoursRequest) (*model.CreateBusinessCompanyServiceOperationHoursResponse, error)
	UpdateBusinessCompanyServiceOperationHours(ctx context.Context, input model.UpdateBusinessCompanyServiceOperationHoursRequest) (*model.UpdateBusinessCompanyServiceOperationHoursResponse, error)
	DeleteBusinessCompanyServiceOperationHours(ctx context.Context, input model.DeleteBusinessCompanyServiceOperationHoursRequest) (*model.DeleteBusinessCompanyServiceOperationHoursResponse, error)
	GenerateToken(ctx context.Context, input model.GenerateTokenRequest) (*model.Token, error)
}
type QueryResolver interface {
	GetBusinessServiceOrder(ctx context.Context, input model.GetBusinessServiceOrderRequest) (*model.GetBusinessServiceOrderResponse, error)
	GetBusinessServiceOrders(ctx context.Context, input model.GetBusinessServiceOrdersRequest) (*model.GetBusinessServiceOrdersResponse, error)
	GetCompanyAvailableHoursByDate(ctx context.Context, input model.GetCompanyAvailableHoursByDateRequest) (*model.GetCompanyAvailableHoursByDateResponse, error)
	GetBusinessServiceOrderByDate(ctx context.Context, input model.GetBusinessServiceOrderByDateRequest) (*model.GetBusinessServiceOrderByDateResponse, error)
	GetBusinessServiceOrdersByEmail(ctx context.Context, input model.GetBusinessServiceOrdersByEmailRequest) (*model.GetBusinessServiceOrdersByEmailResponse, error)
	GetBusinessCompany(ctx context.Context, input model.GetBusinessCompanyRequest) (*model.BusinessCompany, error)
	GetBusinessCompanies(ctx context.Context) (*model.BusinessCompanies, error)
	GetBusinessCompaniesUnderCategory(ctx context.Context, input model.GetBusinessCompaniesUnderCategoryRequest) (*model.BusinessCompanies, error)
	GetBusinessCompanyServices(ctx context.Context, input *model.GetBusinessCompanyServicesRequest) (*model.GetBusinessCompanyServicesResponse, error)
	GetBusinessOwnerCompanies(ctx context.Context, input *model.GetBusinessOwnerCompaniesRequest) (*model.GetBusinessOwnerCompaniesResponse, error)
	GetBusinessCompanyOperationHourByDay(ctx context.Context, input *model.GetGetBusinessCompanyOperationHourByDayRequest) (*model.BusinessCompanyOperationHourResponse, error)
	GetBusinessCompanyOperationHours(ctx context.Context, input *model.GetBusinessCompanyOperationHoursRequest) (*model.BusinessCompanyOperationHours, error)
	GetBusinessCompanyServiceOperationHourByDay(ctx context.Context, input *model.GetGetBusinessCompanyServiceOperationHourByDayRequest) (*model.BusinessCompanyServiceOperationHourResponse, error)
	GetBusinessCompanyServiceOperationHours(ctx context.Context, input *model.GetBusinessCompanyServiceOperationHoursRequest) (*model.BusinessCompanyServiceOperationHours, error)
	GetBusinessCategory(ctx context.Context, input model.BusinessCategoryRequest) (*model.BusinessCategory, error)
	GetBusinessCategories(ctx context.Context) ([]model.BusinessCategory, error)
	GetBusinessSubCategory(ctx context.Context, input model.BusinessSubCategoryRequest) (*model.BusinessSubCategory, error)
	GetBusinessSubCategories(ctx context.Context) (*model.BusinessSubCategories, error)
	GetBusinessSubCategoriesUnderCategory(ctx context.Context, input *model.BusinessSubCategoriesUnderCategoryRequest) (*model.BusinessSubCategories, error)
	GetBusinessService(ctx context.Context, input model.GetBusinessServiceRequest) (*model.BusinessService, error)
	GetBusinessServices(ctx context.Context) (*model.BusinessServices, error)
	GetBusinessServicesUnderSubCategory(ctx context.Context, input *model.GetBusinessServicesUnderSubCategoryRequest) (*model.BusinessServices, error)
	GetCompanyService(ctx context.Context, input model.GetCompanyServiceRequest) (*model.CompanyService, error)
	GetCompanyServices(ctx context.Context) (*model.CompanyServices, error)
	GetCompanyServicesUnderSubCategory(ctx context.Context, input model.GetCompanyServicesUnderSubCategoryRequest) (*model.CompanyServices, error)
	GetCompanyServicesUnderCategory(ctx context.Context, input *model.GetCompanyServicesUnderCategoryRequest) (*model.CompanyServices, error)
	RetrieveTokenInfo(ctx context.Context, input model.RetrieveTokenInfoRequst) (*model.RetrieveTokenInfoResponse, error)
	GetCustomerByEmail(ctx context.Context, input model.GetCustomerByEmailRequest) (*model.GetCustomerByEmailResponse, error)
	GetCustomerTokenInfo(ctx context.Context, input model.GetCustomerTokenInfoRequest) (*model.GetCustomerTokenInfoResponse, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "BusinessCategory.businessCategoryID":
		if e.complexity.BusinessCategory.BusinessCategoryID == nil {
			break
		}

		return e.complexity.BusinessCategory.BusinessCategoryID(childComplexity), true

	case "BusinessCategory.businessCategoryName":
		if e.complexity.BusinessCategory.BusinessCategoryName == nil {
			break
		}

		return e.complexity.BusinessCategory.BusinessCategoryName(childComplexity), true

	case "BusinessCompanies.businessCompanies":
		if e.complexity.BusinessCompanies.BusinessCompanies == nil {
			break
		}

		return e.complexity.BusinessCompanies.BusinessCompanies(childComplexity), true

	case "BusinessCompany.businessCompanyCategoryID":
		if e.complexity.BusinessCompany.BusinessCompanyCategoryID == nil {
			break
		}

		return e.complexity.BusinessCompany.BusinessCompanyCategoryID(childComplexity), true

	case "BusinessCompany.businessCompanyID":
		if e.complexity.BusinessCompany.BusinessCompanyID == nil {
			break
		}

		return e.complexity.BusinessCompany.BusinessCompanyID(childComplexity), true

	case "BusinessCompany.businessCompanyName":
		if e.complexity.BusinessCompany.BusinessCompanyName == nil {
			break
		}

		return e.complexity.BusinessCompany.BusinessCompanyName(childComplexity), true

	case "BusinessCompanyOperationHour.businessCompanyID":
		if e.complexity.BusinessCompanyOperationHour.BusinessCompanyID == nil {
			break
		}

		return e.complexity.BusinessCompanyOperationHour.BusinessCompanyID(childComplexity), true

	case "BusinessCompanyOperationHour.closeTime":
		if e.complexity.BusinessCompanyOperationHour.CloseTime == nil {
			break
		}

		return e.complexity.BusinessCompanyOperationHour.CloseTime(childComplexity), true

	case "BusinessCompanyOperationHour.companyOperationHourID":
		if e.complexity.BusinessCompanyOperationHour.CompanyOperationHourID == nil {
			break
		}

		return e.complexity.BusinessCompanyOperationHour.CompanyOperationHourID(childComplexity), true

	case "BusinessCompanyOperationHour.dayOfWeek":
		if e.complexity.BusinessCompanyOperationHour.DayOfWeek == nil {
			break
		}

		return e.complexity.BusinessCompanyOperationHour.DayOfWeek(childComplexity), true

	case "BusinessCompanyOperationHour.openTime":
		if e.complexity.BusinessCompanyOperationHour.OpenTime == nil {
			break
		}

		return e.complexity.BusinessCompanyOperationHour.OpenTime(childComplexity), true

	case "BusinessCompanyOperationHours.businessCompanyOperationHour":
		if e.complexity.BusinessCompanyOperationHours.BusinessCompanyOperationHour == nil {
			break
		}

		return e.complexity.BusinessCompanyOperationHours.BusinessCompanyOperationHour(childComplexity), true

	case "BusinessCompanyServiceOperationHour.businessCompanyID":
		if e.complexity.BusinessCompanyServiceOperationHour.BusinessCompanyID == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHour.BusinessCompanyID(childComplexity), true

	case "BusinessCompanyServiceOperationHour.businessServiceID":
		if e.complexity.BusinessCompanyServiceOperationHour.BusinessServiceID == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHour.BusinessServiceID(childComplexity), true

	case "BusinessCompanyServiceOperationHour.closeTime":
		if e.complexity.BusinessCompanyServiceOperationHour.CloseTime == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHour.CloseTime(childComplexity), true

	case "BusinessCompanyServiceOperationHour.dayOfWeek":
		if e.complexity.BusinessCompanyServiceOperationHour.DayOfWeek == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHour.DayOfWeek(childComplexity), true

	case "BusinessCompanyServiceOperationHour.openTime":
		if e.complexity.BusinessCompanyServiceOperationHour.OpenTime == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHour.OpenTime(childComplexity), true

	case "BusinessCompanyServiceOperationHour.serviceOperationHourID":
		if e.complexity.BusinessCompanyServiceOperationHour.ServiceOperationHourID == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHour.ServiceOperationHourID(childComplexity), true

	case "BusinessCompanyServiceOperationHours.businessCompanyServiceOperationHour":
		if e.complexity.BusinessCompanyServiceOperationHours.BusinessCompanyServiceOperationHour == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHours.BusinessCompanyServiceOperationHour(childComplexity), true

	case "BusinessOwner.businessOwnerEmail":
		if e.complexity.BusinessOwner.BusinessOwnerEmail == nil {
			break
		}

		return e.complexity.BusinessOwner.BusinessOwnerEmail(childComplexity), true

	case "BusinessOwner.businessOwnerID":
		if e.complexity.BusinessOwner.BusinessOwnerID == nil {
			break
		}

		return e.complexity.BusinessOwner.BusinessOwnerID(childComplexity), true

	case "BusinessOwner.businessOwnerName":
		if e.complexity.BusinessOwner.BusinessOwnerName == nil {
			break
		}

		return e.complexity.BusinessOwner.BusinessOwnerName(childComplexity), true

	case "BusinessOwner.businessOwnerPhoneNumber":
		if e.complexity.BusinessOwner.BusinessOwnerPhoneNumber == nil {
			break
		}

		return e.complexity.BusinessOwner.BusinessOwnerPhoneNumber(childComplexity), true

	case "BusinessOwner.businessOwnerPhoneNumberPrefix":
		if e.complexity.BusinessOwner.BusinessOwnerPhoneNumberPrefix == nil {
			break
		}

		return e.complexity.BusinessOwner.BusinessOwnerPhoneNumberPrefix(childComplexity), true

	case "BusinessService.businessServiceID":
		if e.complexity.BusinessService.BusinessServiceID == nil {
			break
		}

		return e.complexity.BusinessService.BusinessServiceID(childComplexity), true

	case "BusinessService.businessServiceName":
		if e.complexity.BusinessService.BusinessServiceName == nil {
			break
		}

		return e.complexity.BusinessService.BusinessServiceName(childComplexity), true

	case "BusinessService.subCategories":
		if e.complexity.BusinessService.SubCategories == nil {
			break
		}

		return e.complexity.BusinessService.SubCategories(childComplexity), true

	case "BusinessServiceOrder.businessCompanyName":
		if e.complexity.BusinessServiceOrder.BusinessCompanyName == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.BusinessCompanyName(childComplexity), true

	case "BusinessServiceOrder.businessServiceID":
		if e.complexity.BusinessServiceOrder.BusinessServiceID == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.BusinessServiceID(childComplexity), true

	case "BusinessServiceOrder.businessServiceName":
		if e.complexity.BusinessServiceOrder.BusinessServiceName == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.BusinessServiceName(childComplexity), true

	case "BusinessServiceOrder.businessServiceOrderID":
		if e.complexity.BusinessServiceOrder.BusinessServiceOrderID == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.BusinessServiceOrderID(childComplexity), true

	case "BusinessServiceOrder.clientCommentary":
		if e.complexity.BusinessServiceOrder.ClientCommentary == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.ClientCommentary(childComplexity), true

	case "BusinessServiceOrder.clientFirstName":
		if e.complexity.BusinessServiceOrder.ClientFirstName == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.ClientFirstName(childComplexity), true

	case "BusinessServiceOrder.clientID":
		if e.complexity.BusinessServiceOrder.ClientID == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.ClientID(childComplexity), true

	case "BusinessServiceOrder.clientPhoneNumber":
		if e.complexity.BusinessServiceOrder.ClientPhoneNumber == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.ClientPhoneNumber(childComplexity), true

	case "BusinessServiceOrder.clientPhoneNumberPrefix":
		if e.complexity.BusinessServiceOrder.ClientPhoneNumberPrefix == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.ClientPhoneNumberPrefix(childComplexity), true

	case "BusinessServiceOrder.createdAt":
		if e.complexity.BusinessServiceOrder.CreatedAt == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.CreatedAt(childComplexity), true

	case "BusinessServiceOrder.endAt":
		if e.complexity.BusinessServiceOrder.EndAt == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.EndAt(childComplexity), true

	case "BusinessServiceOrder.prePaid":
		if e.complexity.BusinessServiceOrder.PrePaid == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.PrePaid(childComplexity), true

	case "BusinessServiceOrder.price":
		if e.complexity.BusinessServiceOrder.Price == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.Price(childComplexity), true

	case "BusinessServiceOrder.startAt":
		if e.complexity.BusinessServiceOrder.StartAt == nil {
			break
		}

		return e.complexity.BusinessServiceOrder.StartAt(childComplexity), true

	case "BusinessServices.businessServices":
		if e.complexity.BusinessServices.BusinessServices == nil {
			break
		}

		return e.complexity.BusinessServices.BusinessServices(childComplexity), true

	case "BusinessSubCategories.businessSubCategories":
		if e.complexity.BusinessSubCategories.BusinessSubCategories == nil {
			break
		}

		return e.complexity.BusinessSubCategories.BusinessSubCategories(childComplexity), true

	case "BusinessSubCategory.businessCategoryID":
		if e.complexity.BusinessSubCategory.BusinessCategoryID == nil {
			break
		}

		return e.complexity.BusinessSubCategory.BusinessCategoryID(childComplexity), true

	case "BusinessSubCategory.businessSubCategoryID":
		if e.complexity.BusinessSubCategory.BusinessSubCategoryID == nil {
			break
		}

		return e.complexity.BusinessSubCategory.BusinessSubCategoryID(childComplexity), true

	case "BusinessSubCategory.businessSubCategoryName":
		if e.complexity.BusinessSubCategory.BusinessSubCategoryName == nil {
			break
		}

		return e.complexity.BusinessSubCategory.BusinessSubCategoryName(childComplexity), true

	case "CompanyService.businessCompanyID":
		if e.complexity.CompanyService.BusinessCompanyID == nil {
			break
		}

		return e.complexity.CompanyService.BusinessCompanyID(childComplexity), true

	case "CompanyService.businessCompanyName":
		if e.complexity.CompanyService.BusinessCompanyName == nil {
			break
		}

		return e.complexity.CompanyService.BusinessCompanyName(childComplexity), true

	case "CompanyService.businessServiceID":
		if e.complexity.CompanyService.BusinessServiceID == nil {
			break
		}

		return e.complexity.CompanyService.BusinessServiceID(childComplexity), true

	case "CompanyService.businessServiceName":
		if e.complexity.CompanyService.BusinessServiceName == nil {
			break
		}

		return e.complexity.CompanyService.BusinessServiceName(childComplexity), true

	case "CompanyService.companyServiceDuration":
		if e.complexity.CompanyService.CompanyServiceDuration == nil {
			break
		}

		return e.complexity.CompanyService.CompanyServiceDuration(childComplexity), true

	case "CompanyService.companyServiceID":
		if e.complexity.CompanyService.CompanyServiceID == nil {
			break
		}

		return e.complexity.CompanyService.CompanyServiceID(childComplexity), true

	case "CompanyService.companyServiceName":
		if e.complexity.CompanyService.CompanyServiceName == nil {
			break
		}

		return e.complexity.CompanyService.CompanyServiceName(childComplexity), true

	case "CompanyService.companyServicePrice":
		if e.complexity.CompanyService.CompanyServicePrice == nil {
			break
		}

		return e.complexity.CompanyService.CompanyServicePrice(childComplexity), true

	case "CompanyServices.companyServices":
		if e.complexity.CompanyServices.CompanyServices == nil {
			break
		}

		return e.complexity.CompanyServices.CompanyServices(childComplexity), true

	case "CreateBusinessOwnerResponse.businessOwner":
		if e.complexity.CreateBusinessOwnerResponse.BusinessOwner == nil {
			break
		}

		return e.complexity.CreateBusinessOwnerResponse.BusinessOwner(childComplexity), true

	case "CreateBusinessOwnerResponse.token":
		if e.complexity.CreateBusinessOwnerResponse.Token == nil {
			break
		}

		return e.complexity.CreateBusinessOwnerResponse.Token(childComplexity), true

	case "CreateBusinessServiceOrderResponse.businessServiceOrder":
		if e.complexity.CreateBusinessServiceOrderResponse.BusinessServiceOrder == nil {
			break
		}

		return e.complexity.CreateBusinessServiceOrderResponse.BusinessServiceOrder(childComplexity), true

	case "CreateCustomerResponse.customer":
		if e.complexity.CreateCustomerResponse.Customer == nil {
			break
		}

		return e.complexity.CreateCustomerResponse.Customer(childComplexity), true

	case "CreateCustomerResponse.token":
		if e.complexity.CreateCustomerResponse.Token == nil {
			break
		}

		return e.complexity.CreateCustomerResponse.Token(childComplexity), true

	case "CreateCustomerTokenResponse.token":
		if e.complexity.CreateCustomerTokenResponse.Token == nil {
			break
		}

		return e.complexity.CreateCustomerTokenResponse.Token(childComplexity), true

	case "Customer.createdAt":
		if e.complexity.Customer.CreatedAt == nil {
			break
		}

		return e.complexity.Customer.CreatedAt(childComplexity), true

	case "Customer.customerEmail":
		if e.complexity.Customer.CustomerEmail == nil {
			break
		}

		return e.complexity.Customer.CustomerEmail(childComplexity), true

	case "Customer.customerFirstName":
		if e.complexity.Customer.CustomerFirstName == nil {
			break
		}

		return e.complexity.Customer.CustomerFirstName(childComplexity), true

	case "Customer.customerID":
		if e.complexity.Customer.CustomerID == nil {
			break
		}

		return e.complexity.Customer.CustomerID(childComplexity), true

	case "Customer.customerPhoneNumber":
		if e.complexity.Customer.CustomerPhoneNumber == nil {
			break
		}

		return e.complexity.Customer.CustomerPhoneNumber(childComplexity), true

	case "Customer.customerPhoneNumberPrefix":
		if e.complexity.Customer.CustomerPhoneNumberPrefix == nil {
			break
		}

		return e.complexity.Customer.CustomerPhoneNumberPrefix(childComplexity), true

	case "Customer.customerSecondName":
		if e.complexity.Customer.CustomerSecondName == nil {
			break
		}

		return e.complexity.Customer.CustomerSecondName(childComplexity), true

	case "DeleteBusinessServiceOrderResponse.businessServiceOrder":
		if e.complexity.DeleteBusinessServiceOrderResponse.BusinessServiceOrder == nil {
			break
		}

		return e.complexity.DeleteBusinessServiceOrderResponse.BusinessServiceOrder(childComplexity), true

	case "File.content":
		if e.complexity.File.Content == nil {
			break
		}

		return e.complexity.File.Content(childComplexity), true

	case "File.contentType":
		if e.complexity.File.ContentType == nil {
			break
		}

		return e.complexity.File.ContentType(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.name":
		if e.complexity.File.Name == nil {
			break
		}

		return e.complexity.File.Name(childComplexity), true

	case "GetBusinessServiceOrderByDateResponse.businessServicesOrders":
		if e.complexity.GetBusinessServiceOrderByDateResponse.BusinessServicesOrders == nil {
			break
		}

		return e.complexity.GetBusinessServiceOrderByDateResponse.BusinessServicesOrders(childComplexity), true

	case "GetBusinessServiceOrderResponse.businessServiceOrder":
		if e.complexity.GetBusinessServiceOrderResponse.BusinessServiceOrder == nil {
			break
		}

		return e.complexity.GetBusinessServiceOrderResponse.BusinessServiceOrder(childComplexity), true

	case "GetBusinessServiceOrdersByEmailResponse.businessServicesOrders":
		if e.complexity.GetBusinessServiceOrdersByEmailResponse.BusinessServicesOrders == nil {
			break
		}

		return e.complexity.GetBusinessServiceOrdersByEmailResponse.BusinessServicesOrders(childComplexity), true

	case "GetBusinessServiceOrdersByEmailResponse.pagination":
		if e.complexity.GetBusinessServiceOrdersByEmailResponse.Pagination == nil {
			break
		}

		return e.complexity.GetBusinessServiceOrdersByEmailResponse.Pagination(childComplexity), true

	case "GetBusinessServiceOrdersResponse.businessServicesOrders":
		if e.complexity.GetBusinessServiceOrdersResponse.BusinessServicesOrders == nil {
			break
		}

		return e.complexity.GetBusinessServiceOrdersResponse.BusinessServicesOrders(childComplexity), true

	case "GetCompanyAvailableHoursByDateResponse.availableHour":
		if e.complexity.GetCompanyAvailableHoursByDateResponse.AvailableHour == nil {
			break
		}

		return e.complexity.GetCompanyAvailableHoursByDateResponse.AvailableHour(childComplexity), true

	case "GetCustomerByEmailResponse.customer":
		if e.complexity.GetCustomerByEmailResponse.Customer == nil {
			break
		}

		return e.complexity.GetCustomerByEmailResponse.Customer(childComplexity), true

	case "GetCustomerTokenInfoResponse.email":
		if e.complexity.GetCustomerTokenInfoResponse.Email == nil {
			break
		}

		return e.complexity.GetCustomerTokenInfoResponse.Email(childComplexity), true

	case "GetCustomerTokenInfoResponse.expiresAt":
		if e.complexity.GetCustomerTokenInfoResponse.ExpiresAt == nil {
			break
		}

		return e.complexity.GetCustomerTokenInfoResponse.ExpiresAt(childComplexity), true

	case "GetCustomerTokenInfoResponse.issuedAt":
		if e.complexity.GetCustomerTokenInfoResponse.IssuedAt == nil {
			break
		}

		return e.complexity.GetCustomerTokenInfoResponse.IssuedAt(childComplexity), true

	case "Mutation.BusinessCompanyImageUpload":
		if e.complexity.Mutation.BusinessCompanyImageUpload == nil {
			break
		}

		args, err := ec.field_Mutation_BusinessCompanyImageUpload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BusinessCompanyImageUpload(childComplexity, args["input"].(model.BusinessCompanyImageUploadRequest)), true

	case "Mutation.BusinessCompanyImagesUpload":
		if e.complexity.Mutation.BusinessCompanyImagesUpload == nil {
			break
		}

		args, err := ec.field_Mutation_BusinessCompanyImagesUpload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BusinessCompanyImagesUpload(childComplexity, args["input"].(model.BusinessCompanyImagesUploadRequest)), true

	case "Mutation.createBusinessCompany":
		if e.complexity.Mutation.CreateBusinessCompany == nil {
			break
		}

		args, err := ec.field_Mutation_createBusinessCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessCompany(childComplexity, args["input"].(model.CreateBusinessCompanyRequest)), true

	case "Mutation.createBusinessCompanyOperationHours":
		if e.complexity.Mutation.CreateBusinessCompanyOperationHours == nil {
			break
		}

		args, err := ec.field_Mutation_createBusinessCompanyOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessCompanyOperationHours(childComplexity, args["input"].(model.CreateBusinessCompanyOperationHoursRequest)), true

	case "Mutation.createBusinessCompanyServiceOperationHours":
		if e.complexity.Mutation.CreateBusinessCompanyServiceOperationHours == nil {
			break
		}

		args, err := ec.field_Mutation_createBusinessCompanyServiceOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessCompanyServiceOperationHours(childComplexity, args["input"].(model.CreateBusinessCompanyServiceOperationHoursRequest)), true

	case "Mutation.createBusinessOwner":
		if e.complexity.Mutation.CreateBusinessOwner == nil {
			break
		}

		args, err := ec.field_Mutation_createBusinessOwner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessOwner(childComplexity, args["input"].(model.CreateBusinessOwnerRequest)), true

	case "Mutation.createBusinessService":
		if e.complexity.Mutation.CreateBusinessService == nil {
			break
		}

		args, err := ec.field_Mutation_createBusinessService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessService(childComplexity, args["input"].(model.CreateBusinessServiceRequest)), true

	case "Mutation.createBusinessServiceOrder":
		if e.complexity.Mutation.CreateBusinessServiceOrder == nil {
			break
		}

		args, err := ec.field_Mutation_createBusinessServiceOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessServiceOrder(childComplexity, args["input"].(model.CreateBusinessServiceOrderRequest)), true

	case "Mutation.createCompanyService":
		if e.complexity.Mutation.CreateCompanyService == nil {
			break
		}

		args, err := ec.field_Mutation_createCompanyService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompanyService(childComplexity, args["input"].(model.CreateCompanyServiceRequest)), true

	case "Mutation.createCustomer":
		if e.complexity.Mutation.CreateCustomer == nil {
			break
		}

		args, err := ec.field_Mutation_createCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCustomer(childComplexity, args["input"].(model.CreateCustomerRequest)), true

	case "Mutation.createCustomerToken":
		if e.complexity.Mutation.CreateCustomerToken == nil {
			break
		}

		args, err := ec.field_Mutation_createCustomerToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCustomerToken(childComplexity, args["input"].(model.CreateCustomerTokenRequest)), true

	case "Mutation.deleteBusinessCompanyOperationHours":
		if e.complexity.Mutation.DeleteBusinessCompanyOperationHours == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBusinessCompanyOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBusinessCompanyOperationHours(childComplexity, args["input"].(model.DeleteBusinessCompanyOperationHoursRequest)), true

	case "Mutation.deleteBusinessCompanyServiceOperationHours":
		if e.complexity.Mutation.DeleteBusinessCompanyServiceOperationHours == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBusinessCompanyServiceOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBusinessCompanyServiceOperationHours(childComplexity, args["input"].(model.DeleteBusinessCompanyServiceOperationHoursRequest)), true

	case "Mutation.DeleteBusinessServiceOrder":
		if e.complexity.Mutation.DeleteBusinessServiceOrder == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteBusinessServiceOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBusinessServiceOrder(childComplexity, args["input"].(model.DeleteBusinessServiceOrderRequest)), true

	case "Mutation.deleteCompanyService":
		if e.complexity.Mutation.DeleteCompanyService == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompanyService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompanyService(childComplexity, args["input"].(model.DeleteCompanyServiceRequest)), true

	case "Mutation.generateToken":
		if e.complexity.Mutation.GenerateToken == nil {
			break
		}

		args, err := ec.field_Mutation_generateToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateToken(childComplexity, args["input"].(model.GenerateTokenRequest)), true

	case "Mutation.singleUpload":
		if e.complexity.Mutation.SingleUpload == nil {
			break
		}

		args, err := ec.field_Mutation_singleUpload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SingleUpload(childComplexity, args["file"].(graphql.Upload)), true

	case "Mutation.updateBusinessCompanyOperationHours":
		if e.complexity.Mutation.UpdateBusinessCompanyOperationHours == nil {
			break
		}

		args, err := ec.field_Mutation_updateBusinessCompanyOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBusinessCompanyOperationHours(childComplexity, args["input"].(model.UpdateBusinessCompanyOperationHoursRequest)), true

	case "Mutation.updateBusinessCompanyServiceOperationHours":
		if e.complexity.Mutation.UpdateBusinessCompanyServiceOperationHours == nil {
			break
		}

		args, err := ec.field_Mutation_updateBusinessCompanyServiceOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBusinessCompanyServiceOperationHours(childComplexity, args["input"].(model.UpdateBusinessCompanyServiceOperationHoursRequest)), true

	case "Mutation.UpdateBusinessServiceOrder":
		if e.complexity.Mutation.UpdateBusinessServiceOrder == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateBusinessServiceOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBusinessServiceOrder(childComplexity, args["input"].(model.UpdateBusinessServiceOrderRequest)), true

	case "Mutation.updateCompanyService":
		if e.complexity.Mutation.UpdateCompanyService == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompanyService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompanyService(childComplexity, args["input"].(model.UpdateCompanyServiceRequest)), true

	case "Pagination.count":
		if e.complexity.Pagination.Count == nil {
			break
		}

		return e.complexity.Pagination.Count(childComplexity), true

	case "Pagination.limit":
		if e.complexity.Pagination.Limit == nil {
			break
		}

		return e.complexity.Pagination.Limit(childComplexity), true

	case "Pagination.offset":
		if e.complexity.Pagination.Offset == nil {
			break
		}

		return e.complexity.Pagination.Offset(childComplexity), true

	case "Query.getBusinessCategories":
		if e.complexity.Query.GetBusinessCategories == nil {
			break
		}

		return e.complexity.Query.GetBusinessCategories(childComplexity), true

	case "Query.getBusinessCategory":
		if e.complexity.Query.GetBusinessCategory == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCategory(childComplexity, args["input"].(model.BusinessCategoryRequest)), true

	case "Query.getBusinessCompanies":
		if e.complexity.Query.GetBusinessCompanies == nil {
			break
		}

		return e.complexity.Query.GetBusinessCompanies(childComplexity), true

	case "Query.getBusinessCompaniesUnderCategory":
		if e.complexity.Query.GetBusinessCompaniesUnderCategory == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCompaniesUnderCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCompaniesUnderCategory(childComplexity, args["input"].(model.GetBusinessCompaniesUnderCategoryRequest)), true

	case "Query.getBusinessCompany":
		if e.complexity.Query.GetBusinessCompany == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCompany(childComplexity, args["input"].(model.GetBusinessCompanyRequest)), true

	case "Query.getBusinessCompanyOperationHourByDay":
		if e.complexity.Query.GetBusinessCompanyOperationHourByDay == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCompanyOperationHourByDay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCompanyOperationHourByDay(childComplexity, args["input"].(*model.GetGetBusinessCompanyOperationHourByDayRequest)), true

	case "Query.getBusinessCompanyOperationHours":
		if e.complexity.Query.GetBusinessCompanyOperationHours == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCompanyOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCompanyOperationHours(childComplexity, args["input"].(*model.GetBusinessCompanyOperationHoursRequest)), true

	case "Query.getBusinessCompanyServiceOperationHourByDay":
		if e.complexity.Query.GetBusinessCompanyServiceOperationHourByDay == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCompanyServiceOperationHourByDay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCompanyServiceOperationHourByDay(childComplexity, args["input"].(*model.GetGetBusinessCompanyServiceOperationHourByDayRequest)), true

	case "Query.getBusinessCompanyServiceOperationHours":
		if e.complexity.Query.GetBusinessCompanyServiceOperationHours == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCompanyServiceOperationHours_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCompanyServiceOperationHours(childComplexity, args["input"].(*model.GetBusinessCompanyServiceOperationHoursRequest)), true

	case "Query.getBusinessCompanyServices":
		if e.complexity.Query.GetBusinessCompanyServices == nil {
			break
		}

		args, err := ec.field_Query_getBusinessCompanyServices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessCompanyServices(childComplexity, args["input"].(*model.GetBusinessCompanyServicesRequest)), true

	case "Query.getBusinessOwnerCompanies":
		if e.complexity.Query.GetBusinessOwnerCompanies == nil {
			break
		}

		args, err := ec.field_Query_getBusinessOwnerCompanies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessOwnerCompanies(childComplexity, args["input"].(*model.GetBusinessOwnerCompaniesRequest)), true

	case "Query.getBusinessService":
		if e.complexity.Query.GetBusinessService == nil {
			break
		}

		args, err := ec.field_Query_getBusinessService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessService(childComplexity, args["input"].(model.GetBusinessServiceRequest)), true

	case "Query.getBusinessServiceOrder":
		if e.complexity.Query.GetBusinessServiceOrder == nil {
			break
		}

		args, err := ec.field_Query_getBusinessServiceOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessServiceOrder(childComplexity, args["input"].(model.GetBusinessServiceOrderRequest)), true

	case "Query.getBusinessServiceOrderByDate":
		if e.complexity.Query.GetBusinessServiceOrderByDate == nil {
			break
		}

		args, err := ec.field_Query_getBusinessServiceOrderByDate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessServiceOrderByDate(childComplexity, args["input"].(model.GetBusinessServiceOrderByDateRequest)), true

	case "Query.getBusinessServiceOrders":
		if e.complexity.Query.GetBusinessServiceOrders == nil {
			break
		}

		args, err := ec.field_Query_getBusinessServiceOrders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessServiceOrders(childComplexity, args["input"].(model.GetBusinessServiceOrdersRequest)), true

	case "Query.getBusinessServiceOrdersByEmail":
		if e.complexity.Query.GetBusinessServiceOrdersByEmail == nil {
			break
		}

		args, err := ec.field_Query_getBusinessServiceOrdersByEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessServiceOrdersByEmail(childComplexity, args["input"].(model.GetBusinessServiceOrdersByEmailRequest)), true

	case "Query.getBusinessServices":
		if e.complexity.Query.GetBusinessServices == nil {
			break
		}

		return e.complexity.Query.GetBusinessServices(childComplexity), true

	case "Query.getBusinessServicesUnderSubCategory":
		if e.complexity.Query.GetBusinessServicesUnderSubCategory == nil {
			break
		}

		args, err := ec.field_Query_getBusinessServicesUnderSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessServicesUnderSubCategory(childComplexity, args["input"].(*model.GetBusinessServicesUnderSubCategoryRequest)), true

	case "Query.getBusinessSubCategories":
		if e.complexity.Query.GetBusinessSubCategories == nil {
			break
		}

		return e.complexity.Query.GetBusinessSubCategories(childComplexity), true

	case "Query.getBusinessSubCategoriesUnderCategory":
		if e.complexity.Query.GetBusinessSubCategoriesUnderCategory == nil {
			break
		}

		args, err := ec.field_Query_getBusinessSubCategoriesUnderCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessSubCategoriesUnderCategory(childComplexity, args["input"].(*model.BusinessSubCategoriesUnderCategoryRequest)), true

	case "Query.getBusinessSubCategory":
		if e.complexity.Query.GetBusinessSubCategory == nil {
			break
		}

		args, err := ec.field_Query_getBusinessSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessSubCategory(childComplexity, args["input"].(model.BusinessSubCategoryRequest)), true

	case "Query.getCompanyAvailableHoursByDate":
		if e.complexity.Query.GetCompanyAvailableHoursByDate == nil {
			break
		}

		args, err := ec.field_Query_getCompanyAvailableHoursByDate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompanyAvailableHoursByDate(childComplexity, args["input"].(model.GetCompanyAvailableHoursByDateRequest)), true

	case "Query.getCompanyService":
		if e.complexity.Query.GetCompanyService == nil {
			break
		}

		args, err := ec.field_Query_getCompanyService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompanyService(childComplexity, args["input"].(model.GetCompanyServiceRequest)), true

	case "Query.getCompanyServices":
		if e.complexity.Query.GetCompanyServices == nil {
			break
		}

		return e.complexity.Query.GetCompanyServices(childComplexity), true

	case "Query.getCompanyServicesUnderCategory":
		if e.complexity.Query.GetCompanyServicesUnderCategory == nil {
			break
		}

		args, err := ec.field_Query_getCompanyServicesUnderCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompanyServicesUnderCategory(childComplexity, args["input"].(*model.GetCompanyServicesUnderCategoryRequest)), true

	case "Query.getCompanyServicesUnderSubCategory":
		if e.complexity.Query.GetCompanyServicesUnderSubCategory == nil {
			break
		}

		args, err := ec.field_Query_getCompanyServicesUnderSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompanyServicesUnderSubCategory(childComplexity, args["input"].(model.GetCompanyServicesUnderSubCategoryRequest)), true

	case "Query.getCustomerByEmail":
		if e.complexity.Query.GetCustomerByEmail == nil {
			break
		}

		args, err := ec.field_Query_getCustomerByEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCustomerByEmail(childComplexity, args["input"].(model.GetCustomerByEmailRequest)), true

	case "Query.getCustomerTokenInfo":
		if e.complexity.Query.GetCustomerTokenInfo == nil {
			break
		}

		args, err := ec.field_Query_getCustomerTokenInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCustomerTokenInfo(childComplexity, args["input"].(model.GetCustomerTokenInfoRequest)), true

	case "Query.retrieveTokenInfo":
		if e.complexity.Query.RetrieveTokenInfo == nil {
			break
		}

		args, err := ec.field_Query_retrieveTokenInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveTokenInfo(childComplexity, args["input"].(model.RetrieveTokenInfoRequst)), true

	case "Token.accessToken":
		if e.complexity.Token.AccessToken == nil {
			break
		}

		return e.complexity.Token.AccessToken(childComplexity), true

	case "Token.expiresIn":
		if e.complexity.Token.ExpiresIn == nil {
			break
		}

		return e.complexity.Token.ExpiresIn(childComplexity), true

	case "Token.refreshToken":
		if e.complexity.Token.RefreshToken == nil {
			break
		}

		return e.complexity.Token.RefreshToken(childComplexity), true

	case "Token.tokenType":
		if e.complexity.Token.TokenType == nil {
			break
		}

		return e.complexity.Token.TokenType(childComplexity), true

	case "UpdateBusinessServiceOrderResponse.businessServiceOrder":
		if e.complexity.UpdateBusinessServiceOrderResponse.BusinessServiceOrder == nil {
			break
		}

		return e.complexity.UpdateBusinessServiceOrderResponse.BusinessServiceOrder(childComplexity), true

	case "businessCompanyOperationHourResponse.businessCompanyOperationHour":
		if e.complexity.BusinessCompanyOperationHourResponse.BusinessCompanyOperationHour == nil {
			break
		}

		return e.complexity.BusinessCompanyOperationHourResponse.BusinessCompanyOperationHour(childComplexity), true

	case "businessCompanyService.companyServiceDuration":
		if e.complexity.BusinessCompanyService.CompanyServiceDuration == nil {
			break
		}

		return e.complexity.BusinessCompanyService.CompanyServiceDuration(childComplexity), true

	case "businessCompanyService.companyServiceID":
		if e.complexity.BusinessCompanyService.CompanyServiceID == nil {
			break
		}

		return e.complexity.BusinessCompanyService.CompanyServiceID(childComplexity), true

	case "businessCompanyService.companyServiceName":
		if e.complexity.BusinessCompanyService.CompanyServiceName == nil {
			break
		}

		return e.complexity.BusinessCompanyService.CompanyServiceName(childComplexity), true

	case "businessCompanyService.companyServicePrice":
		if e.complexity.BusinessCompanyService.CompanyServicePrice == nil {
			break
		}

		return e.complexity.BusinessCompanyService.CompanyServicePrice(childComplexity), true

	case "businessCompanyServiceOperationHourResponse.businessCompanyServiceOperationHour":
		if e.complexity.BusinessCompanyServiceOperationHourResponse.BusinessCompanyServiceOperationHour == nil {
			break
		}

		return e.complexity.BusinessCompanyServiceOperationHourResponse.BusinessCompanyServiceOperationHour(childComplexity), true

	case "createBusinessCompanyOperationHoursResponse.businessCompanyOperationHour":
		if e.complexity.CreateBusinessCompanyOperationHoursResponse.BusinessCompanyOperationHour == nil {
			break
		}

		return e.complexity.CreateBusinessCompanyOperationHoursResponse.BusinessCompanyOperationHour(childComplexity), true

	case "createBusinessCompanyServiceOperationHoursResponse.businessCompanyServiceOperationHour":
		if e.complexity.CreateBusinessCompanyServiceOperationHoursResponse.BusinessCompanyServiceOperationHour == nil {
			break
		}

		return e.complexity.CreateBusinessCompanyServiceOperationHoursResponse.BusinessCompanyServiceOperationHour(childComplexity), true

	case "createBusinessServiceResponse.businessService":
		if e.complexity.CreateBusinessServiceResponse.BusinessService == nil {
			break
		}

		return e.complexity.CreateBusinessServiceResponse.BusinessService(childComplexity), true

	case "createCompanyServiceResponse.companyService":
		if e.complexity.CreateCompanyServiceResponse.CompanyService == nil {
			break
		}

		return e.complexity.CreateCompanyServiceResponse.CompanyService(childComplexity), true

	case "deleteBusinessCompanyOperationHoursResponse.businessCompanyOperationHour":
		if e.complexity.DeleteBusinessCompanyOperationHoursResponse.BusinessCompanyOperationHour == nil {
			break
		}

		return e.complexity.DeleteBusinessCompanyOperationHoursResponse.BusinessCompanyOperationHour(childComplexity), true

	case "deleteBusinessCompanyServiceOperationHoursResponse.businessCompanyServiceOperationHour":
		if e.complexity.DeleteBusinessCompanyServiceOperationHoursResponse.BusinessCompanyServiceOperationHour == nil {
			break
		}

		return e.complexity.DeleteBusinessCompanyServiceOperationHoursResponse.BusinessCompanyServiceOperationHour(childComplexity), true

	case "deleteCompanyServiceResponse.companyService":
		if e.complexity.DeleteCompanyServiceResponse.CompanyService == nil {
			break
		}

		return e.complexity.DeleteCompanyServiceResponse.CompanyService(childComplexity), true

	case "generateTokenResponse.accessToken":
		if e.complexity.GenerateTokenResponse.AccessToken == nil {
			break
		}

		return e.complexity.GenerateTokenResponse.AccessToken(childComplexity), true

	case "generateTokenResponse.expiresIn":
		if e.complexity.GenerateTokenResponse.ExpiresIn == nil {
			break
		}

		return e.complexity.GenerateTokenResponse.ExpiresIn(childComplexity), true

	case "generateTokenResponse.refreshToken":
		if e.complexity.GenerateTokenResponse.RefreshToken == nil {
			break
		}

		return e.complexity.GenerateTokenResponse.RefreshToken(childComplexity), true

	case "generateTokenResponse.tokenType":
		if e.complexity.GenerateTokenResponse.TokenType == nil {
			break
		}

		return e.complexity.GenerateTokenResponse.TokenType(childComplexity), true

	case "getBusinessCompanyServicesResponse.businessCompanyService":
		if e.complexity.GetBusinessCompanyServicesResponse.BusinessCompanyService == nil {
			break
		}

		return e.complexity.GetBusinessCompanyServicesResponse.BusinessCompanyService(childComplexity), true

	case "getBusinessOwnerCompaniesResponse.companies":
		if e.complexity.GetBusinessOwnerCompaniesResponse.Companies == nil {
			break
		}

		return e.complexity.GetBusinessOwnerCompaniesResponse.Companies(childComplexity), true

	case "retrieveTokenInfoResponse.email":
		if e.complexity.RetrieveTokenInfoResponse.Email == nil {
			break
		}

		return e.complexity.RetrieveTokenInfoResponse.Email(childComplexity), true

	case "retrieveTokenInfoResponse.expiresAt":
		if e.complexity.RetrieveTokenInfoResponse.ExpiresAt == nil {
			break
		}

		return e.complexity.RetrieveTokenInfoResponse.ExpiresAt(childComplexity), true

	case "retrieveTokenInfoResponse.issuedAt":
		if e.complexity.RetrieveTokenInfoResponse.IssuedAt == nil {
			break
		}

		return e.complexity.RetrieveTokenInfoResponse.IssuedAt(childComplexity), true

	case "updateBusinessCompanyOperationHoursResponse.businessCompanyOperationHour":
		if e.complexity.UpdateBusinessCompanyOperationHoursResponse.BusinessCompanyOperationHour == nil {
			break
		}

		return e.complexity.UpdateBusinessCompanyOperationHoursResponse.BusinessCompanyOperationHour(childComplexity), true

	case "updateBusinessCompanyServiceOperationHoursResponse.businessCompanyServiceOperationHour":
		if e.complexity.UpdateBusinessCompanyServiceOperationHoursResponse.BusinessCompanyServiceOperationHour == nil {
			break
		}

		return e.complexity.UpdateBusinessCompanyServiceOperationHoursResponse.BusinessCompanyServiceOperationHour(childComplexity), true

	case "updateCompanyServiceResponse.companyService":
		if e.complexity.UpdateCompanyServiceResponse.CompanyService == nil {
			break
		}

		return e.complexity.UpdateCompanyServiceResponse.CompanyService(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	&ast.Source{Name: "graph/schema.graphqls", Input: `# GraphQL schema example
# https://gqlgen.com/getting-started/

type BusinessCategory {
  businessCategoryID: ID!
  businessCategoryName: String!
}

input BusinessCategoryRequest {
  businessCategoryID: ID!
}

type BusinessSubCategory {
  businessSubCategoryID: ID!
  businessSubCategoryName: String!
  businessCategoryID: ID!
}

input BusinessSubCategoryRequest {
  businessSubCategoryID: ID!
}

input BusinessSubCategoriesUnderCategoryRequest {
  businessCategoryID: ID!
}

type BusinessSubCategories {
  businessSubCategories: [BusinessSubCategory!]!
}


type BusinessCompany {
  businessCompanyID: ID!
  businessCompanyName: String!
  businessCompanyCategoryID: ID!
}

input CreateBusinessCompanyRequest {
  businessCompanyName: String!
  businessCompanyCategoryID: ID!
}

input getBusinessCompanyRequest {
  businessCompanyID: ID!
}

type BusinessCompanies {
  businessCompanies: [BusinessCompany!]!
}

input getBusinessCompaniesUnderCategoryRequest {
  categoryID: ID!
}

input getBusinessCompanyServicesRequest {
  businessCompanyID: ID!
}

type businessCompanyService {
  companyServiceID: ID!
  companyServiceName: String!
  companyServiceDuration: Int!
  companyServicePrice: Float!
}
type getBusinessCompanyServicesResponse {
  businessCompanyService: [businessCompanyService!]
}

type BusinessOwner {
  businessOwnerID: ID!
  businessOwnerName: String!
  businessOwnerEmail: String!
  businessOwnerPhoneNumberPrefix: String!
  businessOwnerPhoneNumber: String!
}


input getBusinessOwnerCompaniesRequest {
  email: String!
}

type getBusinessOwnerCompaniesResponse {
  companies: [BusinessCompany!]!
}

input CreateBusinessOwnerRequest {
  businessCompanyID: ID!
  businessOwnerName: String!
  businessOwnerEmail: String!
  businessOwnerPassword: String!
  businessOwnerPhoneNumberPrefix: String!
  businessOwnerPhoneNumber: String!
}

type CreateBusinessOwnerResponse{
  businessOwner: BusinessOwner!
  token: Token!
}


type BusinessService {
  businessServiceID: ID!
  businessServiceName: String!
  subCategories: [Int!]!
}

input getBusinessServiceRequest {
  businessServiceID: ID!
}

type BusinessServices {
  businessServices: [BusinessService!]!
}

input getBusinessServicesUnderSubCategoryRequest {
  subCategoryID: Int!
}

input getCompanyServicesUnderCategoryRequest {
  categoryID: Int!
}

input createBusinessServiceRequest {
  businessServiceName: String!
  businessServiceSubCategories: [Int!]!
}

type createBusinessServiceResponse {
  businessService: BusinessService!
}


type BusinessCompanyOperationHour {
  companyOperationHourID: ID!
  businessCompanyID: Int!
  dayOfWeek: Int!
  openTime: String!
  closeTime: String!
}

input getGetBusinessCompanyOperationHourByDayRequest {
  businessCompanyID: Int!
  dayOfWeek: Int!
}

type businessCompanyOperationHourResponse {
  businessCompanyOperationHour: BusinessCompanyOperationHour!
}

input getBusinessCompanyOperationHoursRequest {
  businessCompanyID: Int!
}

type BusinessCompanyOperationHours {
  businessCompanyOperationHour: [BusinessCompanyOperationHour!]!
}

input createBusinessCompanyOperationHoursRequest {
  businessCompanyID: Int!
  dayOfWeek: Int!
  openTime: String!
  closeTime: String!
}

type createBusinessCompanyOperationHoursResponse {
  businessCompanyOperationHour: BusinessCompanyOperationHour!
}

input updateBusinessCompanyOperationHoursRequest {
  companyOperationHourID: ID!
  businessCompanyID: Int!
  dayOfWeek: Int!
  openTime: String!
  closeTime: String!
}

type updateBusinessCompanyOperationHoursResponse {
  businessCompanyOperationHour: BusinessCompanyOperationHour!
}

input deleteBusinessCompanyOperationHoursRequest {
  companyOperationHourID: Int!
}

type deleteBusinessCompanyOperationHoursResponse {
  businessCompanyOperationHour: BusinessCompanyOperationHour!
}


type CompanyService {
  companyServiceID: ID!
  companyServiceName: String!
  companyServiceDuration: Int!
  companyServicePrice: Float!
  businessServiceID: Int
  businessServiceName: String
  businessCompanyID: Int
  businessCompanyName: String
}

input getCompanyServiceRequest {
  companyServiceID: ID!
}

type CompanyServices {
  companyServices: [CompanyService!]!
}

input getCompanyServicesUnderSubCategoryRequest {
  subCategoryID: Int!
}

input createCompanyServiceRequest {
  companyServiceName: String!
  companyServiceDuration: Int!
  companyServicePrice: Float!
  businessServiceID: Int!
  businessCompanyID: Int!
}


type createCompanyServiceResponse {
  companyService: CompanyService!
}


input updateCompanyServiceRequest {
  companyServiceID: ID!
  companyServiceName: String!
  companyServiceDuration: Int!
  companyServicePrice: Float!
  businessServiceID: Int!
  businessCompanyID: Int!
}

type updateCompanyServiceResponse {
  companyService: CompanyService!
}

input deleteCompanyServiceRequest {
  companyServiceID: ID!
}

type deleteCompanyServiceResponse {
  companyService: CompanyService!
}

type Token {
  accessToken: String!
  refreshToken: String!
  expiresIn: Int!
  tokenType: String!
}

input retrieveTokenInfoRequst {
  accessToken: String!
}

type retrieveTokenInfoResponse {
  email: String!
  expiresAt: Int!
  issuedAt: Int!
}

input generateTokenRequest {
  email: String!
  password: String!
}

type generateTokenResponse {
  accessToken: String!
  refreshToken: String!
  expiresIn: Int!
  tokenType: String!
}

##########################################################
type BusinessCompanyServiceOperationHour {
  serviceOperationHourID: ID!
  businessCompanyID: Int!
  businessServiceID: Int!
  dayOfWeek: Int!
  openTime: String!
  closeTime: String!
}

input getGetBusinessCompanyServiceOperationHourByDayRequest {
  serviceID: Int!
  dayOfWeek: Int!
}

type businessCompanyServiceOperationHourResponse {
  businessCompanyServiceOperationHour: BusinessCompanyServiceOperationHour!
}

input getBusinessCompanyServiceOperationHoursRequest {
  serviceID: Int!
}

type BusinessCompanyServiceOperationHours {
  businessCompanyServiceOperationHour: [BusinessCompanyServiceOperationHour!]!
}

input createBusinessCompanyServiceOperationHoursRequest {
  businessCompanyID: Int!
  businessServiceID: Int!
  dayOfWeek: Int!
  openTime: String!
  closeTime: String!
}

type createBusinessCompanyServiceOperationHoursResponse {
  businessCompanyServiceOperationHour: BusinessCompanyServiceOperationHour!
}

input updateBusinessCompanyServiceOperationHoursRequest {
  operationHourID: Int!
  businessCompanyID: Int!
  businessServiceID: Int!
  dayOfWeek: Int!
  openTime: String!
  closeTime: String!
}

type updateBusinessCompanyServiceOperationHoursResponse {
  businessCompanyServiceOperationHour: BusinessCompanyServiceOperationHour!
}

input deleteBusinessCompanyServiceOperationHoursRequest {
  operationHourID: Int!
}

type deleteBusinessCompanyServiceOperationHoursResponse {
  businessCompanyServiceOperationHour: BusinessCompanyServiceOperationHour!
}

type BusinessServiceOrder {
  businessServiceOrderID: ID!
  clientID: ID!
  businessServiceID: ID!
  businessServiceName: String!
  businessCompanyName: String
  price: Float
  startAt: String!
  endAt: String!
  createdAt: String!
  prePaid: Boolean!
  clientFirstName: String!
  clientPhoneNumber: String!
  clientPhoneNumberPrefix: String!
  clientCommentary: String!
}

input GetBusinessServiceOrderRequest {
  businessServiceOrderID: ID!
}

type GetBusinessServiceOrderResponse {
  businessServiceOrder: BusinessServiceOrder!
}

input GetBusinessServiceOrdersRequest {
  businessServiceID: ID!
}

type GetBusinessServiceOrdersResponse {
  businessServicesOrders: [BusinessServiceOrder!]!
}

input CreateBusinessServiceOrderRequest {
  clientID: ID!
  businessServiceID: ID!
  startAt: String!
  prePaid: Boolean!
  clientFirstName: String!
  clientPhoneNumber: String!
  clientPhoneNumberPrefix: String!
  clientCommentary: String!
}

type CreateBusinessServiceOrderResponse {
  businessServiceOrder: BusinessServiceOrder!
}

input GetCompanyAvailableHoursByDateRequest {
  businessServiceID: ID!
  date: String!
}

type GetCompanyAvailableHoursByDateResponse {
  availableHour: [String!]!
}

input GetBusinessServiceOrderByDateRequest {
  businessServiceID: ID!
  date: String!
}

type GetBusinessServiceOrderByDateResponse {
  businessServicesOrders: [BusinessServiceOrder!]!
}



type Customer {
  customerID: ID!
  customerFirstName: String!
  customerSecondName: String!
  customerEmail: String!
  customerPhoneNumberPrefix: String!
  customerPhoneNumber: String!
  createdAt: String!
}

input CreateCustomerRequest {
  customerFirstName: String!
  customerSecondName: String!
  customerEmail: String!
  customerPhoneNumberPrefix: String!
  customerPhoneNumber: String!
  customerPassword: String!
}

type CreateCustomerResponse{
  customer: Customer!
  token: Token!
}

input GetCustomerByEmailRequest {
  email: String!
}

type GetCustomerByEmailResponse {
  customer: Customer!
}

input GetCustomerTokenInfoRequest {
  accessToken: String!
}

type GetCustomerTokenInfoResponse {
  email: String!
  issuedAt: Int!
  expiresAt: Int!
}

input CreateCustomerTokenRequest {
  email: String!
  password: String!
}

type CreateCustomerTokenResponse {
  token: Token!
}

input UpdateBusinessServiceOrderRequest {
  orderID: ID!
  businessServiceID: ID!
  startAt: String!
  prePaid: Boolean!
  clientFirstName: String!
  clientPhoneNumber: String!
  clientPhoneNumberPrefix: String!
  clientCommentary: String!
}

type UpdateBusinessServiceOrderResponse {
  businessServiceOrder: BusinessServiceOrder!
}

input DeleteBusinessServiceOrderRequest {
  orderID: ID!
}

type DeleteBusinessServiceOrderResponse {
  businessServiceOrder: BusinessServiceOrder!
}

input PaginationInput {
  limit: Int!
  offset: Int!
  count: Int
}

type Pagination {
  limit: Int!
  offset: Int!
  count: Int
}

input GetBusinessServiceOrdersByEmailRequest {
  email: String!
  pagination: PaginationInput!
}

type GetBusinessServiceOrdersByEmailResponse {
  businessServicesOrders: [BusinessServiceOrder!]!
  pagination: Pagination!
}

scalar Upload
type File {
  id: Int!
  name: String!
  content: String!
  contentType: String!
}

input UploadFile {
  file: Upload!
}


input BusinessCompanyImagesUploadRequest {
  bussinessCompanyID: ID!
  files: [UploadFile!]!
}

input BusinessCompanyImageUploadRequest {
  bussinessCompanyID: ID!
  file: Upload!
}



type Query {
  getBusinessServiceOrder(input: GetBusinessServiceOrderRequest!): GetBusinessServiceOrderResponse!
  getBusinessServiceOrders(input: GetBusinessServiceOrdersRequest!): GetBusinessServiceOrdersResponse!
  getCompanyAvailableHoursByDate(input: GetCompanyAvailableHoursByDateRequest!): GetCompanyAvailableHoursByDateResponse!
  getBusinessServiceOrderByDate(input: GetBusinessServiceOrderByDateRequest!): GetBusinessServiceOrderByDateResponse!
  getBusinessServiceOrdersByEmail(input: GetBusinessServiceOrdersByEmailRequest!): GetBusinessServiceOrdersByEmailResponse!

  getBusinessCompany(input: getBusinessCompanyRequest!): BusinessCompany!
  getBusinessCompanies: BusinessCompanies!
  getBusinessCompaniesUnderCategory(input: getBusinessCompaniesUnderCategoryRequest!): BusinessCompanies!

  getBusinessCompanyServices(input: getBusinessCompanyServicesRequest): getBusinessCompanyServicesResponse!

  getBusinessOwnerCompanies(input: getBusinessOwnerCompaniesRequest): getBusinessOwnerCompaniesResponse!

  getBusinessCompanyOperationHourByDay(input: getGetBusinessCompanyOperationHourByDayRequest): businessCompanyOperationHourResponse!
  getBusinessCompanyOperationHours(input: getBusinessCompanyOperationHoursRequest): BusinessCompanyOperationHours!

  getBusinessCompanyServiceOperationHourByDay(input: getGetBusinessCompanyServiceOperationHourByDayRequest): businessCompanyServiceOperationHourResponse!
  getBusinessCompanyServiceOperationHours(input: getBusinessCompanyServiceOperationHoursRequest): BusinessCompanyServiceOperationHours!

  getBusinessCategory(input: BusinessCategoryRequest!): BusinessCategory!
  getBusinessCategories: [BusinessCategory!]!

  getBusinessSubCategory(input: BusinessSubCategoryRequest!): BusinessSubCategory!
  getBusinessSubCategories: BusinessSubCategories!
  getBusinessSubCategoriesUnderCategory(input: BusinessSubCategoriesUnderCategoryRequest): BusinessSubCategories!

  getBusinessService(input: getBusinessServiceRequest!): BusinessService!
  getBusinessServices: BusinessServices!
  getBusinessServicesUnderSubCategory(input: getBusinessServicesUnderSubCategoryRequest):BusinessServices!

  getCompanyService(input: getCompanyServiceRequest!): CompanyService!
  getCompanyServices: CompanyServices!
  getCompanyServicesUnderSubCategory(input: getCompanyServicesUnderSubCategoryRequest!): CompanyServices!
  getCompanyServicesUnderCategory(input: getCompanyServicesUnderCategoryRequest):CompanyServices!


  retrieveTokenInfo(input: retrieveTokenInfoRequst!) : retrieveTokenInfoResponse!

  getCustomerByEmail(input: GetCustomerByEmailRequest!): GetCustomerByEmailResponse!
  getCustomerTokenInfo(input: GetCustomerTokenInfoRequest!): GetCustomerTokenInfoResponse!
}

type Mutation {
  singleUpload(file: Upload!): Boolean!
  BusinessCompanyImageUpload(input: BusinessCompanyImageUploadRequest!): File!
  BusinessCompanyImagesUpload(input: BusinessCompanyImagesUploadRequest!): [File!]!
  UpdateBusinessServiceOrder(input: UpdateBusinessServiceOrderRequest!): UpdateBusinessServiceOrderResponse!
  DeleteBusinessServiceOrder(input: DeleteBusinessServiceOrderRequest!): DeleteBusinessServiceOrderResponse!

  createCustomer(input: CreateCustomerRequest!): CreateCustomerResponse!
  createCustomerToken(input: CreateCustomerTokenRequest!): CreateCustomerTokenResponse!

  createBusinessServiceOrder(input: CreateBusinessServiceOrderRequest!): CreateBusinessServiceOrderResponse!

  createBusinessCompany(input: CreateBusinessCompanyRequest!): BusinessCompany!
  createBusinessOwner(input: CreateBusinessOwnerRequest!): CreateBusinessOwnerResponse!

  createBusinessService(input: createBusinessServiceRequest!): createBusinessServiceResponse!

  createCompanyService(input: createCompanyServiceRequest!): createCompanyServiceResponse!
  updateCompanyService(input: updateCompanyServiceRequest!): updateCompanyServiceResponse!
  deleteCompanyService(input: deleteCompanyServiceRequest!): deleteCompanyServiceResponse!

  createBusinessCompanyOperationHours(input: createBusinessCompanyOperationHoursRequest!): createBusinessCompanyOperationHoursResponse!
  updateBusinessCompanyOperationHours(input: updateBusinessCompanyOperationHoursRequest!): updateBusinessCompanyOperationHoursResponse!
  deleteBusinessCompanyOperationHours(input: deleteBusinessCompanyOperationHoursRequest!): deleteBusinessCompanyOperationHoursResponse!

  createBusinessCompanyServiceOperationHours(input: createBusinessCompanyServiceOperationHoursRequest!): createBusinessCompanyServiceOperationHoursResponse!
  updateBusinessCompanyServiceOperationHours(input: updateBusinessCompanyServiceOperationHoursRequest!): updateBusinessCompanyServiceOperationHoursResponse!
  deleteBusinessCompanyServiceOperationHours(input: deleteBusinessCompanyServiceOperationHoursRequest!): deleteBusinessCompanyServiceOperationHoursResponse!


  generateToken(input: generateTokenRequest!) : Token!
}


`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_BusinessCompanyImageUpload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BusinessCompanyImageUploadRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBusinessCompanyImageUploadRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyImageUploadRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_BusinessCompanyImagesUpload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BusinessCompanyImagesUploadRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBusinessCompanyImagesUploadRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyImagesUploadRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteBusinessServiceOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteBusinessServiceOrderRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDeleteBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessServiceOrderRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_UpdateBusinessServiceOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateBusinessServiceOrderRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdateBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessServiceOrderRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBusinessCompanyOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBusinessCompanyOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNcreateBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBusinessCompanyServiceOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBusinessCompanyServiceOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNcreateBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyServiceOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBusinessCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBusinessCompanyRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateBusinessCompanyRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBusinessOwner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBusinessOwnerRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateBusinessOwnerRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessOwnerRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBusinessServiceOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBusinessServiceOrderRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceOrderRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBusinessService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBusinessServiceRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNcreateBusinessServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompanyService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCompanyServiceRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNcreateCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCompanyServiceRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCustomerToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCustomerTokenRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateCustomerTokenRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerTokenRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCustomerRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCreateCustomerRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBusinessCompanyOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteBusinessCompanyOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNdeleteBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBusinessCompanyServiceOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteBusinessCompanyServiceOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNdeleteBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyServiceOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompanyService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteCompanyServiceRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNdeleteCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteCompanyServiceRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_generateToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GenerateTokenRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNgenerateTokenRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGenerateTokenRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_singleUpload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBusinessCompanyOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateBusinessCompanyOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNupdateBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBusinessCompanyServiceOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateBusinessCompanyServiceOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNupdateBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyServiceOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompanyService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCompanyServiceRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNupdateCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateCompanyServiceRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BusinessCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBusinessCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCompaniesUnderCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBusinessCompaniesUnderCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNgetBusinessCompaniesUnderCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompaniesUnderCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCompanyOperationHourByDay_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetGetBusinessCompanyOperationHourByDayRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetGetBusinessCompanyOperationHourByDayRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyOperationHourByDayRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCompanyOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetBusinessCompanyOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetBusinessCompanyOperationHoursRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCompanyServiceOperationHourByDay_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetGetBusinessCompanyServiceOperationHourByDayRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetGetBusinessCompanyServiceOperationHourByDayRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyServiceOperationHourByDayRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCompanyServiceOperationHours_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetBusinessCompanyServiceOperationHoursRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetBusinessCompanyServiceOperationHoursRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServiceOperationHoursRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCompanyServices_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetBusinessCompanyServicesRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetBusinessCompanyServicesRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServicesRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBusinessCompanyRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNgetBusinessCompanyRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessOwnerCompanies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetBusinessOwnerCompaniesRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetBusinessOwnerCompaniesRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessOwnerCompaniesRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessServiceOrderByDate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBusinessServiceOrderByDateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetBusinessServiceOrderByDateRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderByDateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessServiceOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBusinessServiceOrderRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessServiceOrdersByEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBusinessServiceOrdersByEmailRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetBusinessServiceOrdersByEmailRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersByEmailRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessServiceOrders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBusinessServiceOrdersRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetBusinessServiceOrdersRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetBusinessServiceRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNgetBusinessServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessServicesUnderSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetBusinessServicesUnderSubCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetBusinessServicesUnderSubCategoryRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServicesUnderSubCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessSubCategoriesUnderCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BusinessSubCategoriesUnderCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOBusinessSubCategoriesUnderCategoryRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoriesUnderCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BusinessSubCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNBusinessSubCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCompanyAvailableHoursByDate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetCompanyAvailableHoursByDateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetCompanyAvailableHoursByDateRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyAvailableHoursByDateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCompanyService_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetCompanyServiceRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNgetCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServiceRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCompanyServicesUnderCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.GetCompanyServicesUnderCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOgetCompanyServicesUnderCategoryRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServicesUnderCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCompanyServicesUnderSubCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetCompanyServicesUnderSubCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNgetCompanyServicesUnderSubCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServicesUnderSubCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCustomerByEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetCustomerByEmailRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetCustomerByEmailRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerByEmailRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getCustomerTokenInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetCustomerTokenInfoRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNGetCustomerTokenInfoRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerTokenInfoRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_retrieveTokenInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RetrieveTokenInfoRequst
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNretrieveTokenInfoRequst2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐRetrieveTokenInfoRequst(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _BusinessCategory_businessCategoryID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCategory_businessCategoryName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanies_businessCompanies(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanies) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanies",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessCompany)
	fc.Result = res
	return ec.marshalNBusinessCompany2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompany_businessCompanyID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompany) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompany",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompany_businessCompanyName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompany) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompany",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompany_businessCompanyCategoryID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompany) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompany",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyOperationHour_companyOperationHourID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyOperationHourID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyOperationHour_businessCompanyID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyOperationHour_dayOfWeek(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayOfWeek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyOperationHour_openTime(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyOperationHour_closeTime(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CloseTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyOperationHours_businessCompanyOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyOperationHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyOperationHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessCompanyOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyOperationHour2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHourᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyServiceOperationHour_serviceOperationHourID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyServiceOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceOperationHourID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyServiceOperationHour_businessCompanyID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyServiceOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyServiceOperationHour_businessServiceID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyServiceOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyServiceOperationHour_dayOfWeek(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyServiceOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayOfWeek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyServiceOperationHour_openTime(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyServiceOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyServiceOperationHour_closeTime(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHour) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyServiceOperationHour",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CloseTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessCompanyServiceOperationHours_businessCompanyServiceOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHours) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessCompanyServiceOperationHours",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyServiceOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessCompanyServiceOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyServiceOperationHour2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHourᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessOwner_businessOwnerID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessOwner",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessOwner_businessOwnerName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessOwner",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessOwner_businessOwnerEmail(ctx context.Context, field graphql.CollectedField, obj *model.BusinessOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessOwner",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwnerEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessOwner_businessOwnerPhoneNumberPrefix(ctx context.Context, field graphql.CollectedField, obj *model.BusinessOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessOwner",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwnerPhoneNumberPrefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessOwner_businessOwnerPhoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.BusinessOwner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessOwner",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwnerPhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessService_businessServiceID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessService_businessServiceName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessService_subCategories(ctx context.Context, field graphql.CollectedField, obj *model.BusinessService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalNInt2ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_businessServiceOrderID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_clientID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_businessServiceID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_businessServiceName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_businessCompanyName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_price(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_startAt(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_endAt(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_prePaid(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrePaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_clientFirstName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientFirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_clientPhoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientPhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_clientPhoneNumberPrefix(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientPhoneNumberPrefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServiceOrder_clientCommentary(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServiceOrder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServiceOrder",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientCommentary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessServices_businessServices(ctx context.Context, field graphql.CollectedField, obj *model.BusinessServices) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessServices",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessService)
	fc.Result = res
	return ec.marshalNBusinessService2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategories_businessSubCategories(ctx context.Context, field graphql.CollectedField, obj *model.BusinessSubCategories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessSubCategories",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessSubCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessSubCategory)
	fc.Result = res
	return ec.marshalNBusinessSubCategory2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_businessSubCategoryID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessSubCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_businessSubCategoryName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessSubCategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessSubCategory_businessCategoryID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessSubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BusinessSubCategory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_companyServiceID(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_companyServiceName(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServiceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_companyServiceDuration(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServiceDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_companyServicePrice(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServicePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_businessServiceID(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_businessServiceName(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_businessCompanyID(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyService_businessCompanyName(ctx context.Context, field graphql.CollectedField, obj *model.CompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyServices_companyServices(ctx context.Context, field graphql.CollectedField, obj *model.CompanyServices) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CompanyServices",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CompanyService)
	fc.Result = res
	return ec.marshalNCompanyService2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateBusinessOwnerResponse_businessOwner(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusinessOwnerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateBusinessOwnerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessOwner)
	fc.Result = res
	return ec.marshalNBusinessOwner2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessOwner(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateBusinessOwnerResponse_token(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusinessOwnerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateBusinessOwnerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateBusinessServiceOrderResponse_businessServiceOrder(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusinessServiceOrderResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateBusinessServiceOrderResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessServiceOrder)
	fc.Result = res
	return ec.marshalNBusinessServiceOrder2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateCustomerResponse_customer(ctx context.Context, field graphql.CollectedField, obj *model.CreateCustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateCustomerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateCustomerResponse_token(ctx context.Context, field graphql.CollectedField, obj *model.CreateCustomerResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateCustomerResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateCustomerTokenResponse_token(ctx context.Context, field graphql.CollectedField, obj *model.CreateCustomerTokenResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreateCustomerTokenResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerID(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerFirstName(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerFirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerSecondName(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerSecondName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerEmail(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerPhoneNumberPrefix(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerPhoneNumberPrefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerPhoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerPhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Customer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteBusinessServiceOrderResponse_businessServiceOrder(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBusinessServiceOrderResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "DeleteBusinessServiceOrderResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessServiceOrder)
	fc.Result = res
	return ec.marshalNBusinessServiceOrder2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _File_id(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "File",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _File_name(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "File",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_content(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "File",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _File_contentType(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "File",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetBusinessServiceOrderByDateResponse_businessServicesOrders(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessServiceOrderByDateResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetBusinessServiceOrderByDateResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServicesOrders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessServiceOrder)
	fc.Result = res
	return ec.marshalNBusinessServiceOrder2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetBusinessServiceOrderResponse_businessServiceOrder(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessServiceOrderResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetBusinessServiceOrderResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessServiceOrder)
	fc.Result = res
	return ec.marshalNBusinessServiceOrder2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrder(ctx, field.Selections, res)
}

func (ec *executionContext) _GetBusinessServiceOrdersByEmailResponse_businessServicesOrders(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessServiceOrdersByEmailResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetBusinessServiceOrdersByEmailResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServicesOrders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessServiceOrder)
	fc.Result = res
	return ec.marshalNBusinessServiceOrder2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetBusinessServiceOrdersByEmailResponse_pagination(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessServiceOrdersByEmailResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetBusinessServiceOrdersByEmailResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) _GetBusinessServiceOrdersResponse_businessServicesOrders(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessServiceOrdersResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetBusinessServiceOrdersResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServicesOrders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessServiceOrder)
	fc.Result = res
	return ec.marshalNBusinessServiceOrder2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetCompanyAvailableHoursByDateResponse_availableHour(ctx context.Context, field graphql.CollectedField, obj *model.GetCompanyAvailableHoursByDateResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetCompanyAvailableHoursByDateResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetCustomerByEmailResponse_customer(ctx context.Context, field graphql.CollectedField, obj *model.GetCustomerByEmailResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetCustomerByEmailResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Customer)
	fc.Result = res
	return ec.marshalNCustomer2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) _GetCustomerTokenInfoResponse_email(ctx context.Context, field graphql.CollectedField, obj *model.GetCustomerTokenInfoResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetCustomerTokenInfoResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetCustomerTokenInfoResponse_issuedAt(ctx context.Context, field graphql.CollectedField, obj *model.GetCustomerTokenInfoResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetCustomerTokenInfoResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssuedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetCustomerTokenInfoResponse_expiresAt(ctx context.Context, field graphql.CollectedField, obj *model.GetCustomerTokenInfoResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "GetCustomerTokenInfoResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_singleUpload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_singleUpload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SingleUpload(rctx, args["file"].(graphql.Upload))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BusinessCompanyImageUpload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BusinessCompanyImageUpload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BusinessCompanyImageUpload(rctx, args["input"].(model.BusinessCompanyImageUploadRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.File)
	fc.Result = res
	return ec.marshalNFile2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐFile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_BusinessCompanyImagesUpload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_BusinessCompanyImagesUpload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BusinessCompanyImagesUpload(rctx, args["input"].(model.BusinessCompanyImagesUploadRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.File)
	fc.Result = res
	return ec.marshalNFile2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐFileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UpdateBusinessServiceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UpdateBusinessServiceOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBusinessServiceOrder(rctx, args["input"].(model.UpdateBusinessServiceOrderRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateBusinessServiceOrderResponse)
	fc.Result = res
	return ec.marshalNUpdateBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessServiceOrderResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DeleteBusinessServiceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DeleteBusinessServiceOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBusinessServiceOrder(rctx, args["input"].(model.DeleteBusinessServiceOrderRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteBusinessServiceOrderResponse)
	fc.Result = res
	return ec.marshalNDeleteBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessServiceOrderResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCustomer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCustomer(rctx, args["input"].(model.CreateCustomerRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateCustomerResponse)
	fc.Result = res
	return ec.marshalNCreateCustomerResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCustomerToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCustomerToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCustomerToken(rctx, args["input"].(model.CreateCustomerTokenRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateCustomerTokenResponse)
	fc.Result = res
	return ec.marshalNCreateCustomerTokenResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerTokenResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBusinessServiceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBusinessServiceOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessServiceOrder(rctx, args["input"].(model.CreateBusinessServiceOrderRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateBusinessServiceOrderResponse)
	fc.Result = res
	return ec.marshalNCreateBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceOrderResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBusinessCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBusinessCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessCompany(rctx, args["input"].(model.CreateBusinessCompanyRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompany)
	fc.Result = res
	return ec.marshalNBusinessCompany2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBusinessOwner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBusinessOwner_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessOwner(rctx, args["input"].(model.CreateBusinessOwnerRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateBusinessOwnerResponse)
	fc.Result = res
	return ec.marshalNCreateBusinessOwnerResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessOwnerResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBusinessService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBusinessService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessService(rctx, args["input"].(model.CreateBusinessServiceRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateBusinessServiceResponse)
	fc.Result = res
	return ec.marshalNcreateBusinessServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCompanyService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCompanyService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompanyService(rctx, args["input"].(model.CreateCompanyServiceRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateCompanyServiceResponse)
	fc.Result = res
	return ec.marshalNcreateCompanyServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCompanyServiceResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCompanyService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCompanyService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompanyService(rctx, args["input"].(model.UpdateCompanyServiceRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateCompanyServiceResponse)
	fc.Result = res
	return ec.marshalNupdateCompanyServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateCompanyServiceResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCompanyService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCompanyService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompanyService(rctx, args["input"].(model.DeleteCompanyServiceRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteCompanyServiceResponse)
	fc.Result = res
	return ec.marshalNdeleteCompanyServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteCompanyServiceResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBusinessCompanyOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBusinessCompanyOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessCompanyOperationHours(rctx, args["input"].(model.CreateBusinessCompanyOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateBusinessCompanyOperationHoursResponse)
	fc.Result = res
	return ec.marshalNcreateBusinessCompanyOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyOperationHoursResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBusinessCompanyOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBusinessCompanyOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBusinessCompanyOperationHours(rctx, args["input"].(model.UpdateBusinessCompanyOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateBusinessCompanyOperationHoursResponse)
	fc.Result = res
	return ec.marshalNupdateBusinessCompanyOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyOperationHoursResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteBusinessCompanyOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteBusinessCompanyOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBusinessCompanyOperationHours(rctx, args["input"].(model.DeleteBusinessCompanyOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteBusinessCompanyOperationHoursResponse)
	fc.Result = res
	return ec.marshalNdeleteBusinessCompanyOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyOperationHoursResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBusinessCompanyServiceOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBusinessCompanyServiceOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessCompanyServiceOperationHours(rctx, args["input"].(model.CreateBusinessCompanyServiceOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateBusinessCompanyServiceOperationHoursResponse)
	fc.Result = res
	return ec.marshalNcreateBusinessCompanyServiceOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyServiceOperationHoursResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBusinessCompanyServiceOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBusinessCompanyServiceOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBusinessCompanyServiceOperationHours(rctx, args["input"].(model.UpdateBusinessCompanyServiceOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UpdateBusinessCompanyServiceOperationHoursResponse)
	fc.Result = res
	return ec.marshalNupdateBusinessCompanyServiceOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyServiceOperationHoursResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteBusinessCompanyServiceOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteBusinessCompanyServiceOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBusinessCompanyServiceOperationHours(rctx, args["input"].(model.DeleteBusinessCompanyServiceOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteBusinessCompanyServiceOperationHoursResponse)
	fc.Result = res
	return ec.marshalNdeleteBusinessCompanyServiceOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyServiceOperationHoursResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_generateToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_generateToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateToken(rctx, args["input"].(model.GenerateTokenRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) _Pagination_limit(ctx context.Context, field graphql.CollectedField, obj *model.Pagination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Pagination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Limit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Pagination_offset(ctx context.Context, field graphql.CollectedField, obj *model.Pagination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Pagination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Pagination_count(ctx context.Context, field graphql.CollectedField, obj *model.Pagination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Pagination",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessServiceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessServiceOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessServiceOrder(rctx, args["input"].(model.GetBusinessServiceOrderRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetBusinessServiceOrderResponse)
	fc.Result = res
	return ec.marshalNGetBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessServiceOrders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessServiceOrders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessServiceOrders(rctx, args["input"].(model.GetBusinessServiceOrdersRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetBusinessServiceOrdersResponse)
	fc.Result = res
	return ec.marshalNGetBusinessServiceOrdersResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCompanyAvailableHoursByDate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCompanyAvailableHoursByDate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompanyAvailableHoursByDate(rctx, args["input"].(model.GetCompanyAvailableHoursByDateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetCompanyAvailableHoursByDateResponse)
	fc.Result = res
	return ec.marshalNGetCompanyAvailableHoursByDateResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyAvailableHoursByDateResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessServiceOrderByDate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessServiceOrderByDate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessServiceOrderByDate(rctx, args["input"].(model.GetBusinessServiceOrderByDateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetBusinessServiceOrderByDateResponse)
	fc.Result = res
	return ec.marshalNGetBusinessServiceOrderByDateResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderByDateResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessServiceOrdersByEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessServiceOrdersByEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessServiceOrdersByEmail(rctx, args["input"].(model.GetBusinessServiceOrdersByEmailRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetBusinessServiceOrdersByEmailResponse)
	fc.Result = res
	return ec.marshalNGetBusinessServiceOrdersByEmailResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersByEmailResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompany(rctx, args["input"].(model.GetBusinessCompanyRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompany)
	fc.Result = res
	return ec.marshalNBusinessCompany2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompanies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompanies(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanies)
	fc.Result = res
	return ec.marshalNBusinessCompanies2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompaniesUnderCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCompaniesUnderCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompaniesUnderCategory(rctx, args["input"].(model.GetBusinessCompaniesUnderCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanies)
	fc.Result = res
	return ec.marshalNBusinessCompanies2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompanyServices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCompanyServices_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompanyServices(rctx, args["input"].(*model.GetBusinessCompanyServicesRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetBusinessCompanyServicesResponse)
	fc.Result = res
	return ec.marshalNgetBusinessCompanyServicesResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServicesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessOwnerCompanies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessOwnerCompanies_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessOwnerCompanies(rctx, args["input"].(*model.GetBusinessOwnerCompaniesRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetBusinessOwnerCompaniesResponse)
	fc.Result = res
	return ec.marshalNgetBusinessOwnerCompaniesResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessOwnerCompaniesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompanyOperationHourByDay(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCompanyOperationHourByDay_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompanyOperationHourByDay(rctx, args["input"].(*model.GetGetBusinessCompanyOperationHourByDayRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyOperationHourResponse)
	fc.Result = res
	return ec.marshalNbusinessCompanyOperationHourResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHourResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompanyOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCompanyOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompanyOperationHours(rctx, args["input"].(*model.GetBusinessCompanyOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyOperationHours)
	fc.Result = res
	return ec.marshalNBusinessCompanyOperationHours2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHours(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompanyServiceOperationHourByDay(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCompanyServiceOperationHourByDay_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompanyServiceOperationHourByDay(rctx, args["input"].(*model.GetGetBusinessCompanyServiceOperationHourByDayRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyServiceOperationHourResponse)
	fc.Result = res
	return ec.marshalNbusinessCompanyServiceOperationHourResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHourResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCompanyServiceOperationHours(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCompanyServiceOperationHours_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCompanyServiceOperationHours(rctx, args["input"].(*model.GetBusinessCompanyServiceOperationHoursRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyServiceOperationHours)
	fc.Result = res
	return ec.marshalNBusinessCompanyServiceOperationHours2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHours(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCategory(rctx, args["input"].(model.BusinessCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCategory)
	fc.Result = res
	return ec.marshalNBusinessCategory2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessCategory)
	fc.Result = res
	return ec.marshalNBusinessCategory2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessSubCategory(rctx, args["input"].(model.BusinessSubCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessSubCategory)
	fc.Result = res
	return ec.marshalNBusinessSubCategory2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessSubCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessSubCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessSubCategories)
	fc.Result = res
	return ec.marshalNBusinessSubCategories2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategories(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessSubCategoriesUnderCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessSubCategoriesUnderCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessSubCategoriesUnderCategory(rctx, args["input"].(*model.BusinessSubCategoriesUnderCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessSubCategories)
	fc.Result = res
	return ec.marshalNBusinessSubCategories2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategories(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessService(rctx, args["input"].(model.GetBusinessServiceRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessService)
	fc.Result = res
	return ec.marshalNBusinessService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessServices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessServices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessServices)
	fc.Result = res
	return ec.marshalNBusinessServices2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServices(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessServicesUnderSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessServicesUnderSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessServicesUnderSubCategory(rctx, args["input"].(*model.GetBusinessServicesUnderSubCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessServices)
	fc.Result = res
	return ec.marshalNBusinessServices2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServices(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCompanyService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCompanyService_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompanyService(rctx, args["input"].(model.GetCompanyServiceRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyService)
	fc.Result = res
	return ec.marshalNCompanyService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCompanyServices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompanyServices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyServices)
	fc.Result = res
	return ec.marshalNCompanyServices2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyServices(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCompanyServicesUnderSubCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCompanyServicesUnderSubCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompanyServicesUnderSubCategory(rctx, args["input"].(model.GetCompanyServicesUnderSubCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyServices)
	fc.Result = res
	return ec.marshalNCompanyServices2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyServices(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCompanyServicesUnderCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCompanyServicesUnderCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompanyServicesUnderCategory(rctx, args["input"].(*model.GetCompanyServicesUnderCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyServices)
	fc.Result = res
	return ec.marshalNCompanyServices2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyServices(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_retrieveTokenInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_retrieveTokenInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveTokenInfo(rctx, args["input"].(model.RetrieveTokenInfoRequst))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RetrieveTokenInfoResponse)
	fc.Result = res
	return ec.marshalNretrieveTokenInfoResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐRetrieveTokenInfoResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCustomerByEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCustomerByEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCustomerByEmail(rctx, args["input"].(model.GetCustomerByEmailRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetCustomerByEmailResponse)
	fc.Result = res
	return ec.marshalNGetCustomerByEmailResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerByEmailResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCustomerTokenInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCustomerTokenInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCustomerTokenInfo(rctx, args["input"].(model.GetCustomerTokenInfoRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetCustomerTokenInfoResponse)
	fc.Result = res
	return ec.marshalNGetCustomerTokenInfoResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerTokenInfoResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Token_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.Token) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Token",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Token_refreshToken(ctx context.Context, field graphql.CollectedField, obj *model.Token) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Token",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Token_expiresIn(ctx context.Context, field graphql.CollectedField, obj *model.Token) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Token",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Token_tokenType(ctx context.Context, field graphql.CollectedField, obj *model.Token) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Token",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateBusinessServiceOrderResponse_businessServiceOrder(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusinessServiceOrderResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UpdateBusinessServiceOrderResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessServiceOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessServiceOrder)
	fc.Result = res
	return ec.marshalNBusinessServiceOrder2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrder(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _businessCompanyOperationHourResponse_businessCompanyOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyOperationHourResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "businessCompanyOperationHourResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _businessCompanyService_companyServiceID(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "businessCompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNID2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _businessCompanyService_companyServiceName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "businessCompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServiceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _businessCompanyService_companyServiceDuration(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "businessCompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServiceDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _businessCompanyService_companyServicePrice(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyService) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "businessCompanyService",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyServicePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _businessCompanyServiceOperationHourResponse_businessCompanyServiceOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.BusinessCompanyServiceOperationHourResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "businessCompanyServiceOperationHourResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyServiceOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyServiceOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyServiceOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _createBusinessCompanyOperationHoursResponse_businessCompanyOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusinessCompanyOperationHoursResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "createBusinessCompanyOperationHoursResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _createBusinessCompanyServiceOperationHoursResponse_businessCompanyServiceOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusinessCompanyServiceOperationHoursResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "createBusinessCompanyServiceOperationHoursResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyServiceOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyServiceOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyServiceOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _createBusinessServiceResponse_businessService(ctx context.Context, field graphql.CollectedField, obj *model.CreateBusinessServiceResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "createBusinessServiceResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessService, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessService)
	fc.Result = res
	return ec.marshalNBusinessService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessService(ctx, field.Selections, res)
}

func (ec *executionContext) _createCompanyServiceResponse_companyService(ctx context.Context, field graphql.CollectedField, obj *model.CreateCompanyServiceResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "createCompanyServiceResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyService, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyService)
	fc.Result = res
	return ec.marshalNCompanyService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyService(ctx, field.Selections, res)
}

func (ec *executionContext) _deleteBusinessCompanyOperationHoursResponse_businessCompanyOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBusinessCompanyOperationHoursResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "deleteBusinessCompanyOperationHoursResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _deleteBusinessCompanyServiceOperationHoursResponse_businessCompanyServiceOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.DeleteBusinessCompanyServiceOperationHoursResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "deleteBusinessCompanyServiceOperationHoursResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyServiceOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyServiceOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyServiceOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _deleteCompanyServiceResponse_companyService(ctx context.Context, field graphql.CollectedField, obj *model.DeleteCompanyServiceResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "deleteCompanyServiceResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyService, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyService)
	fc.Result = res
	return ec.marshalNCompanyService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyService(ctx, field.Selections, res)
}

func (ec *executionContext) _generateTokenResponse_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.GenerateTokenResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "generateTokenResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _generateTokenResponse_refreshToken(ctx context.Context, field graphql.CollectedField, obj *model.GenerateTokenResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "generateTokenResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _generateTokenResponse_expiresIn(ctx context.Context, field graphql.CollectedField, obj *model.GenerateTokenResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "generateTokenResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _generateTokenResponse_tokenType(ctx context.Context, field graphql.CollectedField, obj *model.GenerateTokenResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "generateTokenResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessCompanyServicesResponse_businessCompanyService(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessCompanyServicesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "getBusinessCompanyServicesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyService, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.BusinessCompanyService)
	fc.Result = res
	return ec.marshalObusinessCompanyService2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessOwnerCompaniesResponse_companies(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessOwnerCompaniesResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "getBusinessOwnerCompaniesResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Companies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BusinessCompany)
	fc.Result = res
	return ec.marshalNBusinessCompany2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _retrieveTokenInfoResponse_email(ctx context.Context, field graphql.CollectedField, obj *model.RetrieveTokenInfoResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "retrieveTokenInfoResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _retrieveTokenInfoResponse_expiresAt(ctx context.Context, field graphql.CollectedField, obj *model.RetrieveTokenInfoResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "retrieveTokenInfoResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _retrieveTokenInfoResponse_issuedAt(ctx context.Context, field graphql.CollectedField, obj *model.RetrieveTokenInfoResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "retrieveTokenInfoResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssuedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _updateBusinessCompanyOperationHoursResponse_businessCompanyOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusinessCompanyOperationHoursResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "updateBusinessCompanyOperationHoursResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _updateBusinessCompanyServiceOperationHoursResponse_businessCompanyServiceOperationHour(ctx context.Context, field graphql.CollectedField, obj *model.UpdateBusinessCompanyServiceOperationHoursResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "updateBusinessCompanyServiceOperationHoursResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCompanyServiceOperationHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BusinessCompanyServiceOperationHour)
	fc.Result = res
	return ec.marshalNBusinessCompanyServiceOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHour(ctx, field.Selections, res)
}

func (ec *executionContext) _updateCompanyServiceResponse_companyService(ctx context.Context, field graphql.CollectedField, obj *model.UpdateCompanyServiceResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "updateCompanyServiceResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyService, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyService)
	fc.Result = res
	return ec.marshalNCompanyService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyService(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBusinessCategoryRequest(ctx context.Context, obj interface{}) (model.BusinessCategoryRequest, error) {
	var it model.BusinessCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCategoryID":
			var err error
			it.BusinessCategoryID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessCompanyImageUploadRequest(ctx context.Context, obj interface{}) (model.BusinessCompanyImageUploadRequest, error) {
	var it model.BusinessCompanyImageUploadRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bussinessCompanyID":
			var err error
			it.BussinessCompanyID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file":
			var err error
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessCompanyImagesUploadRequest(ctx context.Context, obj interface{}) (model.BusinessCompanyImagesUploadRequest, error) {
	var it model.BusinessCompanyImagesUploadRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bussinessCompanyID":
			var err error
			it.BussinessCompanyID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "files":
			var err error
			it.Files, err = ec.unmarshalNUploadFile2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUploadFileᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessSubCategoriesUnderCategoryRequest(ctx context.Context, obj interface{}) (model.BusinessSubCategoriesUnderCategoryRequest, error) {
	var it model.BusinessSubCategoriesUnderCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCategoryID":
			var err error
			it.BusinessCategoryID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessSubCategoryRequest(ctx context.Context, obj interface{}) (model.BusinessSubCategoryRequest, error) {
	var it model.BusinessSubCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessSubCategoryID":
			var err error
			it.BusinessSubCategoryID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateBusinessCompanyRequest(ctx context.Context, obj interface{}) (model.CreateBusinessCompanyRequest, error) {
	var it model.CreateBusinessCompanyRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyName":
			var err error
			it.BusinessCompanyName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessCompanyCategoryID":
			var err error
			it.BusinessCompanyCategoryID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateBusinessOwnerRequest(ctx context.Context, obj interface{}) (model.CreateBusinessOwnerRequest, error) {
	var it model.CreateBusinessOwnerRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessOwnerName":
			var err error
			it.BusinessOwnerName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessOwnerEmail":
			var err error
			it.BusinessOwnerEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessOwnerPassword":
			var err error
			it.BusinessOwnerPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessOwnerPhoneNumberPrefix":
			var err error
			it.BusinessOwnerPhoneNumberPrefix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessOwnerPhoneNumber":
			var err error
			it.BusinessOwnerPhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateBusinessServiceOrderRequest(ctx context.Context, obj interface{}) (model.CreateBusinessServiceOrderRequest, error) {
	var it model.CreateBusinessServiceOrderRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "clientID":
			var err error
			it.ClientID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error
			it.StartAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "prePaid":
			var err error
			it.PrePaid, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientFirstName":
			var err error
			it.ClientFirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientPhoneNumber":
			var err error
			it.ClientPhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientPhoneNumberPrefix":
			var err error
			it.ClientPhoneNumberPrefix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientCommentary":
			var err error
			it.ClientCommentary, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCustomerRequest(ctx context.Context, obj interface{}) (model.CreateCustomerRequest, error) {
	var it model.CreateCustomerRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "customerFirstName":
			var err error
			it.CustomerFirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerSecondName":
			var err error
			it.CustomerSecondName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerEmail":
			var err error
			it.CustomerEmail, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerPhoneNumberPrefix":
			var err error
			it.CustomerPhoneNumberPrefix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerPhoneNumber":
			var err error
			it.CustomerPhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerPassword":
			var err error
			it.CustomerPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCustomerTokenRequest(ctx context.Context, obj interface{}) (model.CreateCustomerTokenRequest, error) {
	var it model.CreateCustomerTokenRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteBusinessServiceOrderRequest(ctx context.Context, obj interface{}) (model.DeleteBusinessServiceOrderRequest, error) {
	var it model.DeleteBusinessServiceOrderRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderID":
			var err error
			it.OrderID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetBusinessServiceOrderByDateRequest(ctx context.Context, obj interface{}) (model.GetBusinessServiceOrderByDateRequest, error) {
	var it model.GetBusinessServiceOrderByDateRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error
			it.Date, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetBusinessServiceOrderRequest(ctx context.Context, obj interface{}) (model.GetBusinessServiceOrderRequest, error) {
	var it model.GetBusinessServiceOrderRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessServiceOrderID":
			var err error
			it.BusinessServiceOrderID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetBusinessServiceOrdersByEmailRequest(ctx context.Context, obj interface{}) (model.GetBusinessServiceOrdersByEmailRequest, error) {
	var it model.GetBusinessServiceOrdersByEmailRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pagination":
			var err error
			it.Pagination, err = ec.unmarshalNPaginationInput2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐPaginationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetBusinessServiceOrdersRequest(ctx context.Context, obj interface{}) (model.GetBusinessServiceOrdersRequest, error) {
	var it model.GetBusinessServiceOrdersRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetCompanyAvailableHoursByDateRequest(ctx context.Context, obj interface{}) (model.GetCompanyAvailableHoursByDateRequest, error) {
	var it model.GetCompanyAvailableHoursByDateRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error
			it.Date, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetCustomerByEmailRequest(ctx context.Context, obj interface{}) (model.GetCustomerByEmailRequest, error) {
	var it model.GetCustomerByEmailRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetCustomerTokenInfoRequest(ctx context.Context, obj interface{}) (model.GetCustomerTokenInfoRequest, error) {
	var it model.GetCustomerTokenInfoRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accessToken":
			var err error
			it.AccessToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (model.PaginationInput, error) {
	var it model.PaginationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error
			it.Count, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateBusinessServiceOrderRequest(ctx context.Context, obj interface{}) (model.UpdateBusinessServiceOrderRequest, error) {
	var it model.UpdateBusinessServiceOrderRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderID":
			var err error
			it.OrderID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "startAt":
			var err error
			it.StartAt, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "prePaid":
			var err error
			it.PrePaid, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientFirstName":
			var err error
			it.ClientFirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientPhoneNumber":
			var err error
			it.ClientPhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientPhoneNumberPrefix":
			var err error
			it.ClientPhoneNumberPrefix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientCommentary":
			var err error
			it.ClientCommentary, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUploadFile(ctx context.Context, obj interface{}) (model.UploadFile, error) {
	var it model.UploadFile
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file":
			var err error
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateBusinessCompanyOperationHoursRequest(ctx context.Context, obj interface{}) (model.CreateBusinessCompanyOperationHoursRequest, error) {
	var it model.CreateBusinessCompanyOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dayOfWeek":
			var err error
			it.DayOfWeek, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "openTime":
			var err error
			it.OpenTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "closeTime":
			var err error
			it.CloseTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateBusinessCompanyServiceOperationHoursRequest(ctx context.Context, obj interface{}) (model.CreateBusinessCompanyServiceOperationHoursRequest, error) {
	var it model.CreateBusinessCompanyServiceOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dayOfWeek":
			var err error
			it.DayOfWeek, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "openTime":
			var err error
			it.OpenTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "closeTime":
			var err error
			it.CloseTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateBusinessServiceRequest(ctx context.Context, obj interface{}) (model.CreateBusinessServiceRequest, error) {
	var it model.CreateBusinessServiceRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessServiceName":
			var err error
			it.BusinessServiceName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessServiceSubCategories":
			var err error
			it.BusinessServiceSubCategories, err = ec.unmarshalNInt2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCompanyServiceRequest(ctx context.Context, obj interface{}) (model.CreateCompanyServiceRequest, error) {
	var it model.CreateCompanyServiceRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companyServiceName":
			var err error
			it.CompanyServiceName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyServiceDuration":
			var err error
			it.CompanyServiceDuration, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyServicePrice":
			var err error
			it.CompanyServicePrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdeleteBusinessCompanyOperationHoursRequest(ctx context.Context, obj interface{}) (model.DeleteBusinessCompanyOperationHoursRequest, error) {
	var it model.DeleteBusinessCompanyOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companyOperationHourID":
			var err error
			it.CompanyOperationHourID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdeleteBusinessCompanyServiceOperationHoursRequest(ctx context.Context, obj interface{}) (model.DeleteBusinessCompanyServiceOperationHoursRequest, error) {
	var it model.DeleteBusinessCompanyServiceOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "operationHourID":
			var err error
			it.OperationHourID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdeleteCompanyServiceRequest(ctx context.Context, obj interface{}) (model.DeleteCompanyServiceRequest, error) {
	var it model.DeleteCompanyServiceRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companyServiceID":
			var err error
			it.CompanyServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgenerateTokenRequest(ctx context.Context, obj interface{}) (model.GenerateTokenRequest, error) {
	var it model.GenerateTokenRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessCompaniesUnderCategoryRequest(ctx context.Context, obj interface{}) (model.GetBusinessCompaniesUnderCategoryRequest, error) {
	var it model.GetBusinessCompaniesUnderCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "categoryID":
			var err error
			it.CategoryID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessCompanyOperationHoursRequest(ctx context.Context, obj interface{}) (model.GetBusinessCompanyOperationHoursRequest, error) {
	var it model.GetBusinessCompanyOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessCompanyRequest(ctx context.Context, obj interface{}) (model.GetBusinessCompanyRequest, error) {
	var it model.GetBusinessCompanyRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessCompanyServiceOperationHoursRequest(ctx context.Context, obj interface{}) (model.GetBusinessCompanyServiceOperationHoursRequest, error) {
	var it model.GetBusinessCompanyServiceOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "serviceID":
			var err error
			it.ServiceID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessCompanyServicesRequest(ctx context.Context, obj interface{}) (model.GetBusinessCompanyServicesRequest, error) {
	var it model.GetBusinessCompanyServicesRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessOwnerCompaniesRequest(ctx context.Context, obj interface{}) (model.GetBusinessOwnerCompaniesRequest, error) {
	var it model.GetBusinessOwnerCompaniesRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessServiceRequest(ctx context.Context, obj interface{}) (model.GetBusinessServiceRequest, error) {
	var it model.GetBusinessServiceRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetBusinessServicesUnderSubCategoryRequest(ctx context.Context, obj interface{}) (model.GetBusinessServicesUnderSubCategoryRequest, error) {
	var it model.GetBusinessServicesUnderSubCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "subCategoryID":
			var err error
			it.SubCategoryID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetCompanyServiceRequest(ctx context.Context, obj interface{}) (model.GetCompanyServiceRequest, error) {
	var it model.GetCompanyServiceRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companyServiceID":
			var err error
			it.CompanyServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetCompanyServicesUnderCategoryRequest(ctx context.Context, obj interface{}) (model.GetCompanyServicesUnderCategoryRequest, error) {
	var it model.GetCompanyServicesUnderCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "categoryID":
			var err error
			it.CategoryID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetCompanyServicesUnderSubCategoryRequest(ctx context.Context, obj interface{}) (model.GetCompanyServicesUnderSubCategoryRequest, error) {
	var it model.GetCompanyServicesUnderSubCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "subCategoryID":
			var err error
			it.SubCategoryID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetGetBusinessCompanyOperationHourByDayRequest(ctx context.Context, obj interface{}) (model.GetGetBusinessCompanyOperationHourByDayRequest, error) {
	var it model.GetGetBusinessCompanyOperationHourByDayRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dayOfWeek":
			var err error
			it.DayOfWeek, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetGetBusinessCompanyServiceOperationHourByDayRequest(ctx context.Context, obj interface{}) (model.GetGetBusinessCompanyServiceOperationHourByDayRequest, error) {
	var it model.GetGetBusinessCompanyServiceOperationHourByDayRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "serviceID":
			var err error
			it.ServiceID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dayOfWeek":
			var err error
			it.DayOfWeek, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputretrieveTokenInfoRequst(ctx context.Context, obj interface{}) (model.RetrieveTokenInfoRequst, error) {
	var it model.RetrieveTokenInfoRequst
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "accessToken":
			var err error
			it.AccessToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateBusinessCompanyOperationHoursRequest(ctx context.Context, obj interface{}) (model.UpdateBusinessCompanyOperationHoursRequest, error) {
	var it model.UpdateBusinessCompanyOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companyOperationHourID":
			var err error
			it.CompanyOperationHourID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dayOfWeek":
			var err error
			it.DayOfWeek, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "openTime":
			var err error
			it.OpenTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "closeTime":
			var err error
			it.CloseTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateBusinessCompanyServiceOperationHoursRequest(ctx context.Context, obj interface{}) (model.UpdateBusinessCompanyServiceOperationHoursRequest, error) {
	var it model.UpdateBusinessCompanyServiceOperationHoursRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "operationHourID":
			var err error
			it.OperationHourID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dayOfWeek":
			var err error
			it.DayOfWeek, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "openTime":
			var err error
			it.OpenTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "closeTime":
			var err error
			it.CloseTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateCompanyServiceRequest(ctx context.Context, obj interface{}) (model.UpdateCompanyServiceRequest, error) {
	var it model.UpdateCompanyServiceRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "companyServiceID":
			var err error
			it.CompanyServiceID, err = ec.unmarshalNID2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyServiceName":
			var err error
			it.CompanyServiceName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyServiceDuration":
			var err error
			it.CompanyServiceDuration, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyServicePrice":
			var err error
			it.CompanyServicePrice, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessServiceID":
			var err error
			it.BusinessServiceID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessCompanyID":
			var err error
			it.BusinessCompanyID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var businessCategoryImplementors = []string{"BusinessCategory"}

func (ec *executionContext) _BusinessCategory(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCategory")
		case "businessCategoryID":
			out.Values[i] = ec._BusinessCategory_businessCategoryID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessCategoryName":
			out.Values[i] = ec._BusinessCategory_businessCategoryName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompaniesImplementors = []string{"BusinessCompanies"}

func (ec *executionContext) _BusinessCompanies(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanies) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompaniesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCompanies")
		case "businessCompanies":
			out.Values[i] = ec._BusinessCompanies_businessCompanies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyImplementors = []string{"BusinessCompany"}

func (ec *executionContext) _BusinessCompany(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompany) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCompany")
		case "businessCompanyID":
			out.Values[i] = ec._BusinessCompany_businessCompanyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessCompanyName":
			out.Values[i] = ec._BusinessCompany_businessCompanyName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessCompanyCategoryID":
			out.Values[i] = ec._BusinessCompany_businessCompanyCategoryID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyOperationHourImplementors = []string{"BusinessCompanyOperationHour"}

func (ec *executionContext) _BusinessCompanyOperationHour(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanyOperationHour) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyOperationHourImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCompanyOperationHour")
		case "companyOperationHourID":
			out.Values[i] = ec._BusinessCompanyOperationHour_companyOperationHourID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessCompanyID":
			out.Values[i] = ec._BusinessCompanyOperationHour_businessCompanyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dayOfWeek":
			out.Values[i] = ec._BusinessCompanyOperationHour_dayOfWeek(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openTime":
			out.Values[i] = ec._BusinessCompanyOperationHour_openTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closeTime":
			out.Values[i] = ec._BusinessCompanyOperationHour_closeTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyOperationHoursImplementors = []string{"BusinessCompanyOperationHours"}

func (ec *executionContext) _BusinessCompanyOperationHours(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanyOperationHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyOperationHoursImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCompanyOperationHours")
		case "businessCompanyOperationHour":
			out.Values[i] = ec._BusinessCompanyOperationHours_businessCompanyOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyServiceOperationHourImplementors = []string{"BusinessCompanyServiceOperationHour"}

func (ec *executionContext) _BusinessCompanyServiceOperationHour(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanyServiceOperationHour) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyServiceOperationHourImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCompanyServiceOperationHour")
		case "serviceOperationHourID":
			out.Values[i] = ec._BusinessCompanyServiceOperationHour_serviceOperationHourID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessCompanyID":
			out.Values[i] = ec._BusinessCompanyServiceOperationHour_businessCompanyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessServiceID":
			out.Values[i] = ec._BusinessCompanyServiceOperationHour_businessServiceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dayOfWeek":
			out.Values[i] = ec._BusinessCompanyServiceOperationHour_dayOfWeek(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openTime":
			out.Values[i] = ec._BusinessCompanyServiceOperationHour_openTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closeTime":
			out.Values[i] = ec._BusinessCompanyServiceOperationHour_closeTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyServiceOperationHoursImplementors = []string{"BusinessCompanyServiceOperationHours"}

func (ec *executionContext) _BusinessCompanyServiceOperationHours(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanyServiceOperationHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyServiceOperationHoursImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCompanyServiceOperationHours")
		case "businessCompanyServiceOperationHour":
			out.Values[i] = ec._BusinessCompanyServiceOperationHours_businessCompanyServiceOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessOwnerImplementors = []string{"BusinessOwner"}

func (ec *executionContext) _BusinessOwner(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessOwner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessOwnerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessOwner")
		case "businessOwnerID":
			out.Values[i] = ec._BusinessOwner_businessOwnerID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessOwnerName":
			out.Values[i] = ec._BusinessOwner_businessOwnerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessOwnerEmail":
			out.Values[i] = ec._BusinessOwner_businessOwnerEmail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessOwnerPhoneNumberPrefix":
			out.Values[i] = ec._BusinessOwner_businessOwnerPhoneNumberPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessOwnerPhoneNumber":
			out.Values[i] = ec._BusinessOwner_businessOwnerPhoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessServiceImplementors = []string{"BusinessService"}

func (ec *executionContext) _BusinessService(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessService) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessService")
		case "businessServiceID":
			out.Values[i] = ec._BusinessService_businessServiceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessServiceName":
			out.Values[i] = ec._BusinessService_businessServiceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subCategories":
			out.Values[i] = ec._BusinessService_subCategories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessServiceOrderImplementors = []string{"BusinessServiceOrder"}

func (ec *executionContext) _BusinessServiceOrder(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessServiceOrder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessServiceOrderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessServiceOrder")
		case "businessServiceOrderID":
			out.Values[i] = ec._BusinessServiceOrder_businessServiceOrderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientID":
			out.Values[i] = ec._BusinessServiceOrder_clientID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessServiceID":
			out.Values[i] = ec._BusinessServiceOrder_businessServiceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessServiceName":
			out.Values[i] = ec._BusinessServiceOrder_businessServiceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessCompanyName":
			out.Values[i] = ec._BusinessServiceOrder_businessCompanyName(ctx, field, obj)
		case "price":
			out.Values[i] = ec._BusinessServiceOrder_price(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._BusinessServiceOrder_startAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endAt":
			out.Values[i] = ec._BusinessServiceOrder_endAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._BusinessServiceOrder_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "prePaid":
			out.Values[i] = ec._BusinessServiceOrder_prePaid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientFirstName":
			out.Values[i] = ec._BusinessServiceOrder_clientFirstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientPhoneNumber":
			out.Values[i] = ec._BusinessServiceOrder_clientPhoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientPhoneNumberPrefix":
			out.Values[i] = ec._BusinessServiceOrder_clientPhoneNumberPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientCommentary":
			out.Values[i] = ec._BusinessServiceOrder_clientCommentary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessServicesImplementors = []string{"BusinessServices"}

func (ec *executionContext) _BusinessServices(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessServices) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessServicesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessServices")
		case "businessServices":
			out.Values[i] = ec._BusinessServices_businessServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessSubCategoriesImplementors = []string{"BusinessSubCategories"}

func (ec *executionContext) _BusinessSubCategories(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessSubCategories) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessSubCategoriesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessSubCategories")
		case "businessSubCategories":
			out.Values[i] = ec._BusinessSubCategories_businessSubCategories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessSubCategoryImplementors = []string{"BusinessSubCategory"}

func (ec *executionContext) _BusinessSubCategory(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessSubCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessSubCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessSubCategory")
		case "businessSubCategoryID":
			out.Values[i] = ec._BusinessSubCategory_businessSubCategoryID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessSubCategoryName":
			out.Values[i] = ec._BusinessSubCategory_businessSubCategoryName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessCategoryID":
			out.Values[i] = ec._BusinessSubCategory_businessCategoryID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyServiceImplementors = []string{"CompanyService"}

func (ec *executionContext) _CompanyService(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyService) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyService")
		case "companyServiceID":
			out.Values[i] = ec._CompanyService_companyServiceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "companyServiceName":
			out.Values[i] = ec._CompanyService_companyServiceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "companyServiceDuration":
			out.Values[i] = ec._CompanyService_companyServiceDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "companyServicePrice":
			out.Values[i] = ec._CompanyService_companyServicePrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessServiceID":
			out.Values[i] = ec._CompanyService_businessServiceID(ctx, field, obj)
		case "businessServiceName":
			out.Values[i] = ec._CompanyService_businessServiceName(ctx, field, obj)
		case "businessCompanyID":
			out.Values[i] = ec._CompanyService_businessCompanyID(ctx, field, obj)
		case "businessCompanyName":
			out.Values[i] = ec._CompanyService_businessCompanyName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyServicesImplementors = []string{"CompanyServices"}

func (ec *executionContext) _CompanyServices(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyServices) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyServicesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyServices")
		case "companyServices":
			out.Values[i] = ec._CompanyServices_companyServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createBusinessOwnerResponseImplementors = []string{"CreateBusinessOwnerResponse"}

func (ec *executionContext) _CreateBusinessOwnerResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBusinessOwnerResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBusinessOwnerResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateBusinessOwnerResponse")
		case "businessOwner":
			out.Values[i] = ec._CreateBusinessOwnerResponse_businessOwner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":
			out.Values[i] = ec._CreateBusinessOwnerResponse_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createBusinessServiceOrderResponseImplementors = []string{"CreateBusinessServiceOrderResponse"}

func (ec *executionContext) _CreateBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBusinessServiceOrderResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBusinessServiceOrderResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateBusinessServiceOrderResponse")
		case "businessServiceOrder":
			out.Values[i] = ec._CreateBusinessServiceOrderResponse_businessServiceOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCustomerResponseImplementors = []string{"CreateCustomerResponse"}

func (ec *executionContext) _CreateCustomerResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCustomerResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCustomerResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCustomerResponse")
		case "customer":
			out.Values[i] = ec._CreateCustomerResponse_customer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":
			out.Values[i] = ec._CreateCustomerResponse_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCustomerTokenResponseImplementors = []string{"CreateCustomerTokenResponse"}

func (ec *executionContext) _CreateCustomerTokenResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCustomerTokenResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCustomerTokenResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCustomerTokenResponse")
		case "token":
			out.Values[i] = ec._CreateCustomerTokenResponse_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerImplementors = []string{"Customer"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *model.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "customerID":
			out.Values[i] = ec._Customer_customerID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerFirstName":
			out.Values[i] = ec._Customer_customerFirstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerSecondName":
			out.Values[i] = ec._Customer_customerSecondName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerEmail":
			out.Values[i] = ec._Customer_customerEmail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerPhoneNumberPrefix":
			out.Values[i] = ec._Customer_customerPhoneNumberPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerPhoneNumber":
			out.Values[i] = ec._Customer_customerPhoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Customer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteBusinessServiceOrderResponseImplementors = []string{"DeleteBusinessServiceOrderResponse"}

func (ec *executionContext) _DeleteBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteBusinessServiceOrderResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteBusinessServiceOrderResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteBusinessServiceOrderResponse")
		case "businessServiceOrder":
			out.Values[i] = ec._DeleteBusinessServiceOrderResponse_businessServiceOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileImplementors = []string{"File"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *model.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "id":
			out.Values[i] = ec._File_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._File_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._File_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contentType":
			out.Values[i] = ec._File_contentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessServiceOrderByDateResponseImplementors = []string{"GetBusinessServiceOrderByDateResponse"}

func (ec *executionContext) _GetBusinessServiceOrderByDateResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessServiceOrderByDateResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessServiceOrderByDateResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBusinessServiceOrderByDateResponse")
		case "businessServicesOrders":
			out.Values[i] = ec._GetBusinessServiceOrderByDateResponse_businessServicesOrders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessServiceOrderResponseImplementors = []string{"GetBusinessServiceOrderResponse"}

func (ec *executionContext) _GetBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessServiceOrderResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessServiceOrderResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBusinessServiceOrderResponse")
		case "businessServiceOrder":
			out.Values[i] = ec._GetBusinessServiceOrderResponse_businessServiceOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessServiceOrdersByEmailResponseImplementors = []string{"GetBusinessServiceOrdersByEmailResponse"}

func (ec *executionContext) _GetBusinessServiceOrdersByEmailResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessServiceOrdersByEmailResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessServiceOrdersByEmailResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBusinessServiceOrdersByEmailResponse")
		case "businessServicesOrders":
			out.Values[i] = ec._GetBusinessServiceOrdersByEmailResponse_businessServicesOrders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":
			out.Values[i] = ec._GetBusinessServiceOrdersByEmailResponse_pagination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessServiceOrdersResponseImplementors = []string{"GetBusinessServiceOrdersResponse"}

func (ec *executionContext) _GetBusinessServiceOrdersResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessServiceOrdersResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessServiceOrdersResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBusinessServiceOrdersResponse")
		case "businessServicesOrders":
			out.Values[i] = ec._GetBusinessServiceOrdersResponse_businessServicesOrders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getCompanyAvailableHoursByDateResponseImplementors = []string{"GetCompanyAvailableHoursByDateResponse"}

func (ec *executionContext) _GetCompanyAvailableHoursByDateResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetCompanyAvailableHoursByDateResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getCompanyAvailableHoursByDateResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetCompanyAvailableHoursByDateResponse")
		case "availableHour":
			out.Values[i] = ec._GetCompanyAvailableHoursByDateResponse_availableHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getCustomerByEmailResponseImplementors = []string{"GetCustomerByEmailResponse"}

func (ec *executionContext) _GetCustomerByEmailResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetCustomerByEmailResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getCustomerByEmailResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetCustomerByEmailResponse")
		case "customer":
			out.Values[i] = ec._GetCustomerByEmailResponse_customer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getCustomerTokenInfoResponseImplementors = []string{"GetCustomerTokenInfoResponse"}

func (ec *executionContext) _GetCustomerTokenInfoResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetCustomerTokenInfoResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getCustomerTokenInfoResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetCustomerTokenInfoResponse")
		case "email":
			out.Values[i] = ec._GetCustomerTokenInfoResponse_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issuedAt":
			out.Values[i] = ec._GetCustomerTokenInfoResponse_issuedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._GetCustomerTokenInfoResponse_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "singleUpload":
			out.Values[i] = ec._Mutation_singleUpload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "BusinessCompanyImageUpload":
			out.Values[i] = ec._Mutation_BusinessCompanyImageUpload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "BusinessCompanyImagesUpload":
			out.Values[i] = ec._Mutation_BusinessCompanyImagesUpload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UpdateBusinessServiceOrder":
			out.Values[i] = ec._Mutation_UpdateBusinessServiceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteBusinessServiceOrder":
			out.Values[i] = ec._Mutation_DeleteBusinessServiceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCustomer":
			out.Values[i] = ec._Mutation_createCustomer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCustomerToken":
			out.Values[i] = ec._Mutation_createCustomerToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBusinessServiceOrder":
			out.Values[i] = ec._Mutation_createBusinessServiceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBusinessCompany":
			out.Values[i] = ec._Mutation_createBusinessCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBusinessOwner":
			out.Values[i] = ec._Mutation_createBusinessOwner(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBusinessService":
			out.Values[i] = ec._Mutation_createBusinessService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCompanyService":
			out.Values[i] = ec._Mutation_createCompanyService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCompanyService":
			out.Values[i] = ec._Mutation_updateCompanyService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCompanyService":
			out.Values[i] = ec._Mutation_deleteCompanyService(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBusinessCompanyOperationHours":
			out.Values[i] = ec._Mutation_createBusinessCompanyOperationHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBusinessCompanyOperationHours":
			out.Values[i] = ec._Mutation_updateBusinessCompanyOperationHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBusinessCompanyOperationHours":
			out.Values[i] = ec._Mutation_deleteBusinessCompanyOperationHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBusinessCompanyServiceOperationHours":
			out.Values[i] = ec._Mutation_createBusinessCompanyServiceOperationHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBusinessCompanyServiceOperationHours":
			out.Values[i] = ec._Mutation_updateBusinessCompanyServiceOperationHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBusinessCompanyServiceOperationHours":
			out.Values[i] = ec._Mutation_deleteBusinessCompanyServiceOperationHours(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "generateToken":
			out.Values[i] = ec._Mutation_generateToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginationImplementors = []string{"Pagination"}

func (ec *executionContext) _Pagination(ctx context.Context, sel ast.SelectionSet, obj *model.Pagination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pagination")
		case "limit":
			out.Values[i] = ec._Pagination_limit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "offset":
			out.Values[i] = ec._Pagination_offset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._Pagination_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getBusinessServiceOrder":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessServiceOrder(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessServiceOrders":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessServiceOrders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCompanyAvailableHoursByDate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompanyAvailableHoursByDate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessServiceOrderByDate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessServiceOrderByDate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessServiceOrdersByEmail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessServiceOrdersByEmail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompany":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompany(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompanies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompanies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompaniesUnderCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompaniesUnderCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompanyServices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompanyServices(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessOwnerCompanies":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessOwnerCompanies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompanyOperationHourByDay":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompanyOperationHourByDay(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompanyOperationHours":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompanyOperationHours(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompanyServiceOperationHourByDay":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompanyServiceOperationHourByDay(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCompanyServiceOperationHours":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCompanyServiceOperationHours(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessSubCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessSubCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessSubCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessSubCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessSubCategoriesUnderCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessSubCategoriesUnderCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessService":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessService(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessServices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessServices(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBusinessServicesUnderSubCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessServicesUnderSubCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCompanyService":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompanyService(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCompanyServices":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompanyServices(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCompanyServicesUnderSubCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompanyServicesUnderSubCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCompanyServicesUnderCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompanyServicesUnderCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "retrieveTokenInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveTokenInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCustomerByEmail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCustomerByEmail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCustomerTokenInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCustomerTokenInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tokenImplementors = []string{"Token"}

func (ec *executionContext) _Token(ctx context.Context, sel ast.SelectionSet, obj *model.Token) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tokenImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Token")
		case "accessToken":
			out.Values[i] = ec._Token_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._Token_refreshToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiresIn":
			out.Values[i] = ec._Token_expiresIn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tokenType":
			out.Values[i] = ec._Token_tokenType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBusinessServiceOrderResponseImplementors = []string{"UpdateBusinessServiceOrderResponse"}

func (ec *executionContext) _UpdateBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateBusinessServiceOrderResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBusinessServiceOrderResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateBusinessServiceOrderResponse")
		case "businessServiceOrder":
			out.Values[i] = ec._UpdateBusinessServiceOrderResponse_businessServiceOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyOperationHourResponseImplementors = []string{"businessCompanyOperationHourResponse"}

func (ec *executionContext) _businessCompanyOperationHourResponse(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanyOperationHourResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyOperationHourResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("businessCompanyOperationHourResponse")
		case "businessCompanyOperationHour":
			out.Values[i] = ec._businessCompanyOperationHourResponse_businessCompanyOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyServiceImplementors = []string{"businessCompanyService"}

func (ec *executionContext) _businessCompanyService(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanyService) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("businessCompanyService")
		case "companyServiceID":
			out.Values[i] = ec._businessCompanyService_companyServiceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "companyServiceName":
			out.Values[i] = ec._businessCompanyService_companyServiceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "companyServiceDuration":
			out.Values[i] = ec._businessCompanyService_companyServiceDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "companyServicePrice":
			out.Values[i] = ec._businessCompanyService_companyServicePrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessCompanyServiceOperationHourResponseImplementors = []string{"businessCompanyServiceOperationHourResponse"}

func (ec *executionContext) _businessCompanyServiceOperationHourResponse(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessCompanyServiceOperationHourResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCompanyServiceOperationHourResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("businessCompanyServiceOperationHourResponse")
		case "businessCompanyServiceOperationHour":
			out.Values[i] = ec._businessCompanyServiceOperationHourResponse_businessCompanyServiceOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createBusinessCompanyOperationHoursResponseImplementors = []string{"createBusinessCompanyOperationHoursResponse"}

func (ec *executionContext) _createBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBusinessCompanyOperationHoursResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("createBusinessCompanyOperationHoursResponse")
		case "businessCompanyOperationHour":
			out.Values[i] = ec._createBusinessCompanyOperationHoursResponse_businessCompanyOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createBusinessCompanyServiceOperationHoursResponseImplementors = []string{"createBusinessCompanyServiceOperationHoursResponse"}

func (ec *executionContext) _createBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBusinessCompanyServiceOperationHoursResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("createBusinessCompanyServiceOperationHoursResponse")
		case "businessCompanyServiceOperationHour":
			out.Values[i] = ec._createBusinessCompanyServiceOperationHoursResponse_businessCompanyServiceOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createBusinessServiceResponseImplementors = []string{"createBusinessServiceResponse"}

func (ec *executionContext) _createBusinessServiceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBusinessServiceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBusinessServiceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("createBusinessServiceResponse")
		case "businessService":
			out.Values[i] = ec._createBusinessServiceResponse_businessService(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createCompanyServiceResponseImplementors = []string{"createCompanyServiceResponse"}

func (ec *executionContext) _createCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCompanyServiceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCompanyServiceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("createCompanyServiceResponse")
		case "companyService":
			out.Values[i] = ec._createCompanyServiceResponse_companyService(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteBusinessCompanyOperationHoursResponseImplementors = []string{"deleteBusinessCompanyOperationHoursResponse"}

func (ec *executionContext) _deleteBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteBusinessCompanyOperationHoursResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("deleteBusinessCompanyOperationHoursResponse")
		case "businessCompanyOperationHour":
			out.Values[i] = ec._deleteBusinessCompanyOperationHoursResponse_businessCompanyOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteBusinessCompanyServiceOperationHoursResponseImplementors = []string{"deleteBusinessCompanyServiceOperationHoursResponse"}

func (ec *executionContext) _deleteBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteBusinessCompanyServiceOperationHoursResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("deleteBusinessCompanyServiceOperationHoursResponse")
		case "businessCompanyServiceOperationHour":
			out.Values[i] = ec._deleteBusinessCompanyServiceOperationHoursResponse_businessCompanyServiceOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteCompanyServiceResponseImplementors = []string{"deleteCompanyServiceResponse"}

func (ec *executionContext) _deleteCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteCompanyServiceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteCompanyServiceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("deleteCompanyServiceResponse")
		case "companyService":
			out.Values[i] = ec._deleteCompanyServiceResponse_companyService(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var generateTokenResponseImplementors = []string{"generateTokenResponse"}

func (ec *executionContext) _generateTokenResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GenerateTokenResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, generateTokenResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("generateTokenResponse")
		case "accessToken":
			out.Values[i] = ec._generateTokenResponse_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._generateTokenResponse_refreshToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiresIn":
			out.Values[i] = ec._generateTokenResponse_expiresIn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tokenType":
			out.Values[i] = ec._generateTokenResponse_tokenType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessCompanyServicesResponseImplementors = []string{"getBusinessCompanyServicesResponse"}

func (ec *executionContext) _getBusinessCompanyServicesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessCompanyServicesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessCompanyServicesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getBusinessCompanyServicesResponse")
		case "businessCompanyService":
			out.Values[i] = ec._getBusinessCompanyServicesResponse_businessCompanyService(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessOwnerCompaniesResponseImplementors = []string{"getBusinessOwnerCompaniesResponse"}

func (ec *executionContext) _getBusinessOwnerCompaniesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessOwnerCompaniesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessOwnerCompaniesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getBusinessOwnerCompaniesResponse")
		case "companies":
			out.Values[i] = ec._getBusinessOwnerCompaniesResponse_companies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var retrieveTokenInfoResponseImplementors = []string{"retrieveTokenInfoResponse"}

func (ec *executionContext) _retrieveTokenInfoResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RetrieveTokenInfoResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, retrieveTokenInfoResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("retrieveTokenInfoResponse")
		case "email":
			out.Values[i] = ec._retrieveTokenInfoResponse_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._retrieveTokenInfoResponse_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issuedAt":
			out.Values[i] = ec._retrieveTokenInfoResponse_issuedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBusinessCompanyOperationHoursResponseImplementors = []string{"updateBusinessCompanyOperationHoursResponse"}

func (ec *executionContext) _updateBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBusinessCompanyOperationHoursResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("updateBusinessCompanyOperationHoursResponse")
		case "businessCompanyOperationHour":
			out.Values[i] = ec._updateBusinessCompanyOperationHoursResponse_businessCompanyOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateBusinessCompanyServiceOperationHoursResponseImplementors = []string{"updateBusinessCompanyServiceOperationHoursResponse"}

func (ec *executionContext) _updateBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateBusinessCompanyServiceOperationHoursResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("updateBusinessCompanyServiceOperationHoursResponse")
		case "businessCompanyServiceOperationHour":
			out.Values[i] = ec._updateBusinessCompanyServiceOperationHoursResponse_businessCompanyServiceOperationHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateCompanyServiceResponseImplementors = []string{"updateCompanyServiceResponse"}

func (ec *executionContext) _updateCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateCompanyServiceResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateCompanyServiceResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("updateCompanyServiceResponse")
		case "companyService":
			out.Values[i] = ec._updateCompanyServiceResponse_companyService(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBusinessCategory2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategory(ctx context.Context, sel ast.SelectionSet, v model.BusinessCategory) graphql.Marshaler {
	return ec._BusinessCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessCategory2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessCategory2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessCategory2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategory(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBusinessCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCategoryRequest(ctx context.Context, v interface{}) (model.BusinessCategoryRequest, error) {
	return ec.unmarshalInputBusinessCategoryRequest(ctx, v)
}

func (ec *executionContext) marshalNBusinessCompanies2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanies(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanies) graphql.Marshaler {
	return ec._BusinessCompanies(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessCompanies2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanies(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompanies) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessCompanies(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessCompany2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompany(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompany) graphql.Marshaler {
	return ec._BusinessCompany(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessCompany2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessCompany) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessCompany2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessCompany2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompany(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompany) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessCompany(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBusinessCompanyImageUploadRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyImageUploadRequest(ctx context.Context, v interface{}) (model.BusinessCompanyImageUploadRequest, error) {
	return ec.unmarshalInputBusinessCompanyImageUploadRequest(ctx, v)
}

func (ec *executionContext) unmarshalNBusinessCompanyImagesUploadRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyImagesUploadRequest(ctx context.Context, v interface{}) (model.BusinessCompanyImagesUploadRequest, error) {
	return ec.unmarshalInputBusinessCompanyImagesUploadRequest(ctx, v)
}

func (ec *executionContext) marshalNBusinessCompanyOperationHour2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHour(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanyOperationHour) graphql.Marshaler {
	return ec._BusinessCompanyOperationHour(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessCompanyOperationHour2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHourᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessCompanyOperationHour) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessCompanyOperationHour2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHour(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessCompanyOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHour(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompanyOperationHour) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessCompanyOperationHour(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessCompanyOperationHours2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHours(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanyOperationHours) graphql.Marshaler {
	return ec._BusinessCompanyOperationHours(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessCompanyOperationHours2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHours(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompanyOperationHours) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessCompanyOperationHours(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessCompanyServiceOperationHour2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHour(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanyServiceOperationHour) graphql.Marshaler {
	return ec._BusinessCompanyServiceOperationHour(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessCompanyServiceOperationHour2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHourᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessCompanyServiceOperationHour) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessCompanyServiceOperationHour2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHour(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessCompanyServiceOperationHour2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHour(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompanyServiceOperationHour) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessCompanyServiceOperationHour(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessCompanyServiceOperationHours2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHours(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanyServiceOperationHours) graphql.Marshaler {
	return ec._BusinessCompanyServiceOperationHours(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessCompanyServiceOperationHours2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHours(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompanyServiceOperationHours) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessCompanyServiceOperationHours(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessOwner2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessOwner(ctx context.Context, sel ast.SelectionSet, v model.BusinessOwner) graphql.Marshaler {
	return ec._BusinessOwner(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessOwner2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessOwner(ctx context.Context, sel ast.SelectionSet, v *model.BusinessOwner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessOwner(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessService2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessService(ctx context.Context, sel ast.SelectionSet, v model.BusinessService) graphql.Marshaler {
	return ec._BusinessService(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessService2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessService) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessService2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessService(ctx context.Context, sel ast.SelectionSet, v *model.BusinessService) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessService(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessServiceOrder2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrder(ctx context.Context, sel ast.SelectionSet, v model.BusinessServiceOrder) graphql.Marshaler {
	return ec._BusinessServiceOrder(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessServiceOrder2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrderᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessServiceOrder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessServiceOrder2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessServiceOrder2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServiceOrder(ctx context.Context, sel ast.SelectionSet, v *model.BusinessServiceOrder) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessServiceOrder(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessServices2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServices(ctx context.Context, sel ast.SelectionSet, v model.BusinessServices) graphql.Marshaler {
	return ec._BusinessServices(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessServices2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessServices(ctx context.Context, sel ast.SelectionSet, v *model.BusinessServices) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessServices(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessSubCategories2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategories(ctx context.Context, sel ast.SelectionSet, v model.BusinessSubCategories) graphql.Marshaler {
	return ec._BusinessSubCategories(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessSubCategories2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategories(ctx context.Context, sel ast.SelectionSet, v *model.BusinessSubCategories) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessSubCategories(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessSubCategory2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategory(ctx context.Context, sel ast.SelectionSet, v model.BusinessSubCategory) graphql.Marshaler {
	return ec._BusinessSubCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessSubCategory2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessSubCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBusinessSubCategory2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBusinessSubCategory2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategory(ctx context.Context, sel ast.SelectionSet, v *model.BusinessSubCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessSubCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBusinessSubCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoryRequest(ctx context.Context, v interface{}) (model.BusinessSubCategoryRequest, error) {
	return ec.unmarshalInputBusinessSubCategoryRequest(ctx, v)
}

func (ec *executionContext) marshalNCompanyService2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyService(ctx context.Context, sel ast.SelectionSet, v model.CompanyService) graphql.Marshaler {
	return ec._CompanyService(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyService2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyServiceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CompanyService) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompanyService2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCompanyService2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyService(ctx context.Context, sel ast.SelectionSet, v *model.CompanyService) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompanyService(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyServices2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyServices(ctx context.Context, sel ast.SelectionSet, v model.CompanyServices) graphql.Marshaler {
	return ec._CompanyServices(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyServices2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCompanyServices(ctx context.Context, sel ast.SelectionSet, v *model.CompanyServices) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompanyServices(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateBusinessCompanyRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyRequest(ctx context.Context, v interface{}) (model.CreateBusinessCompanyRequest, error) {
	return ec.unmarshalInputCreateBusinessCompanyRequest(ctx, v)
}

func (ec *executionContext) unmarshalNCreateBusinessOwnerRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessOwnerRequest(ctx context.Context, v interface{}) (model.CreateBusinessOwnerRequest, error) {
	return ec.unmarshalInputCreateBusinessOwnerRequest(ctx, v)
}

func (ec *executionContext) marshalNCreateBusinessOwnerResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessOwnerResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateBusinessOwnerResponse) graphql.Marshaler {
	return ec._CreateBusinessOwnerResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateBusinessOwnerResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessOwnerResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateBusinessOwnerResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateBusinessOwnerResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceOrderRequest(ctx context.Context, v interface{}) (model.CreateBusinessServiceOrderRequest, error) {
	return ec.unmarshalInputCreateBusinessServiceOrderRequest(ctx, v)
}

func (ec *executionContext) marshalNCreateBusinessServiceOrderResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateBusinessServiceOrderResponse) graphql.Marshaler {
	return ec._CreateBusinessServiceOrderResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateBusinessServiceOrderResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateBusinessServiceOrderResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCustomerRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerRequest(ctx context.Context, v interface{}) (model.CreateCustomerRequest, error) {
	return ec.unmarshalInputCreateCustomerRequest(ctx, v)
}

func (ec *executionContext) marshalNCreateCustomerResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateCustomerResponse) graphql.Marshaler {
	return ec._CreateCustomerResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateCustomerResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateCustomerResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateCustomerResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCustomerTokenRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerTokenRequest(ctx context.Context, v interface{}) (model.CreateCustomerTokenRequest, error) {
	return ec.unmarshalInputCreateCustomerTokenRequest(ctx, v)
}

func (ec *executionContext) marshalNCreateCustomerTokenResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerTokenResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateCustomerTokenResponse) graphql.Marshaler {
	return ec._CreateCustomerTokenResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateCustomerTokenResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCustomerTokenResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateCustomerTokenResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateCustomerTokenResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomer2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCustomer(ctx context.Context, sel ast.SelectionSet, v model.Customer) graphql.Marshaler {
	return ec._Customer(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomer2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCustomer(ctx context.Context, sel ast.SelectionSet, v *model.Customer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Customer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessServiceOrderRequest(ctx context.Context, v interface{}) (model.DeleteBusinessServiceOrderRequest, error) {
	return ec.unmarshalInputDeleteBusinessServiceOrderRequest(ctx, v)
}

func (ec *executionContext) marshalNDeleteBusinessServiceOrderResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v model.DeleteBusinessServiceOrderResponse) graphql.Marshaler {
	return ec._DeleteBusinessServiceOrderResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v *model.DeleteBusinessServiceOrderResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteBusinessServiceOrderResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNFile2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐFile(ctx context.Context, sel ast.SelectionSet, v model.File) graphql.Marshaler {
	return ec._File(ctx, sel, &v)
}

func (ec *executionContext) marshalNFile2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐFileᚄ(ctx context.Context, sel ast.SelectionSet, v []model.File) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFile2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐFile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFile2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐFile(ctx context.Context, sel ast.SelectionSet, v *model.File) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGetBusinessServiceOrderByDateRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderByDateRequest(ctx context.Context, v interface{}) (model.GetBusinessServiceOrderByDateRequest, error) {
	return ec.unmarshalInputGetBusinessServiceOrderByDateRequest(ctx, v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrderByDateResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderByDateResponse(ctx context.Context, sel ast.SelectionSet, v model.GetBusinessServiceOrderByDateResponse) graphql.Marshaler {
	return ec._GetBusinessServiceOrderByDateResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrderByDateResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderByDateResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessServiceOrderByDateResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetBusinessServiceOrderByDateResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderRequest(ctx context.Context, v interface{}) (model.GetBusinessServiceOrderRequest, error) {
	return ec.unmarshalInputGetBusinessServiceOrderRequest(ctx, v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrderResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v model.GetBusinessServiceOrderResponse) graphql.Marshaler {
	return ec._GetBusinessServiceOrderResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessServiceOrderResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetBusinessServiceOrderResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetBusinessServiceOrdersByEmailRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersByEmailRequest(ctx context.Context, v interface{}) (model.GetBusinessServiceOrdersByEmailRequest, error) {
	return ec.unmarshalInputGetBusinessServiceOrdersByEmailRequest(ctx, v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrdersByEmailResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersByEmailResponse(ctx context.Context, sel ast.SelectionSet, v model.GetBusinessServiceOrdersByEmailResponse) graphql.Marshaler {
	return ec._GetBusinessServiceOrdersByEmailResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrdersByEmailResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersByEmailResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessServiceOrdersByEmailResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetBusinessServiceOrdersByEmailResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetBusinessServiceOrdersRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersRequest(ctx context.Context, v interface{}) (model.GetBusinessServiceOrdersRequest, error) {
	return ec.unmarshalInputGetBusinessServiceOrdersRequest(ctx, v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrdersResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersResponse(ctx context.Context, sel ast.SelectionSet, v model.GetBusinessServiceOrdersResponse) graphql.Marshaler {
	return ec._GetBusinessServiceOrdersResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetBusinessServiceOrdersResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceOrdersResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessServiceOrdersResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetBusinessServiceOrdersResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetCompanyAvailableHoursByDateRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyAvailableHoursByDateRequest(ctx context.Context, v interface{}) (model.GetCompanyAvailableHoursByDateRequest, error) {
	return ec.unmarshalInputGetCompanyAvailableHoursByDateRequest(ctx, v)
}

func (ec *executionContext) marshalNGetCompanyAvailableHoursByDateResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyAvailableHoursByDateResponse(ctx context.Context, sel ast.SelectionSet, v model.GetCompanyAvailableHoursByDateResponse) graphql.Marshaler {
	return ec._GetCompanyAvailableHoursByDateResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetCompanyAvailableHoursByDateResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyAvailableHoursByDateResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetCompanyAvailableHoursByDateResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetCompanyAvailableHoursByDateResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetCustomerByEmailRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerByEmailRequest(ctx context.Context, v interface{}) (model.GetCustomerByEmailRequest, error) {
	return ec.unmarshalInputGetCustomerByEmailRequest(ctx, v)
}

func (ec *executionContext) marshalNGetCustomerByEmailResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerByEmailResponse(ctx context.Context, sel ast.SelectionSet, v model.GetCustomerByEmailResponse) graphql.Marshaler {
	return ec._GetCustomerByEmailResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetCustomerByEmailResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerByEmailResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetCustomerByEmailResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetCustomerByEmailResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetCustomerTokenInfoRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerTokenInfoRequest(ctx context.Context, v interface{}) (model.GetCustomerTokenInfoRequest, error) {
	return ec.unmarshalInputGetCustomerTokenInfoRequest(ctx, v)
}

func (ec *executionContext) marshalNGetCustomerTokenInfoResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerTokenInfoResponse(ctx context.Context, sel ast.SelectionSet, v model.GetCustomerTokenInfoResponse) graphql.Marshaler {
	return ec._GetCustomerTokenInfoResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetCustomerTokenInfoResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCustomerTokenInfoResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetCustomerTokenInfoResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetCustomerTokenInfoResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2int64(ctx context.Context, v interface{}) (int64, error) {
	return graphql.UnmarshalInt64(v)
}

func (ec *executionContext) marshalNID2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	return graphql.UnmarshalInt64(v)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNInt2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNPagination2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐPagination(ctx context.Context, sel ast.SelectionSet, v model.Pagination) graphql.Marshaler {
	return ec._Pagination(ctx, sel, &v)
}

func (ec *executionContext) marshalNPagination2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐPagination(ctx context.Context, sel ast.SelectionSet, v *model.Pagination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Pagination(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaginationInput2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐPaginationInput(ctx context.Context, v interface{}) (model.PaginationInput, error) {
	return ec.unmarshalInputPaginationInput(ctx, v)
}

func (ec *executionContext) unmarshalNPaginationInput2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐPaginationInput(ctx context.Context, v interface{}) (*model.PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNPaginationInput2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐPaginationInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNToken2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐToken(ctx context.Context, sel ast.SelectionSet, v model.Token) graphql.Marshaler {
	return ec._Token(ctx, sel, &v)
}

func (ec *executionContext) marshalNToken2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐToken(ctx context.Context, sel ast.SelectionSet, v *model.Token) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Token(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateBusinessServiceOrderRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessServiceOrderRequest(ctx context.Context, v interface{}) (model.UpdateBusinessServiceOrderRequest, error) {
	return ec.unmarshalInputUpdateBusinessServiceOrderRequest(ctx, v)
}

func (ec *executionContext) marshalNUpdateBusinessServiceOrderResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateBusinessServiceOrderResponse) graphql.Marshaler {
	return ec._UpdateBusinessServiceOrderResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateBusinessServiceOrderResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessServiceOrderResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateBusinessServiceOrderResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdateBusinessServiceOrderResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	return graphql.UnmarshalUpload(v)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUploadFile2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUploadFile(ctx context.Context, v interface{}) (model.UploadFile, error) {
	return ec.unmarshalInputUploadFile(ctx, v)
}

func (ec *executionContext) unmarshalNUploadFile2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUploadFileᚄ(ctx context.Context, v interface{}) ([]model.UploadFile, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.UploadFile, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNUploadFile2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUploadFile(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNbusinessCompanyOperationHourResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHourResponse(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanyOperationHourResponse) graphql.Marshaler {
	return ec._businessCompanyOperationHourResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNbusinessCompanyOperationHourResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyOperationHourResponse(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompanyOperationHourResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._businessCompanyOperationHourResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNbusinessCompanyService2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyService(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanyService) graphql.Marshaler {
	return ec._businessCompanyService(ctx, sel, &v)
}

func (ec *executionContext) marshalNbusinessCompanyServiceOperationHourResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHourResponse(ctx context.Context, sel ast.SelectionSet, v model.BusinessCompanyServiceOperationHourResponse) graphql.Marshaler {
	return ec._businessCompanyServiceOperationHourResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNbusinessCompanyServiceOperationHourResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceOperationHourResponse(ctx context.Context, sel ast.SelectionSet, v *model.BusinessCompanyServiceOperationHourResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._businessCompanyServiceOperationHourResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNcreateBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyOperationHoursRequest(ctx context.Context, v interface{}) (model.CreateBusinessCompanyOperationHoursRequest, error) {
	return ec.unmarshalInputcreateBusinessCompanyOperationHoursRequest(ctx, v)
}

func (ec *executionContext) marshalNcreateBusinessCompanyOperationHoursResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	return ec._createBusinessCompanyOperationHoursResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNcreateBusinessCompanyOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._createBusinessCompanyOperationHoursResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNcreateBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyServiceOperationHoursRequest(ctx context.Context, v interface{}) (model.CreateBusinessCompanyServiceOperationHoursRequest, error) {
	return ec.unmarshalInputcreateBusinessCompanyServiceOperationHoursRequest(ctx, v)
}

func (ec *executionContext) marshalNcreateBusinessCompanyServiceOperationHoursResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	return ec._createBusinessCompanyServiceOperationHoursResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNcreateBusinessCompanyServiceOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._createBusinessCompanyServiceOperationHoursResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNcreateBusinessServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceRequest(ctx context.Context, v interface{}) (model.CreateBusinessServiceRequest, error) {
	return ec.unmarshalInputcreateBusinessServiceRequest(ctx, v)
}

func (ec *executionContext) marshalNcreateBusinessServiceResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateBusinessServiceResponse) graphql.Marshaler {
	return ec._createBusinessServiceResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNcreateBusinessServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateBusinessServiceResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateBusinessServiceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._createBusinessServiceResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNcreateCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCompanyServiceRequest(ctx context.Context, v interface{}) (model.CreateCompanyServiceRequest, error) {
	return ec.unmarshalInputcreateCompanyServiceRequest(ctx, v)
}

func (ec *executionContext) marshalNcreateCompanyServiceResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, v model.CreateCompanyServiceResponse) graphql.Marshaler {
	return ec._createCompanyServiceResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNcreateCompanyServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐCreateCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreateCompanyServiceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._createCompanyServiceResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdeleteBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyOperationHoursRequest(ctx context.Context, v interface{}) (model.DeleteBusinessCompanyOperationHoursRequest, error) {
	return ec.unmarshalInputdeleteBusinessCompanyOperationHoursRequest(ctx, v)
}

func (ec *executionContext) marshalNdeleteBusinessCompanyOperationHoursResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v model.DeleteBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	return ec._deleteBusinessCompanyOperationHoursResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNdeleteBusinessCompanyOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v *model.DeleteBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._deleteBusinessCompanyOperationHoursResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdeleteBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyServiceOperationHoursRequest(ctx context.Context, v interface{}) (model.DeleteBusinessCompanyServiceOperationHoursRequest, error) {
	return ec.unmarshalInputdeleteBusinessCompanyServiceOperationHoursRequest(ctx, v)
}

func (ec *executionContext) marshalNdeleteBusinessCompanyServiceOperationHoursResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v model.DeleteBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	return ec._deleteBusinessCompanyServiceOperationHoursResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNdeleteBusinessCompanyServiceOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v *model.DeleteBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._deleteBusinessCompanyServiceOperationHoursResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdeleteCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteCompanyServiceRequest(ctx context.Context, v interface{}) (model.DeleteCompanyServiceRequest, error) {
	return ec.unmarshalInputdeleteCompanyServiceRequest(ctx, v)
}

func (ec *executionContext) marshalNdeleteCompanyServiceResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, v model.DeleteCompanyServiceResponse) graphql.Marshaler {
	return ec._deleteCompanyServiceResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNdeleteCompanyServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐDeleteCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, v *model.DeleteCompanyServiceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._deleteCompanyServiceResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNgenerateTokenRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGenerateTokenRequest(ctx context.Context, v interface{}) (model.GenerateTokenRequest, error) {
	return ec.unmarshalInputgenerateTokenRequest(ctx, v)
}

func (ec *executionContext) unmarshalNgetBusinessCompaniesUnderCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompaniesUnderCategoryRequest(ctx context.Context, v interface{}) (model.GetBusinessCompaniesUnderCategoryRequest, error) {
	return ec.unmarshalInputgetBusinessCompaniesUnderCategoryRequest(ctx, v)
}

func (ec *executionContext) unmarshalNgetBusinessCompanyRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyRequest(ctx context.Context, v interface{}) (model.GetBusinessCompanyRequest, error) {
	return ec.unmarshalInputgetBusinessCompanyRequest(ctx, v)
}

func (ec *executionContext) marshalNgetBusinessCompanyServicesResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServicesResponse(ctx context.Context, sel ast.SelectionSet, v model.GetBusinessCompanyServicesResponse) graphql.Marshaler {
	return ec._getBusinessCompanyServicesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNgetBusinessCompanyServicesResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServicesResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessCompanyServicesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._getBusinessCompanyServicesResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNgetBusinessOwnerCompaniesResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessOwnerCompaniesResponse(ctx context.Context, sel ast.SelectionSet, v model.GetBusinessOwnerCompaniesResponse) graphql.Marshaler {
	return ec._getBusinessOwnerCompaniesResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNgetBusinessOwnerCompaniesResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessOwnerCompaniesResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessOwnerCompaniesResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._getBusinessOwnerCompaniesResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNgetBusinessServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServiceRequest(ctx context.Context, v interface{}) (model.GetBusinessServiceRequest, error) {
	return ec.unmarshalInputgetBusinessServiceRequest(ctx, v)
}

func (ec *executionContext) unmarshalNgetCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServiceRequest(ctx context.Context, v interface{}) (model.GetCompanyServiceRequest, error) {
	return ec.unmarshalInputgetCompanyServiceRequest(ctx, v)
}

func (ec *executionContext) unmarshalNgetCompanyServicesUnderSubCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServicesUnderSubCategoryRequest(ctx context.Context, v interface{}) (model.GetCompanyServicesUnderSubCategoryRequest, error) {
	return ec.unmarshalInputgetCompanyServicesUnderSubCategoryRequest(ctx, v)
}

func (ec *executionContext) unmarshalNretrieveTokenInfoRequst2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐRetrieveTokenInfoRequst(ctx context.Context, v interface{}) (model.RetrieveTokenInfoRequst, error) {
	return ec.unmarshalInputretrieveTokenInfoRequst(ctx, v)
}

func (ec *executionContext) marshalNretrieveTokenInfoResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐRetrieveTokenInfoResponse(ctx context.Context, sel ast.SelectionSet, v model.RetrieveTokenInfoResponse) graphql.Marshaler {
	return ec._retrieveTokenInfoResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNretrieveTokenInfoResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐRetrieveTokenInfoResponse(ctx context.Context, sel ast.SelectionSet, v *model.RetrieveTokenInfoResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._retrieveTokenInfoResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNupdateBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyOperationHoursRequest(ctx context.Context, v interface{}) (model.UpdateBusinessCompanyOperationHoursRequest, error) {
	return ec.unmarshalInputupdateBusinessCompanyOperationHoursRequest(ctx, v)
}

func (ec *executionContext) marshalNupdateBusinessCompanyOperationHoursResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	return ec._updateBusinessCompanyOperationHoursResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNupdateBusinessCompanyOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateBusinessCompanyOperationHoursResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._updateBusinessCompanyOperationHoursResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNupdateBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyServiceOperationHoursRequest(ctx context.Context, v interface{}) (model.UpdateBusinessCompanyServiceOperationHoursRequest, error) {
	return ec.unmarshalInputupdateBusinessCompanyServiceOperationHoursRequest(ctx, v)
}

func (ec *executionContext) marshalNupdateBusinessCompanyServiceOperationHoursResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	return ec._updateBusinessCompanyServiceOperationHoursResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNupdateBusinessCompanyServiceOperationHoursResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateBusinessCompanyServiceOperationHoursResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateBusinessCompanyServiceOperationHoursResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._updateBusinessCompanyServiceOperationHoursResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNupdateCompanyServiceRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateCompanyServiceRequest(ctx context.Context, v interface{}) (model.UpdateCompanyServiceRequest, error) {
	return ec.unmarshalInputupdateCompanyServiceRequest(ctx, v)
}

func (ec *executionContext) marshalNupdateCompanyServiceResponse2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, v model.UpdateCompanyServiceResponse) graphql.Marshaler {
	return ec._updateCompanyServiceResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNupdateCompanyServiceResponse2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐUpdateCompanyServiceResponse(ctx context.Context, sel ast.SelectionSet, v *model.UpdateCompanyServiceResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._updateCompanyServiceResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOBusinessSubCategoriesUnderCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoriesUnderCategoryRequest(ctx context.Context, v interface{}) (model.BusinessSubCategoriesUnderCategoryRequest, error) {
	return ec.unmarshalInputBusinessSubCategoriesUnderCategoryRequest(ctx, v)
}

func (ec *executionContext) unmarshalOBusinessSubCategoriesUnderCategoryRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoriesUnderCategoryRequest(ctx context.Context, v interface{}) (*model.BusinessSubCategoriesUnderCategoryRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBusinessSubCategoriesUnderCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessSubCategoriesUnderCategoryRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2float64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2float64(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v interface{}) (int64, error) {
	return graphql.UnmarshalInt64(v)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	return graphql.MarshalInt64(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int64(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalObusinessCompanyService2ᚕgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyServiceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BusinessCompanyService) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNbusinessCompanyService2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐBusinessCompanyService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOgetBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyOperationHoursRequest(ctx context.Context, v interface{}) (model.GetBusinessCompanyOperationHoursRequest, error) {
	return ec.unmarshalInputgetBusinessCompanyOperationHoursRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetBusinessCompanyOperationHoursRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyOperationHoursRequest(ctx context.Context, v interface{}) (*model.GetBusinessCompanyOperationHoursRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetBusinessCompanyOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyOperationHoursRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOgetBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServiceOperationHoursRequest(ctx context.Context, v interface{}) (model.GetBusinessCompanyServiceOperationHoursRequest, error) {
	return ec.unmarshalInputgetBusinessCompanyServiceOperationHoursRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetBusinessCompanyServiceOperationHoursRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServiceOperationHoursRequest(ctx context.Context, v interface{}) (*model.GetBusinessCompanyServiceOperationHoursRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetBusinessCompanyServiceOperationHoursRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServiceOperationHoursRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOgetBusinessCompanyServicesRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServicesRequest(ctx context.Context, v interface{}) (model.GetBusinessCompanyServicesRequest, error) {
	return ec.unmarshalInputgetBusinessCompanyServicesRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetBusinessCompanyServicesRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServicesRequest(ctx context.Context, v interface{}) (*model.GetBusinessCompanyServicesRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetBusinessCompanyServicesRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessCompanyServicesRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOgetBusinessOwnerCompaniesRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessOwnerCompaniesRequest(ctx context.Context, v interface{}) (model.GetBusinessOwnerCompaniesRequest, error) {
	return ec.unmarshalInputgetBusinessOwnerCompaniesRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetBusinessOwnerCompaniesRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessOwnerCompaniesRequest(ctx context.Context, v interface{}) (*model.GetBusinessOwnerCompaniesRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetBusinessOwnerCompaniesRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessOwnerCompaniesRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOgetBusinessServicesUnderSubCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServicesUnderSubCategoryRequest(ctx context.Context, v interface{}) (model.GetBusinessServicesUnderSubCategoryRequest, error) {
	return ec.unmarshalInputgetBusinessServicesUnderSubCategoryRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetBusinessServicesUnderSubCategoryRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServicesUnderSubCategoryRequest(ctx context.Context, v interface{}) (*model.GetBusinessServicesUnderSubCategoryRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetBusinessServicesUnderSubCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetBusinessServicesUnderSubCategoryRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOgetCompanyServicesUnderCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServicesUnderCategoryRequest(ctx context.Context, v interface{}) (model.GetCompanyServicesUnderCategoryRequest, error) {
	return ec.unmarshalInputgetCompanyServicesUnderCategoryRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetCompanyServicesUnderCategoryRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServicesUnderCategoryRequest(ctx context.Context, v interface{}) (*model.GetCompanyServicesUnderCategoryRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetCompanyServicesUnderCategoryRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetCompanyServicesUnderCategoryRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOgetGetBusinessCompanyOperationHourByDayRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyOperationHourByDayRequest(ctx context.Context, v interface{}) (model.GetGetBusinessCompanyOperationHourByDayRequest, error) {
	return ec.unmarshalInputgetGetBusinessCompanyOperationHourByDayRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetGetBusinessCompanyOperationHourByDayRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyOperationHourByDayRequest(ctx context.Context, v interface{}) (*model.GetGetBusinessCompanyOperationHourByDayRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetGetBusinessCompanyOperationHourByDayRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyOperationHourByDayRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOgetGetBusinessCompanyServiceOperationHourByDayRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyServiceOperationHourByDayRequest(ctx context.Context, v interface{}) (model.GetGetBusinessCompanyServiceOperationHourByDayRequest, error) {
	return ec.unmarshalInputgetGetBusinessCompanyServiceOperationHourByDayRequest(ctx, v)
}

func (ec *executionContext) unmarshalOgetGetBusinessCompanyServiceOperationHourByDayRequest2ᚖgithubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyServiceOperationHourByDayRequest(ctx context.Context, v interface{}) (*model.GetGetBusinessCompanyServiceOperationHourByDayRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOgetGetBusinessCompanyServiceOperationHourByDayRequest2githubᚗcomᚋAkezhanOb1ᚋdiplomaProjectᚋapiᚋgraphQLᚋgraphᚋmodelᚐGetGetBusinessCompanyServiceOperationHourByDayRequest(ctx, v)
	return &res, err
}

// endregion ***************************** type.gotpl *****************************
