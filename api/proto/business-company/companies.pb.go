// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.9.2
// source: companies.proto

package companies

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BusinessCompanyImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageID   int64  `protobuf:"varint,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
	ImagePath string `protobuf:"bytes,2,opt,name=imagePath,proto3" json:"imagePath,omitempty"`
}

func (x *BusinessCompanyImage) Reset() {
	*x = BusinessCompanyImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyImage) ProtoMessage() {}

func (x *BusinessCompanyImage) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyImage.ProtoReflect.Descriptor instead.
func (*BusinessCompanyImage) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{0}
}

func (x *BusinessCompanyImage) GetImageID() int64 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

func (x *BusinessCompanyImage) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

type BusinessCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyID         int64                   `protobuf:"varint,1,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
	BusinessCompanyName       string                  `protobuf:"bytes,2,opt,name=businessCompanyName,proto3" json:"businessCompanyName,omitempty"`
	BusinessCompanyCategoryID int64                   `protobuf:"varint,3,opt,name=businessCompanyCategoryID,proto3" json:"businessCompanyCategoryID,omitempty"`
	BusinessCompanyAddress    string                  `protobuf:"bytes,4,opt,name=businessCompanyAddress,proto3" json:"businessCompanyAddress,omitempty"`
	BusinessCompanyImages     []*BusinessCompanyImage `protobuf:"bytes,5,rep,name=businessCompanyImages,proto3" json:"businessCompanyImages,omitempty"`
}

func (x *BusinessCompany) Reset() {
	*x = BusinessCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompany) ProtoMessage() {}

func (x *BusinessCompany) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompany.ProtoReflect.Descriptor instead.
func (*BusinessCompany) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessCompany) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

func (x *BusinessCompany) GetBusinessCompanyName() string {
	if x != nil {
		return x.BusinessCompanyName
	}
	return ""
}

func (x *BusinessCompany) GetBusinessCompanyCategoryID() int64 {
	if x != nil {
		return x.BusinessCompanyCategoryID
	}
	return 0
}

func (x *BusinessCompany) GetBusinessCompanyAddress() string {
	if x != nil {
		return x.BusinessCompanyAddress
	}
	return ""
}

func (x *BusinessCompany) GetBusinessCompanyImages() []*BusinessCompanyImage {
	if x != nil {
		return x.BusinessCompanyImages
	}
	return nil
}

type CreateBusinessCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyName       string `protobuf:"bytes,1,opt,name=businessCompanyName,proto3" json:"businessCompanyName,omitempty"`
	BusinessCompanyCategoryID int64  `protobuf:"varint,2,opt,name=businessCompanyCategoryID,proto3" json:"businessCompanyCategoryID,omitempty"`
	BusinessCompanyAddress    string `protobuf:"bytes,3,opt,name=businessCompanyAddress,proto3" json:"businessCompanyAddress,omitempty"`
}

func (x *CreateBusinessCompanyRequest) Reset() {
	*x = CreateBusinessCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessCompanyRequest) ProtoMessage() {}

func (x *CreateBusinessCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessCompanyRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessCompanyRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBusinessCompanyRequest) GetBusinessCompanyName() string {
	if x != nil {
		return x.BusinessCompanyName
	}
	return ""
}

func (x *CreateBusinessCompanyRequest) GetBusinessCompanyCategoryID() int64 {
	if x != nil {
		return x.BusinessCompanyCategoryID
	}
	return 0
}

func (x *CreateBusinessCompanyRequest) GetBusinessCompanyAddress() string {
	if x != nil {
		return x.BusinessCompanyAddress
	}
	return ""
}

type CreateBusinessCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompany *BusinessCompany `protobuf:"bytes,1,opt,name=BusinessCompany,proto3" json:"BusinessCompany,omitempty"`
}

func (x *CreateBusinessCompanyResponse) Reset() {
	*x = CreateBusinessCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessCompanyResponse) ProtoMessage() {}

func (x *CreateBusinessCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessCompanyResponse.ProtoReflect.Descriptor instead.
func (*CreateBusinessCompanyResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBusinessCompanyResponse) GetBusinessCompany() *BusinessCompany {
	if x != nil {
		return x.BusinessCompany
	}
	return nil
}

type GetBusinessCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyID int64 `protobuf:"varint,1,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
}

func (x *GetBusinessCompanyRequest) Reset() {
	*x = GetBusinessCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyRequest) ProtoMessage() {}

func (x *GetBusinessCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{4}
}

func (x *GetBusinessCompanyRequest) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

type GetBusinessCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompany *BusinessCompany `protobuf:"bytes,1,opt,name=businessCompany,proto3" json:"businessCompany,omitempty"`
}

func (x *GetBusinessCompanyResponse) Reset() {
	*x = GetBusinessCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyResponse) ProtoMessage() {}

func (x *GetBusinessCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{5}
}

func (x *GetBusinessCompanyResponse) GetBusinessCompany() *BusinessCompany {
	if x != nil {
		return x.BusinessCompany
	}
	return nil
}

type GetBusinessCompaniesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanies []*BusinessCompany `protobuf:"bytes,1,rep,name=businessCompanies,proto3" json:"businessCompanies,omitempty"`
}

func (x *GetBusinessCompaniesResponse) Reset() {
	*x = GetBusinessCompaniesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompaniesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompaniesResponse) ProtoMessage() {}

func (x *GetBusinessCompaniesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompaniesResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompaniesResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{6}
}

func (x *GetBusinessCompaniesResponse) GetBusinessCompanies() []*BusinessCompany {
	if x != nil {
		return x.BusinessCompanies
	}
	return nil
}

type GetBusinessCompanyServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyID int64 `protobuf:"varint,1,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
}

func (x *GetBusinessCompanyServicesRequest) Reset() {
	*x = GetBusinessCompanyServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyServicesRequest) ProtoMessage() {}

func (x *GetBusinessCompanyServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyServicesRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyServicesRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{7}
}

func (x *GetBusinessCompanyServicesRequest) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

type BusinessCompanyService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyServiceID       int64   `protobuf:"varint,1,opt,name=companyServiceID,proto3" json:"companyServiceID,omitempty"`
	CompanyServiceName     string  `protobuf:"bytes,2,opt,name=companyServiceName,proto3" json:"companyServiceName,omitempty"`
	CompanyServiceDuration int64   `protobuf:"varint,3,opt,name=companyServiceDuration,proto3" json:"companyServiceDuration,omitempty"`
	CompanyServicePrice    float64 `protobuf:"fixed64,4,opt,name=companyServicePrice,proto3" json:"companyServicePrice,omitempty"`
}

func (x *BusinessCompanyService) Reset() {
	*x = BusinessCompanyService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyService) ProtoMessage() {}

func (x *BusinessCompanyService) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyService.ProtoReflect.Descriptor instead.
func (*BusinessCompanyService) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{8}
}

func (x *BusinessCompanyService) GetCompanyServiceID() int64 {
	if x != nil {
		return x.CompanyServiceID
	}
	return 0
}

func (x *BusinessCompanyService) GetCompanyServiceName() string {
	if x != nil {
		return x.CompanyServiceName
	}
	return ""
}

func (x *BusinessCompanyService) GetCompanyServiceDuration() int64 {
	if x != nil {
		return x.CompanyServiceDuration
	}
	return 0
}

func (x *BusinessCompanyService) GetCompanyServicePrice() float64 {
	if x != nil {
		return x.CompanyServicePrice
	}
	return 0
}

type GetBusinessCompanyServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyService []*BusinessCompanyService `protobuf:"bytes,1,rep,name=businessCompanyService,proto3" json:"businessCompanyService,omitempty"`
}

func (x *GetBusinessCompanyServicesResponse) Reset() {
	*x = GetBusinessCompanyServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyServicesResponse) ProtoMessage() {}

func (x *GetBusinessCompanyServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyServicesResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyServicesResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{9}
}

func (x *GetBusinessCompanyServicesResponse) GetBusinessCompanyService() []*BusinessCompanyService {
	if x != nil {
		return x.BusinessCompanyService
	}
	return nil
}

type BusinessCompanyOperationHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyOperationHourID int64  `protobuf:"varint,1,opt,name=companyOperationHourID,proto3" json:"companyOperationHourID,omitempty"`
	BusinessCompanyID      int64  `protobuf:"varint,2,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
	DayOfWeek              int64  `protobuf:"varint,3,opt,name=dayOfWeek,proto3" json:"dayOfWeek,omitempty"`
	OpenTime               string `protobuf:"bytes,4,opt,name=openTime,proto3" json:"openTime,omitempty"`
	CloseTime              string `protobuf:"bytes,5,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
}

func (x *BusinessCompanyOperationHour) Reset() {
	*x = BusinessCompanyOperationHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyOperationHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyOperationHour) ProtoMessage() {}

func (x *BusinessCompanyOperationHour) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyOperationHour.ProtoReflect.Descriptor instead.
func (*BusinessCompanyOperationHour) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{10}
}

func (x *BusinessCompanyOperationHour) GetCompanyOperationHourID() int64 {
	if x != nil {
		return x.CompanyOperationHourID
	}
	return 0
}

func (x *BusinessCompanyOperationHour) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

func (x *BusinessCompanyOperationHour) GetDayOfWeek() int64 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *BusinessCompanyOperationHour) GetOpenTime() string {
	if x != nil {
		return x.OpenTime
	}
	return ""
}

func (x *BusinessCompanyOperationHour) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

type GetBusinessCompanyOperationHourByDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID int64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	DayOfWeek int64 `protobuf:"varint,2,opt,name=dayOfWeek,proto3" json:"dayOfWeek,omitempty"`
}

func (x *GetBusinessCompanyOperationHourByDayRequest) Reset() {
	*x = GetBusinessCompanyOperationHourByDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyOperationHourByDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyOperationHourByDayRequest) ProtoMessage() {}

func (x *GetBusinessCompanyOperationHourByDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyOperationHourByDayRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyOperationHourByDayRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{11}
}

func (x *GetBusinessCompanyOperationHourByDayRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *GetBusinessCompanyOperationHourByDayRequest) GetDayOfWeek() int64 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

type GetBusinessCompanyOperationHourByDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyOperationHour *BusinessCompanyOperationHour `protobuf:"bytes,1,opt,name=businessCompanyOperationHour,proto3" json:"businessCompanyOperationHour,omitempty"`
}

func (x *GetBusinessCompanyOperationHourByDayResponse) Reset() {
	*x = GetBusinessCompanyOperationHourByDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyOperationHourByDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyOperationHourByDayResponse) ProtoMessage() {}

func (x *GetBusinessCompanyOperationHourByDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyOperationHourByDayResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyOperationHourByDayResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{12}
}

func (x *GetBusinessCompanyOperationHourByDayResponse) GetBusinessCompanyOperationHour() *BusinessCompanyOperationHour {
	if x != nil {
		return x.BusinessCompanyOperationHour
	}
	return nil
}

type GetBusinessCompanyOperationHoursRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID int64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *GetBusinessCompanyOperationHoursRequest) Reset() {
	*x = GetBusinessCompanyOperationHoursRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyOperationHoursRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyOperationHoursRequest) ProtoMessage() {}

func (x *GetBusinessCompanyOperationHoursRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyOperationHoursRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyOperationHoursRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{13}
}

func (x *GetBusinessCompanyOperationHoursRequest) GetCompanyID() int64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

type GetBusinessCompanyOperationHoursResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyOperationHour []*BusinessCompanyOperationHour `protobuf:"bytes,1,rep,name=businessCompanyOperationHour,proto3" json:"businessCompanyOperationHour,omitempty"`
}

func (x *GetBusinessCompanyOperationHoursResponse) Reset() {
	*x = GetBusinessCompanyOperationHoursResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompanyOperationHoursResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompanyOperationHoursResponse) ProtoMessage() {}

func (x *GetBusinessCompanyOperationHoursResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompanyOperationHoursResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompanyOperationHoursResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{14}
}

func (x *GetBusinessCompanyOperationHoursResponse) GetBusinessCompanyOperationHour() []*BusinessCompanyOperationHour {
	if x != nil {
		return x.BusinessCompanyOperationHour
	}
	return nil
}

type CreateBusinessCompanyOperationHourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyID int64  `protobuf:"varint,1,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
	DayOfWeek         int64  `protobuf:"varint,2,opt,name=dayOfWeek,proto3" json:"dayOfWeek,omitempty"`
	OpenTime          string `protobuf:"bytes,3,opt,name=openTime,proto3" json:"openTime,omitempty"`
	CloseTime         string `protobuf:"bytes,4,opt,name=closeTime,proto3" json:"closeTime,omitempty"`
}

func (x *CreateBusinessCompanyOperationHourRequest) Reset() {
	*x = CreateBusinessCompanyOperationHourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessCompanyOperationHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessCompanyOperationHourRequest) ProtoMessage() {}

func (x *CreateBusinessCompanyOperationHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessCompanyOperationHourRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessCompanyOperationHourRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{15}
}

func (x *CreateBusinessCompanyOperationHourRequest) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

func (x *CreateBusinessCompanyOperationHourRequest) GetDayOfWeek() int64 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *CreateBusinessCompanyOperationHourRequest) GetOpenTime() string {
	if x != nil {
		return x.OpenTime
	}
	return ""
}

func (x *CreateBusinessCompanyOperationHourRequest) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

type CreateBusinessCompanyOperationHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyOperationHour *BusinessCompanyOperationHour `protobuf:"bytes,1,opt,name=businessCompanyOperationHour,proto3" json:"businessCompanyOperationHour,omitempty"`
}

func (x *CreateBusinessCompanyOperationHourResponse) Reset() {
	*x = CreateBusinessCompanyOperationHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessCompanyOperationHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessCompanyOperationHourResponse) ProtoMessage() {}

func (x *CreateBusinessCompanyOperationHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessCompanyOperationHourResponse.ProtoReflect.Descriptor instead.
func (*CreateBusinessCompanyOperationHourResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{16}
}

func (x *CreateBusinessCompanyOperationHourResponse) GetBusinessCompanyOperationHour() *BusinessCompanyOperationHour {
	if x != nil {
		return x.BusinessCompanyOperationHour
	}
	return nil
}

type UpdateBusinessCompanyOperationHourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyOperationHour *BusinessCompanyOperationHour `protobuf:"bytes,1,opt,name=businessCompanyOperationHour,proto3" json:"businessCompanyOperationHour,omitempty"`
}

func (x *UpdateBusinessCompanyOperationHourRequest) Reset() {
	*x = UpdateBusinessCompanyOperationHourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessCompanyOperationHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessCompanyOperationHourRequest) ProtoMessage() {}

func (x *UpdateBusinessCompanyOperationHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessCompanyOperationHourRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessCompanyOperationHourRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateBusinessCompanyOperationHourRequest) GetBusinessCompanyOperationHour() *BusinessCompanyOperationHour {
	if x != nil {
		return x.BusinessCompanyOperationHour
	}
	return nil
}

type UpdateBusinessCompanyOperationHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyOperationHour *BusinessCompanyOperationHour `protobuf:"bytes,1,opt,name=businessCompanyOperationHour,proto3" json:"businessCompanyOperationHour,omitempty"`
}

func (x *UpdateBusinessCompanyOperationHourResponse) Reset() {
	*x = UpdateBusinessCompanyOperationHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessCompanyOperationHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessCompanyOperationHourResponse) ProtoMessage() {}

func (x *UpdateBusinessCompanyOperationHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessCompanyOperationHourResponse.ProtoReflect.Descriptor instead.
func (*UpdateBusinessCompanyOperationHourResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateBusinessCompanyOperationHourResponse) GetBusinessCompanyOperationHour() *BusinessCompanyOperationHour {
	if x != nil {
		return x.BusinessCompanyOperationHour
	}
	return nil
}

type DeleteBusinessCompanyOperationHourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationHourID int64 `protobuf:"varint,1,opt,name=OperationHourID,proto3" json:"OperationHourID,omitempty"`
}

func (x *DeleteBusinessCompanyOperationHourRequest) Reset() {
	*x = DeleteBusinessCompanyOperationHourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessCompanyOperationHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessCompanyOperationHourRequest) ProtoMessage() {}

func (x *DeleteBusinessCompanyOperationHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessCompanyOperationHourRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessCompanyOperationHourRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteBusinessCompanyOperationHourRequest) GetOperationHourID() int64 {
	if x != nil {
		return x.OperationHourID
	}
	return 0
}

type DeleteBusinessCompanyOperationHourResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyOperationHour *BusinessCompanyOperationHour `protobuf:"bytes,1,opt,name=businessCompanyOperationHour,proto3" json:"businessCompanyOperationHour,omitempty"`
}

func (x *DeleteBusinessCompanyOperationHourResponse) Reset() {
	*x = DeleteBusinessCompanyOperationHourResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessCompanyOperationHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessCompanyOperationHourResponse) ProtoMessage() {}

func (x *DeleteBusinessCompanyOperationHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessCompanyOperationHourResponse.ProtoReflect.Descriptor instead.
func (*DeleteBusinessCompanyOperationHourResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteBusinessCompanyOperationHourResponse) GetBusinessCompanyOperationHour() *BusinessCompanyOperationHour {
	if x != nil {
		return x.BusinessCompanyOperationHour
	}
	return nil
}

type GetBusinessCompaniesUnderCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryID int64 `protobuf:"varint,1,opt,name=categoryID,proto3" json:"categoryID,omitempty"`
}

func (x *GetBusinessCompaniesUnderCategoryRequest) Reset() {
	*x = GetBusinessCompaniesUnderCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompaniesUnderCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompaniesUnderCategoryRequest) ProtoMessage() {}

func (x *GetBusinessCompaniesUnderCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompaniesUnderCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessCompaniesUnderCategoryRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{21}
}

func (x *GetBusinessCompaniesUnderCategoryRequest) GetCategoryID() int64 {
	if x != nil {
		return x.CategoryID
	}
	return 0
}

type GetBusinessCompaniesUnderCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanies []*BusinessCompany `protobuf:"bytes,1,rep,name=businessCompanies,proto3" json:"businessCompanies,omitempty"`
}

func (x *GetBusinessCompaniesUnderCategoryResponse) Reset() {
	*x = GetBusinessCompaniesUnderCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessCompaniesUnderCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessCompaniesUnderCategoryResponse) ProtoMessage() {}

func (x *GetBusinessCompaniesUnderCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessCompaniesUnderCategoryResponse.ProtoReflect.Descriptor instead.
func (*GetBusinessCompaniesUnderCategoryResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{22}
}

func (x *GetBusinessCompaniesUnderCategoryResponse) GetBusinessCompanies() []*BusinessCompany {
	if x != nil {
		return x.BusinessCompanies
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File        []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	FileName    string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Size        int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ContentType string `protobuf:"bytes,4,opt,name=contentType,proto3" json:"contentType,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{23}
}

func (x *File) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *File) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *File) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type BusinessCompanyImageUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCompanyID int64 `protobuf:"varint,1,opt,name=businessCompanyID,proto3" json:"businessCompanyID,omitempty"`
	Image             *File `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *BusinessCompanyImageUploadRequest) Reset() {
	*x = BusinessCompanyImageUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyImageUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyImageUploadRequest) ProtoMessage() {}

func (x *BusinessCompanyImageUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyImageUploadRequest.ProtoReflect.Descriptor instead.
func (*BusinessCompanyImageUploadRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{24}
}

func (x *BusinessCompanyImageUploadRequest) GetBusinessCompanyID() int64 {
	if x != nil {
		return x.BusinessCompanyID
	}
	return 0
}

func (x *BusinessCompanyImageUploadRequest) GetImage() *File {
	if x != nil {
		return x.Image
	}
	return nil
}

type BusinessCompanyImageUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageID int64 `protobuf:"varint,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
}

func (x *BusinessCompanyImageUploadResponse) Reset() {
	*x = BusinessCompanyImageUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyImageUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyImageUploadResponse) ProtoMessage() {}

func (x *BusinessCompanyImageUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyImageUploadResponse.ProtoReflect.Descriptor instead.
func (*BusinessCompanyImageUploadResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{25}
}

func (x *BusinessCompanyImageUploadResponse) GetImageID() int64 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

type BusinessCompanyImageDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageID int64 `protobuf:"varint,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
}

func (x *BusinessCompanyImageDeleteRequest) Reset() {
	*x = BusinessCompanyImageDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyImageDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyImageDeleteRequest) ProtoMessage() {}

func (x *BusinessCompanyImageDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyImageDeleteRequest.ProtoReflect.Descriptor instead.
func (*BusinessCompanyImageDeleteRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{26}
}

func (x *BusinessCompanyImageDeleteRequest) GetImageID() int64 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

type BusinessCompanyImageDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageID   int64  `protobuf:"varint,1,opt,name=imageID,proto3" json:"imageID,omitempty"`
	ImagePath string `protobuf:"bytes,2,opt,name=imagePath,proto3" json:"imagePath,omitempty"`
}

func (x *BusinessCompanyImageDeleteResponse) Reset() {
	*x = BusinessCompanyImageDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_companies_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessCompanyImageDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessCompanyImageDeleteResponse) ProtoMessage() {}

func (x *BusinessCompanyImageDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessCompanyImageDeleteResponse.ProtoReflect.Descriptor instead.
func (*BusinessCompanyImageDeleteResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{27}
}

func (x *BusinessCompanyImageDeleteResponse) GetImageID() int64 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

func (x *BusinessCompanyImageDeleteResponse) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

var File_companies_proto protoreflect.FileDescriptor

var file_companies_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4e, 0x0a, 0x14, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xc6, 0x02, 0x0a, 0x0f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x6d, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x0f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x6a, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x70, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0xde,
	0x01, 0x0a, 0x16, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x87, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x1c, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x42, 0x79, 0x44, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x22, 0xa3, 0x01, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x1c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x47, 0x0a, 0x27, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x22, 0x9f, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x73, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x1c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xa0, 0x01, 0x0a,
	0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x1c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22,
	0xa1, 0x01, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73,
	0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x22, 0x55, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a, 0x2a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x4a,
	0x0a, 0x28, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x29, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x21, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x22, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x21, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x22, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x32, 0xfb, 0x0d, 0x0a, 0x18, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x34, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x42, 0x79, 0x44, 0x61, 0x79, 0x12,
	0x3e, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x3a, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2f,
	0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x3c, 0x2e, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x22, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x3c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa3, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x3c, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_companies_proto_rawDescOnce sync.Once
	file_companies_proto_rawDescData = file_companies_proto_rawDesc
)

func file_companies_proto_rawDescGZIP() []byte {
	file_companies_proto_rawDescOnce.Do(func() {
		file_companies_proto_rawDescData = protoimpl.X.CompressGZIP(file_companies_proto_rawDescData)
	})
	return file_companies_proto_rawDescData
}

var file_companies_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_companies_proto_goTypes = []interface{}{
	(*BusinessCompanyImage)(nil),                         // 0: businessCompanies.BusinessCompanyImage
	(*BusinessCompany)(nil),                              // 1: businessCompanies.BusinessCompany
	(*CreateBusinessCompanyRequest)(nil),                 // 2: businessCompanies.CreateBusinessCompanyRequest
	(*CreateBusinessCompanyResponse)(nil),                // 3: businessCompanies.CreateBusinessCompanyResponse
	(*GetBusinessCompanyRequest)(nil),                    // 4: businessCompanies.GetBusinessCompanyRequest
	(*GetBusinessCompanyResponse)(nil),                   // 5: businessCompanies.GetBusinessCompanyResponse
	(*GetBusinessCompaniesResponse)(nil),                 // 6: businessCompanies.GetBusinessCompaniesResponse
	(*GetBusinessCompanyServicesRequest)(nil),            // 7: businessCompanies.GetBusinessCompanyServicesRequest
	(*BusinessCompanyService)(nil),                       // 8: businessCompanies.BusinessCompanyService
	(*GetBusinessCompanyServicesResponse)(nil),           // 9: businessCompanies.GetBusinessCompanyServicesResponse
	(*BusinessCompanyOperationHour)(nil),                 // 10: businessCompanies.BusinessCompanyOperationHour
	(*GetBusinessCompanyOperationHourByDayRequest)(nil),  // 11: businessCompanies.GetBusinessCompanyOperationHourByDayRequest
	(*GetBusinessCompanyOperationHourByDayResponse)(nil), // 12: businessCompanies.GetBusinessCompanyOperationHourByDayResponse
	(*GetBusinessCompanyOperationHoursRequest)(nil),      // 13: businessCompanies.GetBusinessCompanyOperationHoursRequest
	(*GetBusinessCompanyOperationHoursResponse)(nil),     // 14: businessCompanies.GetBusinessCompanyOperationHoursResponse
	(*CreateBusinessCompanyOperationHourRequest)(nil),    // 15: businessCompanies.CreateBusinessCompanyOperationHourRequest
	(*CreateBusinessCompanyOperationHourResponse)(nil),   // 16: businessCompanies.CreateBusinessCompanyOperationHourResponse
	(*UpdateBusinessCompanyOperationHourRequest)(nil),    // 17: businessCompanies.UpdateBusinessCompanyOperationHourRequest
	(*UpdateBusinessCompanyOperationHourResponse)(nil),   // 18: businessCompanies.UpdateBusinessCompanyOperationHourResponse
	(*DeleteBusinessCompanyOperationHourRequest)(nil),    // 19: businessCompanies.DeleteBusinessCompanyOperationHourRequest
	(*DeleteBusinessCompanyOperationHourResponse)(nil),   // 20: businessCompanies.DeleteBusinessCompanyOperationHourResponse
	(*GetBusinessCompaniesUnderCategoryRequest)(nil),     // 21: businessCompanies.GetBusinessCompaniesUnderCategoryRequest
	(*GetBusinessCompaniesUnderCategoryResponse)(nil),    // 22: businessCompanies.GetBusinessCompaniesUnderCategoryResponse
	(*File)(nil), // 23: businessCompanies.File
	(*BusinessCompanyImageUploadRequest)(nil),  // 24: businessCompanies.BusinessCompanyImageUploadRequest
	(*BusinessCompanyImageUploadResponse)(nil), // 25: businessCompanies.BusinessCompanyImageUploadResponse
	(*BusinessCompanyImageDeleteRequest)(nil),  // 26: businessCompanies.BusinessCompanyImageDeleteRequest
	(*BusinessCompanyImageDeleteResponse)(nil), // 27: businessCompanies.BusinessCompanyImageDeleteResponse
	(*empty.Empty)(nil),                        // 28: google.protobuf.Empty
}
var file_companies_proto_depIdxs = []int32{
	0,  // 0: businessCompanies.BusinessCompany.businessCompanyImages:type_name -> businessCompanies.BusinessCompanyImage
	1,  // 1: businessCompanies.CreateBusinessCompanyResponse.BusinessCompany:type_name -> businessCompanies.BusinessCompany
	1,  // 2: businessCompanies.GetBusinessCompanyResponse.businessCompany:type_name -> businessCompanies.BusinessCompany
	1,  // 3: businessCompanies.GetBusinessCompaniesResponse.businessCompanies:type_name -> businessCompanies.BusinessCompany
	8,  // 4: businessCompanies.GetBusinessCompanyServicesResponse.businessCompanyService:type_name -> businessCompanies.BusinessCompanyService
	10, // 5: businessCompanies.GetBusinessCompanyOperationHourByDayResponse.businessCompanyOperationHour:type_name -> businessCompanies.BusinessCompanyOperationHour
	10, // 6: businessCompanies.GetBusinessCompanyOperationHoursResponse.businessCompanyOperationHour:type_name -> businessCompanies.BusinessCompanyOperationHour
	10, // 7: businessCompanies.CreateBusinessCompanyOperationHourResponse.businessCompanyOperationHour:type_name -> businessCompanies.BusinessCompanyOperationHour
	10, // 8: businessCompanies.UpdateBusinessCompanyOperationHourRequest.businessCompanyOperationHour:type_name -> businessCompanies.BusinessCompanyOperationHour
	10, // 9: businessCompanies.UpdateBusinessCompanyOperationHourResponse.businessCompanyOperationHour:type_name -> businessCompanies.BusinessCompanyOperationHour
	10, // 10: businessCompanies.DeleteBusinessCompanyOperationHourResponse.businessCompanyOperationHour:type_name -> businessCompanies.BusinessCompanyOperationHour
	1,  // 11: businessCompanies.GetBusinessCompaniesUnderCategoryResponse.businessCompanies:type_name -> businessCompanies.BusinessCompany
	23, // 12: businessCompanies.BusinessCompanyImageUploadRequest.image:type_name -> businessCompanies.File
	26, // 13: businessCompanies.BusinessCompaniesService.BusinessCompanyImageDelete:input_type -> businessCompanies.BusinessCompanyImageDeleteRequest
	24, // 14: businessCompanies.BusinessCompaniesService.BusinessCompanyImageUpload:input_type -> businessCompanies.BusinessCompanyImageUploadRequest
	4,  // 15: businessCompanies.BusinessCompaniesService.GetBusinessCompany:input_type -> businessCompanies.GetBusinessCompanyRequest
	28, // 16: businessCompanies.BusinessCompaniesService.GetBusinessCompanies:input_type -> google.protobuf.Empty
	7,  // 17: businessCompanies.BusinessCompaniesService.GetBusinessCompanyServices:input_type -> businessCompanies.GetBusinessCompanyServicesRequest
	11, // 18: businessCompanies.BusinessCompaniesService.GetBusinessCompanyOperationHourByDay:input_type -> businessCompanies.GetBusinessCompanyOperationHourByDayRequest
	13, // 19: businessCompanies.BusinessCompaniesService.GetBusinessCompanyOperationHours:input_type -> businessCompanies.GetBusinessCompanyOperationHoursRequest
	21, // 20: businessCompanies.BusinessCompaniesService.GetBusinessCompaniesUnderCategory:input_type -> businessCompanies.GetBusinessCompaniesUnderCategoryRequest
	2,  // 21: businessCompanies.BusinessCompaniesService.CreateBusinessCompany:input_type -> businessCompanies.CreateBusinessCompanyRequest
	15, // 22: businessCompanies.BusinessCompaniesService.CreateBusinessCompanyOperationHour:input_type -> businessCompanies.CreateBusinessCompanyOperationHourRequest
	17, // 23: businessCompanies.BusinessCompaniesService.UpdateBusinessCompanyOperationHour:input_type -> businessCompanies.UpdateBusinessCompanyOperationHourRequest
	19, // 24: businessCompanies.BusinessCompaniesService.DeleteBusinessCompanyOperationHour:input_type -> businessCompanies.DeleteBusinessCompanyOperationHourRequest
	27, // 25: businessCompanies.BusinessCompaniesService.BusinessCompanyImageDelete:output_type -> businessCompanies.BusinessCompanyImageDeleteResponse
	25, // 26: businessCompanies.BusinessCompaniesService.BusinessCompanyImageUpload:output_type -> businessCompanies.BusinessCompanyImageUploadResponse
	5,  // 27: businessCompanies.BusinessCompaniesService.GetBusinessCompany:output_type -> businessCompanies.GetBusinessCompanyResponse
	6,  // 28: businessCompanies.BusinessCompaniesService.GetBusinessCompanies:output_type -> businessCompanies.GetBusinessCompaniesResponse
	9,  // 29: businessCompanies.BusinessCompaniesService.GetBusinessCompanyServices:output_type -> businessCompanies.GetBusinessCompanyServicesResponse
	12, // 30: businessCompanies.BusinessCompaniesService.GetBusinessCompanyOperationHourByDay:output_type -> businessCompanies.GetBusinessCompanyOperationHourByDayResponse
	14, // 31: businessCompanies.BusinessCompaniesService.GetBusinessCompanyOperationHours:output_type -> businessCompanies.GetBusinessCompanyOperationHoursResponse
	22, // 32: businessCompanies.BusinessCompaniesService.GetBusinessCompaniesUnderCategory:output_type -> businessCompanies.GetBusinessCompaniesUnderCategoryResponse
	3,  // 33: businessCompanies.BusinessCompaniesService.CreateBusinessCompany:output_type -> businessCompanies.CreateBusinessCompanyResponse
	16, // 34: businessCompanies.BusinessCompaniesService.CreateBusinessCompanyOperationHour:output_type -> businessCompanies.CreateBusinessCompanyOperationHourResponse
	18, // 35: businessCompanies.BusinessCompaniesService.UpdateBusinessCompanyOperationHour:output_type -> businessCompanies.UpdateBusinessCompanyOperationHourResponse
	20, // 36: businessCompanies.BusinessCompaniesService.DeleteBusinessCompanyOperationHour:output_type -> businessCompanies.DeleteBusinessCompanyOperationHourResponse
	25, // [25:37] is the sub-list for method output_type
	13, // [13:25] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_companies_proto_init() }
func file_companies_proto_init() {
	if File_companies_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_companies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompaniesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyOperationHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyOperationHourByDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyOperationHourByDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyOperationHoursRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompanyOperationHoursResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessCompanyOperationHourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessCompanyOperationHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessCompanyOperationHourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessCompanyOperationHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessCompanyOperationHourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessCompanyOperationHourResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompaniesUnderCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessCompaniesUnderCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyImageUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyImageUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyImageDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_companies_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessCompanyImageDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_companies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_companies_proto_goTypes,
		DependencyIndexes: file_companies_proto_depIdxs,
		MessageInfos:      file_companies_proto_msgTypes,
	}.Build()
	File_companies_proto = out.File
	file_companies_proto_rawDesc = nil
	file_companies_proto_goTypes = nil
	file_companies_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BusinessCompaniesServiceClient is the client API for BusinessCompaniesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BusinessCompaniesServiceClient interface {
	BusinessCompanyImageDelete(ctx context.Context, in *BusinessCompanyImageDeleteRequest, opts ...grpc.CallOption) (*BusinessCompanyImageDeleteResponse, error)
	BusinessCompanyImageUpload(ctx context.Context, in *BusinessCompanyImageUploadRequest, opts ...grpc.CallOption) (*BusinessCompanyImageUploadResponse, error)
	GetBusinessCompany(ctx context.Context, in *GetBusinessCompanyRequest, opts ...grpc.CallOption) (*GetBusinessCompanyResponse, error)
	GetBusinessCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBusinessCompaniesResponse, error)
	GetBusinessCompanyServices(ctx context.Context, in *GetBusinessCompanyServicesRequest, opts ...grpc.CallOption) (*GetBusinessCompanyServicesResponse, error)
	GetBusinessCompanyOperationHourByDay(ctx context.Context, in *GetBusinessCompanyOperationHourByDayRequest, opts ...grpc.CallOption) (*GetBusinessCompanyOperationHourByDayResponse, error)
	GetBusinessCompanyOperationHours(ctx context.Context, in *GetBusinessCompanyOperationHoursRequest, opts ...grpc.CallOption) (*GetBusinessCompanyOperationHoursResponse, error)
	GetBusinessCompaniesUnderCategory(ctx context.Context, in *GetBusinessCompaniesUnderCategoryRequest, opts ...grpc.CallOption) (*GetBusinessCompaniesUnderCategoryResponse, error)
	CreateBusinessCompany(ctx context.Context, in *CreateBusinessCompanyRequest, opts ...grpc.CallOption) (*CreateBusinessCompanyResponse, error)
	CreateBusinessCompanyOperationHour(ctx context.Context, in *CreateBusinessCompanyOperationHourRequest, opts ...grpc.CallOption) (*CreateBusinessCompanyOperationHourResponse, error)
	UpdateBusinessCompanyOperationHour(ctx context.Context, in *UpdateBusinessCompanyOperationHourRequest, opts ...grpc.CallOption) (*UpdateBusinessCompanyOperationHourResponse, error)
	DeleteBusinessCompanyOperationHour(ctx context.Context, in *DeleteBusinessCompanyOperationHourRequest, opts ...grpc.CallOption) (*DeleteBusinessCompanyOperationHourResponse, error)
}

type businessCompaniesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessCompaniesServiceClient(cc grpc.ClientConnInterface) BusinessCompaniesServiceClient {
	return &businessCompaniesServiceClient{cc}
}

func (c *businessCompaniesServiceClient) BusinessCompanyImageDelete(ctx context.Context, in *BusinessCompanyImageDeleteRequest, opts ...grpc.CallOption) (*BusinessCompanyImageDeleteResponse, error) {
	out := new(BusinessCompanyImageDeleteResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/BusinessCompanyImageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) BusinessCompanyImageUpload(ctx context.Context, in *BusinessCompanyImageUploadRequest, opts ...grpc.CallOption) (*BusinessCompanyImageUploadResponse, error) {
	out := new(BusinessCompanyImageUploadResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/BusinessCompanyImageUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) GetBusinessCompany(ctx context.Context, in *GetBusinessCompanyRequest, opts ...grpc.CallOption) (*GetBusinessCompanyResponse, error) {
	out := new(GetBusinessCompanyResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/GetBusinessCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) GetBusinessCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetBusinessCompaniesResponse, error) {
	out := new(GetBusinessCompaniesResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/GetBusinessCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) GetBusinessCompanyServices(ctx context.Context, in *GetBusinessCompanyServicesRequest, opts ...grpc.CallOption) (*GetBusinessCompanyServicesResponse, error) {
	out := new(GetBusinessCompanyServicesResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/GetBusinessCompanyServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) GetBusinessCompanyOperationHourByDay(ctx context.Context, in *GetBusinessCompanyOperationHourByDayRequest, opts ...grpc.CallOption) (*GetBusinessCompanyOperationHourByDayResponse, error) {
	out := new(GetBusinessCompanyOperationHourByDayResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/GetBusinessCompanyOperationHourByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) GetBusinessCompanyOperationHours(ctx context.Context, in *GetBusinessCompanyOperationHoursRequest, opts ...grpc.CallOption) (*GetBusinessCompanyOperationHoursResponse, error) {
	out := new(GetBusinessCompanyOperationHoursResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/GetBusinessCompanyOperationHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) GetBusinessCompaniesUnderCategory(ctx context.Context, in *GetBusinessCompaniesUnderCategoryRequest, opts ...grpc.CallOption) (*GetBusinessCompaniesUnderCategoryResponse, error) {
	out := new(GetBusinessCompaniesUnderCategoryResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/GetBusinessCompaniesUnderCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) CreateBusinessCompany(ctx context.Context, in *CreateBusinessCompanyRequest, opts ...grpc.CallOption) (*CreateBusinessCompanyResponse, error) {
	out := new(CreateBusinessCompanyResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/CreateBusinessCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) CreateBusinessCompanyOperationHour(ctx context.Context, in *CreateBusinessCompanyOperationHourRequest, opts ...grpc.CallOption) (*CreateBusinessCompanyOperationHourResponse, error) {
	out := new(CreateBusinessCompanyOperationHourResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/CreateBusinessCompanyOperationHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) UpdateBusinessCompanyOperationHour(ctx context.Context, in *UpdateBusinessCompanyOperationHourRequest, opts ...grpc.CallOption) (*UpdateBusinessCompanyOperationHourResponse, error) {
	out := new(UpdateBusinessCompanyOperationHourResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/UpdateBusinessCompanyOperationHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessCompaniesServiceClient) DeleteBusinessCompanyOperationHour(ctx context.Context, in *DeleteBusinessCompanyOperationHourRequest, opts ...grpc.CallOption) (*DeleteBusinessCompanyOperationHourResponse, error) {
	out := new(DeleteBusinessCompanyOperationHourResponse)
	err := c.cc.Invoke(ctx, "/businessCompanies.BusinessCompaniesService/DeleteBusinessCompanyOperationHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessCompaniesServiceServer is the server API for BusinessCompaniesService service.
type BusinessCompaniesServiceServer interface {
	BusinessCompanyImageDelete(context.Context, *BusinessCompanyImageDeleteRequest) (*BusinessCompanyImageDeleteResponse, error)
	BusinessCompanyImageUpload(context.Context, *BusinessCompanyImageUploadRequest) (*BusinessCompanyImageUploadResponse, error)
	GetBusinessCompany(context.Context, *GetBusinessCompanyRequest) (*GetBusinessCompanyResponse, error)
	GetBusinessCompanies(context.Context, *empty.Empty) (*GetBusinessCompaniesResponse, error)
	GetBusinessCompanyServices(context.Context, *GetBusinessCompanyServicesRequest) (*GetBusinessCompanyServicesResponse, error)
	GetBusinessCompanyOperationHourByDay(context.Context, *GetBusinessCompanyOperationHourByDayRequest) (*GetBusinessCompanyOperationHourByDayResponse, error)
	GetBusinessCompanyOperationHours(context.Context, *GetBusinessCompanyOperationHoursRequest) (*GetBusinessCompanyOperationHoursResponse, error)
	GetBusinessCompaniesUnderCategory(context.Context, *GetBusinessCompaniesUnderCategoryRequest) (*GetBusinessCompaniesUnderCategoryResponse, error)
	CreateBusinessCompany(context.Context, *CreateBusinessCompanyRequest) (*CreateBusinessCompanyResponse, error)
	CreateBusinessCompanyOperationHour(context.Context, *CreateBusinessCompanyOperationHourRequest) (*CreateBusinessCompanyOperationHourResponse, error)
	UpdateBusinessCompanyOperationHour(context.Context, *UpdateBusinessCompanyOperationHourRequest) (*UpdateBusinessCompanyOperationHourResponse, error)
	DeleteBusinessCompanyOperationHour(context.Context, *DeleteBusinessCompanyOperationHourRequest) (*DeleteBusinessCompanyOperationHourResponse, error)
}

// UnimplementedBusinessCompaniesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBusinessCompaniesServiceServer struct {
}

func (*UnimplementedBusinessCompaniesServiceServer) BusinessCompanyImageDelete(context.Context, *BusinessCompanyImageDeleteRequest) (*BusinessCompanyImageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessCompanyImageDelete not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) BusinessCompanyImageUpload(context.Context, *BusinessCompanyImageUploadRequest) (*BusinessCompanyImageUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessCompanyImageUpload not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) GetBusinessCompany(context.Context, *GetBusinessCompanyRequest) (*GetBusinessCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompany not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) GetBusinessCompanies(context.Context, *empty.Empty) (*GetBusinessCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompanies not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) GetBusinessCompanyServices(context.Context, *GetBusinessCompanyServicesRequest) (*GetBusinessCompanyServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompanyServices not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) GetBusinessCompanyOperationHourByDay(context.Context, *GetBusinessCompanyOperationHourByDayRequest) (*GetBusinessCompanyOperationHourByDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompanyOperationHourByDay not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) GetBusinessCompanyOperationHours(context.Context, *GetBusinessCompanyOperationHoursRequest) (*GetBusinessCompanyOperationHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompanyOperationHours not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) GetBusinessCompaniesUnderCategory(context.Context, *GetBusinessCompaniesUnderCategoryRequest) (*GetBusinessCompaniesUnderCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessCompaniesUnderCategory not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) CreateBusinessCompany(context.Context, *CreateBusinessCompanyRequest) (*CreateBusinessCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessCompany not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) CreateBusinessCompanyOperationHour(context.Context, *CreateBusinessCompanyOperationHourRequest) (*CreateBusinessCompanyOperationHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessCompanyOperationHour not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) UpdateBusinessCompanyOperationHour(context.Context, *UpdateBusinessCompanyOperationHourRequest) (*UpdateBusinessCompanyOperationHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessCompanyOperationHour not implemented")
}
func (*UnimplementedBusinessCompaniesServiceServer) DeleteBusinessCompanyOperationHour(context.Context, *DeleteBusinessCompanyOperationHourRequest) (*DeleteBusinessCompanyOperationHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessCompanyOperationHour not implemented")
}

func RegisterBusinessCompaniesServiceServer(s *grpc.Server, srv BusinessCompaniesServiceServer) {
	s.RegisterService(&_BusinessCompaniesService_serviceDesc, srv)
}

func _BusinessCompaniesService_BusinessCompanyImageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCompanyImageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).BusinessCompanyImageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/BusinessCompanyImageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).BusinessCompanyImageDelete(ctx, req.(*BusinessCompanyImageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_BusinessCompanyImageUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessCompanyImageUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).BusinessCompanyImageUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/BusinessCompanyImageUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).BusinessCompanyImageUpload(ctx, req.(*BusinessCompanyImageUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_GetBusinessCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/GetBusinessCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompany(ctx, req.(*GetBusinessCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_GetBusinessCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/GetBusinessCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanies(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_GetBusinessCompanyServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessCompanyServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanyServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/GetBusinessCompanyServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanyServices(ctx, req.(*GetBusinessCompanyServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_GetBusinessCompanyOperationHourByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessCompanyOperationHourByDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanyOperationHourByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/GetBusinessCompanyOperationHourByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanyOperationHourByDay(ctx, req.(*GetBusinessCompanyOperationHourByDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_GetBusinessCompanyOperationHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessCompanyOperationHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanyOperationHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/GetBusinessCompanyOperationHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompanyOperationHours(ctx, req.(*GetBusinessCompanyOperationHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_GetBusinessCompaniesUnderCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessCompaniesUnderCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompaniesUnderCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/GetBusinessCompaniesUnderCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).GetBusinessCompaniesUnderCategory(ctx, req.(*GetBusinessCompaniesUnderCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_CreateBusinessCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).CreateBusinessCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/CreateBusinessCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).CreateBusinessCompany(ctx, req.(*CreateBusinessCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_CreateBusinessCompanyOperationHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessCompanyOperationHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).CreateBusinessCompanyOperationHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/CreateBusinessCompanyOperationHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).CreateBusinessCompanyOperationHour(ctx, req.(*CreateBusinessCompanyOperationHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_UpdateBusinessCompanyOperationHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessCompanyOperationHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).UpdateBusinessCompanyOperationHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/UpdateBusinessCompanyOperationHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).UpdateBusinessCompanyOperationHour(ctx, req.(*UpdateBusinessCompanyOperationHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessCompaniesService_DeleteBusinessCompanyOperationHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessCompanyOperationHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessCompaniesServiceServer).DeleteBusinessCompanyOperationHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/businessCompanies.BusinessCompaniesService/DeleteBusinessCompanyOperationHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessCompaniesServiceServer).DeleteBusinessCompanyOperationHour(ctx, req.(*DeleteBusinessCompanyOperationHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BusinessCompaniesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "businessCompanies.BusinessCompaniesService",
	HandlerType: (*BusinessCompaniesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BusinessCompanyImageDelete",
			Handler:    _BusinessCompaniesService_BusinessCompanyImageDelete_Handler,
		},
		{
			MethodName: "BusinessCompanyImageUpload",
			Handler:    _BusinessCompaniesService_BusinessCompanyImageUpload_Handler,
		},
		{
			MethodName: "GetBusinessCompany",
			Handler:    _BusinessCompaniesService_GetBusinessCompany_Handler,
		},
		{
			MethodName: "GetBusinessCompanies",
			Handler:    _BusinessCompaniesService_GetBusinessCompanies_Handler,
		},
		{
			MethodName: "GetBusinessCompanyServices",
			Handler:    _BusinessCompaniesService_GetBusinessCompanyServices_Handler,
		},
		{
			MethodName: "GetBusinessCompanyOperationHourByDay",
			Handler:    _BusinessCompaniesService_GetBusinessCompanyOperationHourByDay_Handler,
		},
		{
			MethodName: "GetBusinessCompanyOperationHours",
			Handler:    _BusinessCompaniesService_GetBusinessCompanyOperationHours_Handler,
		},
		{
			MethodName: "GetBusinessCompaniesUnderCategory",
			Handler:    _BusinessCompaniesService_GetBusinessCompaniesUnderCategory_Handler,
		},
		{
			MethodName: "CreateBusinessCompany",
			Handler:    _BusinessCompaniesService_CreateBusinessCompany_Handler,
		},
		{
			MethodName: "CreateBusinessCompanyOperationHour",
			Handler:    _BusinessCompaniesService_CreateBusinessCompanyOperationHour_Handler,
		},
		{
			MethodName: "UpdateBusinessCompanyOperationHour",
			Handler:    _BusinessCompaniesService_UpdateBusinessCompanyOperationHour_Handler,
		},
		{
			MethodName: "DeleteBusinessCompanyOperationHour",
			Handler:    _BusinessCompaniesService_DeleteBusinessCompanyOperationHour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companies.proto",
}
